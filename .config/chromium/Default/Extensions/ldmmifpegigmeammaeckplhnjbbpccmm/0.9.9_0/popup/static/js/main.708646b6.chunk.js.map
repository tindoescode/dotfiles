{"version":3,"sources":["shared/MaterialUI.tsx","shared/appConfig.ts","shared/utils.ts","shared/lib/storage.ts","shared/icons/SelectIcon.tsx","shared/icons/CheckboxIcon.tsx","shared/icons/MultiSelectIcon.tsx","shared/icons/TextIcon.tsx","shared/icons/TitleIcon.tsx","shared/icons/LinkIcon.tsx","shared/icons/DragHandleIcon.tsx","shared/icons/DeleteIcon.tsx","shared/icons/PlusIcon.tsx","shared/icons/DuplicateIcon.tsx","shared/icons/TemplateIcon.tsx","shared/icons/NotionPageIcon.tsx","shared/icons/EmptyNotionPageIcon.tsx","shared/icons/RelationIcon.tsx","shared/icons/NumberIcon.tsx","shared/notionapi/log.ts","shared/notionapi/error/RequestError.ts","shared/notionapi/httputil.ts","shared/notionapi/strings.ts","shared/notionapi/error/APIError.ts","shared/notionapi/agent.ts","shared/notionlib/util.ts","shared/notionlib/notion.ts","shared/appUtils.ts","components/dummyRouter.tsx","shared/lib/arrayMove.ts","components/PropretyName.tsx","components/CollectionSelect.tsx","dataTypes/SelectIcon.tsx","dataTypes/MultiSelectIcon.tsx","dataTypes/TextIcon.tsx","dataTypes/TitleIcon.tsx","dataTypes/CheckboxIcon.tsx","dataTypes/LinkIcon.tsx","components/Field.tsx","components/Layout.tsx","components/Reusables.tsx","pages/FillFormPage.tsx","pages/EditForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BoxOld","require","default","Button","makeStyles","TextField","ThemeProvider","createMuiTheme","createStyles","withStyles","breakpoints","sm","md","lg","xl","Box","children","align","alignItems","justifyContent","justify","uppercase","style","props","textTransform","BoxCont","theme","root","display","flexDirection","down","size","width","height","flex","maxWidth","H","background","border","borderRadius","boxShadow","color","padding","noWrap","as","fontSize","fontWeight","whiteSpace","overflow","textOverflow","H4","component","H3","Txt","Boxf","Boxfc","useLoadState","waitingTokens","React","useState","loadStates","setLoadStates","allDone","setAllDone","setCount","required","useMemo","Object","keys","length","setLoaded","x","success","c","s","Opener","onClose","onOpen","isOpen","setIsOpen","handleOpen","a","handleClose","data","FORM_LIST_KEY","notionColors","gray","brown","yellow","green","orange","blue","purple","pink","red","randomNotionColor","Math","floor","random","promisify","fn","options","Promise","accept","cancel","makeid","result","characters","charactersLength","i","charAt","print","sleep","ms","resolve","setTimeout","throttle","waitMs","last","prevFn","prevTimer","args","now","Date","undefined","clearTimeout","max","getTime","apply","getChipColor","option","getCacheKey","key","QUOTA_BYTES_PER_ITEM","chrome","storage","sync","MAX_ITEMS","xset","obj","callback","segment","cacheKey","cache","value","JSON","stringify","substr","push","local","set","remove","xget","cb","err","get","items","found","parse","defaultValue","SelectIcon","viewBox","fill","flexShrink","backfaceVisibility","d","CheckboxIcon","MultiSelectIcon","TextIcon","TitleIcon","LinkIcon","DragHandleIcon","DeleteIcon","PlusIcon","marginRight","marginTop","DuplicateIcon","TemplateIcon","fillRule","clipRule","NotionPageIcon","EmptyNotionPageIcon","RelationIcon","points","NumberIcon","log","Logger","RequestError","message","name","setPrototypeOf","prototype","Error","post","url","myURL","URL","protocol","port","agentOptions","hostname","authority","path","pathname","search","method","headers","setHeader","this","sendAsJson","body","debug","payload","fetch","toString","response","json","Default","APIError","error","status","createAPI","token","req","hasOwnProperty","console","uuid","NotionV3Client","defaultHeaders","origin","referer","custom","createWebClippedPage","parentId","title","addWebClipperURLs","blockId","from","type","createdBlockIds","route","startsWith","slice","toUpperCase","cookie","res","_axios","parsePageId","id","rawId","replace","uncastRowProperty","v","property","strippedName","String","parseFloat","join","getFrontPageImageOperations","pageId","imgUrl","opts","newBlockId","newDividerBlockId","maxSizes","large","normal","small","maxHeight","w","h","fullWidth","blockPageWidth","table","command","version","parent_id","parent_table","alive","source","display_source","block_height","block_width","block_full_width","block_page_width","addDivider","properties","after","domainsIncludeFrontImageMap","Collection","viewId","notionClient","fetched","schema","rows","client","_extractSchema","uid","saveWebClip","lowOp","recordId","clientV2","authToken","createRecordOperations","_table","operations","skipFrontImage","u","n","substring","e","updateRow","where","countTotal","row","countSame","field","transacs","lowOperations","findRow","__template","getTransacOperationsFromTemplate","blocksMap","pageFrontImage","updateDataRecord","k","getDepVal","getParents","parents","block","icon","format","page_icon","reverse","emptyUser","spaces","givenName","DummyNotionClient","notionAuthToken","user","agent","server","setLogLevel","getActivityLog","getAssetsJson","getRecordValues","getSnapshotsList","getUserSharedPages","loadPageChunk","loadUserContent","queryCollection","submitTransaction","createAgent","col","propertyId","valueId","newSchema","newVal","_submitTransaction","spaceId","userKeys","recordMap","notion_user","userData","given_name","space","parent","extra","created_by","created_time","last_edited_time","_buildOperation","dataPaths","lowLevelOperations","map","collectionId","initLocally","param","query","limit","filters","isDeletedOnly","excludeTemplates","isNavigableOnly","requireEditPermissions","ancestors","createdBy","editedBy","lastEditedTime","createdTime","sort","ret","pages","results","page","collections","collection","requestId","transactions","text","getFormData","saveCurrentPopupState","state","createdAt","lastUpdatedAt","getCurrentPopupState","currentUrl","resetCurrentPopupState","pos","forms","filter","form","saveFormData","some","sanitizeFormData","formInfo","favorite","daps","copyBlockOperation","currentId","op","ops","role","blockVal","copied_from","forEach","content","childResults","newContent","flatMap","templateId","extraProperty","applyRefreshCollection","oldDaps","needToResetCollection","mField","fieldsToModify","find","f","nproperty","action","getTemplateInfo","cursor","stack","index","chunkNumber","verticalColumns","resp","refreshCollection","config","getTemplatesInfo","template_pages","all","templatesInfo","checkTemplateUpToDate","needToRemoveTemplate","newTemplate","needToRefreshTemplate","template","getCollectionLocally","ncol","dap","includes","defaultSelectId","opt","defaultSelectIds","every","encrypt","window","btoa","decrypt","atob","fetchNotionClient","fetchUserInfos","errorMsg","getClient","onStatusChange","cookies","cookieWrap","storedCookie","clientData","setUserInfos","cachedCollectionsMap","cachedCollectionsTimeout","getCachedCollectionPages","count","order","p","upsertCachedCollectionPage","oldId","shift","m","b","toLowerCase","newMap","forceUpdate","goTo","comp","goBack","pop","emptyStackComponent","Router","update","create","dispatch","useForceUpdate","Component","arrayMove","array","to","startIndex","item","splice","arrayMoveMutate","ImageIcon","AssignmentOutlinedIcon","dataTypeIcon","select","multi_select","checkbox","relation","number","image","paddingTop","saveContent","PropretyName","marginLeft","Autocomplete","CircularProgress","toCollectionImageUrl","userId","encodeURIComponent","toNotionImageUrl","ColIcon","src","Parents","CollectionSelect","onSelectCollection","disabled","open","setOpen","active","setActive","focus","setFocus","setOptions","inputValue","setInputValue","loading","useContext","DataContext","updateOptions","fetchedCollections","ids","searchCollections","useEffect","minWidth","onInputChange","ev","openOnFocus","onFocus","onChange","reason","getOptionSelected","renderOption","getOptionLabel","renderInput","params","className","placeholder","InputProps","endAdornment","Fragment","Select","MenuItem","AttachFileIcon","FormControlLabel","Checkbox","createFilterOptions","Chip","trim","TypeTextField","onChangeValue","refresh","textClass","textStyle","isNumber","setValue","saveTimeout","useRef","multiline","rowsMax","target","current","onBlur","DataOptionRow","example","DataSelectedOption","TextFieldWithData","datas","onSetOptions","selectedData","multiple","freeSolo","includeInputInList","blurOnSelect","renderTags","tagValue","getTagProps","filterOptions","onMouseDown","inputProps","variant","TypeCheckboxField","propertyName","userSelect","control","checked","label","CheckBoxField","checkboxClass","checkboxStyle","getDefaultOptionOfSelect","SelectFieldNoAutoComplete","onSelectOption","uniqueKey","renderValue","displayEmpty","renderOptionEmpty","renderValueEmpty","SelectField","onChangeField","defaultOption","FormSubmissionContext","createNewValueForProperty","backgroundColor","tagProps","data-tag-index","filtered","pass","newOpt","selectedId","classList","contains","getDefaultOptionsOfMultiSelect","str","MultiSelectField","disableCloseOnSelect","limitTags","getDefaultOptionsOfRelation","xs","toPageImageUrl","PageIcon","SelectedPageOption","iconComp","RelationField","onChangeOptions","createNewPageInCollection","firstOpen","setFirstOpen","fetchedPages","collection_id","pagesMap","searchCollectionPages","FieldWrapper","propertyType","bprops","mb","mr","CustomDisplayDataValue","fontStyle","LockedRow","ml","wordBreak","wordWrap","HeaderViewer","lockedFields","wantImage","pl","pr","objectFit","mt","Field","metadatas","fieldOptions","locked","CloseIcon","KeyboardArrowLeftIcon","IconButton","SettingsIcon","InfoIcon","Dialog","InfoHeader","onClick","InfoDialog","selectedValue","fullScreen","position","right","top","LayoutHeader","onClickOpenOption","onClickGoBack","canGoBack","prevPageName","rightIcon","hideAppTitle","pt","startIcon","modal","Layout","optionParams","minHeight","openOptionsPage","pb","Loading","msg","minLayoutHeight","px","py","Skeleton","loadImage","img","Image","addEventListener","naturalWidth","naturalHeight","SuccessView","rowId","openInDesktop","setOpenInDesktop","openInNotion","tabs","close","onKeyUp","code","document","removeEventListener","FormFields","onUpdateField","getImage","match","regex","exec","getQueryParamsFromUrl","getmetadata","TopLayout","layoutProps","noMargin","formMergedWithModification","final","finalField","useInterval","delay","onUnmount","savedCallback","setInterval","clearInterval","FillFormPage","onGoBack","onError","onChangeForm","setStatus","timerSaveData","formdata","defaultDaps","currentFormHasChanged","setCurrentFormHasChanged","fieldDatas","cleanupFieldDatas","finalForm","setFinalForm","frontImageField","setImportantRefreshing","formId","fieldData","setRefresh","needRefreshCollection","setNeedRefreshCollection","importantRefreshing","setRowId","imageDap","setImageDap","setLockedFields","fields","images","getFrontImage","handleRefreshCollection","useCallback","respGetClient","customCss","needRefreshComponents","finalDaps","visibleField","modified","setMsgInfo","runtime","connect","postMessage","onMessage","addListener","disconnect","handleSubmit","Provider","newPage","createRecord","then","newValue","addValueToPropertyCollection","databaseLocked","Backdrop","Menu","AppBar","LockIcon","LockOpenOutlinedIcon","FormEditContext","createContext","SelectPropertyField","onChangeProperty","EditFormContext","colproperties","prop","valid","alreadyAddedPropertiesId","ps","getOptionDisabled","acceptedPropertyTypes","description","MenuBoxItem","MenuForm","anchorEl","onClickRemove","keepMounted","SortableDragHandleButton","SortableHandle","setAnchorEl","menu","event","currentTarget","SelectDataField","SortableDapItem","SortableElement","onChangeDap","onClickRemoveDap","dapPropertyOptions","pointerEvents","opacity","SortableDapList","SortableContainer","onChangeDaps","modifiedDap","FieldsManager","onSetDaps","onSortEnd","oldIndex","newIndex","useDragHandle","lockToContainerEdges","distance","lockAxis","kind","NameInput","defaultName","onChangeName","setName","inputStyle","onKeyDown","blur","preventDefault","autoComplete","emptyFormData","SpaceSelect","onSelectSpaceId","SavePageContentSelect","savePageContent","onSavePageContentToggle","TemplatesSelect","onSelectTemplateId","templates","genRandomHash","createNewUrlProperty","urlPropId","createDefaultDaps","setLoading","dapTitle","dapLink","dapFrontImage","dapFrontIcon","LoadingSkeletonBox","EditForm","_setData","setData","saveSync","setFormListHasChanged","collection_refresh","localStatus","setLocalStatus","updateData","nd","oldData","applyRefreshCollectionOnData","zIndex","deleteFormData","KeyboardArrowRightIcon","StarOutlineIcon","SettingsOutlinedIcon","getInfoFromCurrentPage","currentWindow","onEdit","onFav","onClickDuplicate","isFavorite","canFavorite","disabledClick","Boolean","SortableFormItem","onDuplicate","onSelectForm","formsCount","onToggleFavoriteForm","FormList","canSavePage","onClickRemoveFormItem","onDuplicateItem","LoadingSelectForm","my","ChooseFormPage","onChangeForms","connectedToNotion","fullForm","newFormInfo","onSortStart","getCurrentPageMetadatas","done","onDisconnect","need_to_login_to_notion","cookie_expired","getParameterByName","location","href","RegExp","decodeURIComponent","camelize","App","setForms","setClient","_setForm","setMetadatas","errorCode","setErrorCode","setFieldDatas","setCanSavePage","formListHasChanged","setForm","EditFormPage","formName","handleLoadFullForm","favForm","completeForm","updateForms","fms","escFunction","keyCode","activeElement","tagName","loading_select_form","loading_metadatas","error_custom","choose_form","submit_form","palette","primary","main","secondary","overrides","MuiButton","MuiChip","paddingLeft","paddingRight","paddingBottom","MuiTextField","InputLabelProps","MuiSelect","MuiMenu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.708646b6.chunk.js","sourcesContent":["import React, { Children, CSSProperties } from \"react\"\nimport { useTheme, styled } from \"@material-ui/core/styles\"\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\"\nexport const Grid = require(\"@material-ui/core/Grid\").default\nconst BoxOld = require(\"@material-ui/core/Box\").default\nexport const Button = require(\"@material-ui/core/Button\").default\nexport const Container = require(\"@material-ui/core/Container\").default\nexport const Avatar = require(\"@material-ui/core/Avatar\").default\nexport const Hidden = require(\"@material-ui/core/Hidden\").default\nexport const IconButton = require(\"@material-ui/core/IconButton\").default\nexport const Menu = require(\"@material-ui/core/Menu\").default\nexport const Popover = require(\"@material-ui/core/Popover\").default\nexport const Tabs = require(\"@material-ui/core/Tabs\").default\nexport const Tab = require(\"@material-ui/core/Tab\").default\nexport const ButtonBase = require(\"@material-ui/core/ButtonBase\").default\nexport const Paper = require(\"@material-ui/core/Paper\").default\nexport const Chip = require(\"@material-ui/core/Chip\").default\nexport const { makeStyles } = require(\"@material-ui/core/styles\")\nexport const {\n  ThemeProvider,\n  createMuiTheme,\n} = require(\"@material-ui/core/styles\")\nexport const TextField = require(\"@material-ui/core/TextField\").default\nexport const LinearProgress = require(\"@material-ui/core/LinearProgress\")\n  .default\n\nexport const Table = require(\"@material-ui/core/Table\").default\nexport const TableBody = require(\"@material-ui/core/TableBody\").default\nexport const TableCell = require(\"@material-ui/core/TableCell\").default\nexport const TableContainer = require(\"@material-ui/core/TableContainer\")\n  .default\nexport const TableHead = require(\"@material-ui/core/TableHead\").default\nexport const TableRow = require(\"@material-ui/core/TableRow\").default\nexport const { createStyles, withStyles } = require(\"@material-ui/core/styles\")\nexport const Switch = require(\"@material-ui/core/Switch\").default\nexport const Divider = require(\"@material-ui/core/Divider\").default\ntype Theme = {\n  [key: string]: any\n}\n\nexport type BoxProps = {\n  style?: CSSProperties\n  [key: string]: any\n}\n\nconst breakpoints = {\n  sm: \"600px\",\n  md: \"960px\",\n  lg: \"1280px\",\n  xl: \"1920px\",\n}\n\nexport const Box = ({\n  children,\n  align = null,\n  alignItems = null,\n  justifyContent = null,\n  justify = null,\n  uppercase = null,\n  style,\n  ...props\n}: BoxProps) => {\n  return (\n    <BoxOld\n      alignItems={align ? align : alignItems}\n      justifyContent={justify ? justify : justifyContent}\n      style={{ textTransform: uppercase ? \"uppercase\" : null, ...style }}\n      {...props}\n    >\n      {children}\n    </BoxOld>\n  )\n}\ninterface BoxHoriProps extends BoxProps {\n  breakOn?: \"sm\" | \"md\" | \"lg\" | \"xl\"\n}\n\nexport const stylesHori = (theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      [theme.breakpoints.down(\"sm\")]: {\n        flexDirection: \"column\",\n      },\n    },\n  })\nexport const BoxHori = ({\n  children,\n  breakOn = \"md\",\n  ...props\n}: BoxHoriProps) => {\n  const theme = useTheme()\n  const breaked = useMediaQuery(`(max-width:${breakpoints[breakOn]})`)\n  return (\n    <Box\n      {...props}\n      display=\"flex\"\n      style={breaked ? { flexDirection: \"column\" } : { flexDirection: \"row\" }}\n    >\n      {children}\n    </Box>\n  )\n}\n\nexport const stylesVert = (theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      [theme.breakpoints.down(\"sm\")]: {\n        flexDirection: \"row\",\n      },\n    },\n  })\n\nexport const BoxVert = withStyles(stylesVert)(\n  ({ children, ...props }: BoxHoriProps) => {\n    return <Box {...props}>{children}</Box>\n  }\n)\n\ninterface BoxContProps extends BoxProps {\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\"\n}\n\nexport const BoxCont = ({ children, size = \"md\", ...props }: BoxContProps) => {\n  return (\n    <Boxf width=\"100%\" height=\"100%\" justifyContent=\"center\">\n      <Box flex={1} maxWidth={breakpoints[size]} {...props}>\n        {children}\n      </Box>\n    </Boxf>\n  )\n}\n\ninterface HProps extends BoxProps {\n  noWrap?: boolean\n  as?: string\n}\ninterface Box2Props extends BoxProps {\n  jss?: object\n}\n\nexport const useStyles = makeStyles({\n  root: {\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n    border: 0,\n    borderRadius: 3,\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n    color: \"white\",\n    height: 48,\n    padding: \"0 30px\",\n  },\n})\n\nexport const Box2 = ({ jss, children, ...props }) => {\n  return (\n    <Box className={jss && jss} {...props}>\n      {children}\n    </Box>\n  )\n}\n\nexport const H: React.FC<HProps> = ({ children, as, noWrap, ...props }) => {\n  return (\n    <Box\n      fontSize={\"16px\"}\n      fontWeight=\"bold\"\n      whiteSpace={noWrap && \"nowrap\"}\n      overflow={noWrap && \"hidden\"}\n      textOverflow={noWrap && \"ellipsis\"}\n      color=\"inherit\"\n      {...props}\n    >\n      {children}\n    </Box>\n  )\n}\n\nconst jss = (key, style) => {\n  let x = jss as any\n  if (!x.keys) x.keys = {}\n  if (!(key in x.keys)) {\n    const o = makeStyles({ x: style })()\n    const k = Object.keys(o)[0]\n    x.keys[key] = k\n  }\n  return x.keys[key]\n}\n\nexport const H4: React.FC<HProps & {}> = ({ children, ...props }) => {\n  return (\n    <H component=\"h4\" fontSize={\"16px\"} fontWeight=\"bold\" {...props}>\n      {children}\n    </H>\n  )\n}\n\nexport const H3: React.FC<HProps & {}> = ({ children, ...props }) => {\n  return (\n    <H component=\"h3\" fontSize={\"20px\"} fontWeight=\"bold\" {...props}>\n      {children}\n    </H>\n  )\n}\n\nexport const H2: React.FC<HProps & {}> = ({ children, ...props }) => {\n  return (\n    <H component=\"h2\" fontSize={\"24px\"} fontWeight=\"bold\" {...props}>\n      {children}\n    </H>\n  )\n}\n\nexport const H1: React.FC<HProps & {}> = ({ children, ...props }) => {\n  return (\n    <H component=\"h1\" fontSize={\"32px\"} fontWeight=\"bold\" {...props}>\n      {children}\n    </H>\n  )\n}\n\nexport const Txt: React.FC<BoxProps & {}> = ({ children, ...props }) => {\n  return (\n    <Box component=\"span\" color=\"inherit\" {...props}>\n      {children}\n    </Box>\n  )\n}\n\nexport const Boxf: React.FC<BoxProps & {}> = ({ children, ...props }) => {\n  //console.log('got',Box);\n  return (\n    <Box display=\"flex\" {...props}>\n      {children}\n    </Box>\n  )\n}\n\nexport const Boxfc: React.FC<BoxProps & {}> = ({ children, ...props }) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" {...props}>\n      {children}\n    </Box>\n  )\n}\n\nexport const BoxPaper: React.FC<BoxProps & {}> = ({\n  children,\n  elevation = null,\n  stylePaper = null,\n  ...props\n}) => {\n  return (\n    <Box {...props}>\n      <Paper\n        style={{\n          width: \"100%\",\n          backgroundColor: \"inherit\",\n          ...(stylePaper ? stylePaper : {}),\n        }}\n        elevation={elevation}\n      >\n        {children}\n      </Paper>\n    </Box>\n  )\n}\n\nexport const Content: React.FC<BoxProps & {}> = ({ children, ...props }) => {\n  return (\n    <Box className=\"content\" {...props}>\n      {children}\n    </Box>\n  )\n}\n\nlet _cb = {}\nexport function callAfterMs(\n  duration: number,\n  fn: any,\n  key: string = \"default\"\n): void {\n  if (key in _cb) {\n    clearTimeout(_cb[key])\n  }\n  _cb[key] = setTimeout(() => {\n    delete _cb[key]\n    fn()\n  }, duration)\n}\n\nexport const Touchable = ({ children, ...props }) => {\n  return (\n    <div style={{ cursor: \"pointer\" }} {...props}>\n      {children}\n    </div>\n  )\n}\n\nexport function useLoadState<T>(waitingTokens: T) {\n  const [loadStates, setLoadStates] = React.useState<\n    Partial<Record<keyof T, boolean>>\n  >({})\n  const [allDone, setAllDone] = React.useState(false)\n  const [count, setCount] = React.useState(0)\n  const required = React.useMemo(() => Object.keys(waitingTokens).length, [\n    waitingTokens,\n  ])\n\n  const setLoaded = (x: keyof T, success: boolean = true) => {\n    if (x in loadStates) throw `already loaded ${x}`\n    setCount((c) => {\n      setLoadStates((s) => ({ ...s, [x]: success }))\n      if (c + 1 == required) {\n        setAllDone(true)\n      }\n      return c + 1\n    })\n  }\n\n  return {\n    allDone,\n    setLoaded,\n    loadStates,\n  }\n}\n\nexport const Opener = ({\n  onClose,\n  onOpen,\n  children,\n}: {\n  onClose?\n  onOpen?\n  children: ({\n    handleOpen,\n    handleClose,\n    isOpen,\n  }: {\n    handleOpen: any\n    handleClose: any\n    isOpen: boolean\n  }) => any\n}) => {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      {children({\n        handleOpen: async () => {\n          setIsOpen(true)\n          onOpen && (await onOpen())\n        },\n        handleClose: async (data) => {\n          setIsOpen(false)\n          onClose && (await onClose(data))\n        },\n        isOpen,\n      })}\n    </>\n  )\n}\n","import { Collection } from \"./notionapi/interfaces\"\nimport { Collection as Col } from \"./notionapi/interfaces/notion-models/collection\"\n\nexport const APP_NAME = \"Save to Notion\"\n\nexport const APP_VERSION = \"0.9.9\"\nexport const APP_VERSION_FULL = \"0.9.9\"\n\nexport const WHATS_NEW_LINK =\n  \"https://www.notion.so/What-s-new-Save-To-Notion-b85cff00e8c24b10a893a6aa18a887fa\"\nexport const FORM_LIST_KEY = \"STORAGE_KEY_FORM_LIST\"\nexport const FORM_KEY_PREFIX = \"form-\"\nexport const COOKIE_KEY = \"cookie\"\nexport const NOTION_CLIENT_DATA_KEY = \"notion-client-data\"\n\nexport const notionColors = {\n  default: \"rgba(206, 205, 202, 0.5)\",\n  gray: \"rgba(155, 154, 151, 0.4)\",\n  brown: \"rgba(140, 46, 0, 0.2)\",\n  yellow: \"rgba(233, 168, 0, 0.2)\",\n  green: \"rgba(0, 135, 107, 0.2)\",\n  orange: \"rgba(245, 93, 0, 0.2)\",\n  blue: \"rgba(0, 120, 223, 0.2)\",\n  purple: \"rgba(103, 36, 222, 0.2)\",\n  pink: \"rgba(221, 0, 129, 0.2)\",\n  red: \"rgba(255, 0, 26, 0.2)\",\n}\n\nexport function randomNotionColor(): keyof typeof notionColors {\n  return Object.keys(notionColors)[\n    Math.floor(Math.random() * Object.keys(notionColors).length)\n  ] as any\n}\nexport type DapOptions = Partial<DapOptionsWhenData>\ntype ID = string\n\nexport type DapOptionsSelectedDataTypes =\n  | \"webpageUrl\"\n  | \"webpageTitle\"\n  | \"webpageDescription\"\n  | \"webpageImage\"\n  | \"domainName\"\n  | \"websiteIcon\"\n\nexport type CustomCSSData = {\n  type: \"simple\"\n  css: string\n  on: \"text\" | \"href\" | string\n}\n\ntype DapOptionsWhenData = {\n  selectedData?: DapOptionsSelectedDataTypes\n  customCss?: CustomCSSData\n  //if Dap kind is \"prefilled\" and just a simple text\n  defaultValue?: string\n  //if Dap kind is \"prefilled\" and is a select data kind\n  defaultSelectId?: string\n  defaultSelectIds?: string[]\n}\ntype DapKind = \"data\" | \"prefilled\" | \"field-to-complete\"\n\nexport type ImageOptions = {\n  type: \"original\" | \"coverLike\" | \"fullWidthCover\"\n  size: \"normal\" | \"small\" | \"large\"\n}\n\nexport type FieldOptions = {\n  locked: boolean\n  //multiline:boolean\n  image?: ImageOptions\n}\n\nexport type OptionParams = {\n  action: \"new\" | \"edit\"\n  id?: string\n  databaseLocked?: boolean\n}\n\nexport type ModifiedDapProperty = Col.ColumnProperty & { id: string }\n\nexport type Dap = {\n  kind: DapKind\n  property?: ModifiedDapProperty\n  key: string\n  options: DapOptions\n  fieldOptions: FieldOptions\n}\n\nexport type TemplateInfo = {\n  id: ID\n  name: string\n  lastEditedTime: number\n  icon?: string\n}\n\nexport type FormListItem = { name: string; id: string; favorite?: boolean }\nexport type FormListData = FormListItem[]\nexport type FormData = {\n  collection: Collection\n  daps: Dap[]\n  id: ID\n  name: string\n  spaceId: string\n\n  template?: TemplateInfo\n  advancedSettingsIsOpen?: boolean\n  savePageContent?: boolean\n  //runtime parameters\n  needToRefreshTemplate?: boolean\n}\n","import { notionColors } from \"./appConfig\"\nimport storage from \"./lib/storage\"\nimport { CollectionPage } from \"./notionlib/notion\"\n\nexport function promisify<Options, Return>(\n  fn: (opts: Options, cb: (x?: Return) => void) => void,\n  options: Options\n): Promise<Return> {\n  return new Promise((accept, cancel) => {\n    fn(options, accept)\n  })\n}\n\nexport function call(cb) {\n  new Promise((resolve, cancel) => {\n    resolve(cb())\n  })\n}\n\nexport function makeid(length) {\n  var result = \"\"\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n  var charactersLength = characters.length\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\n  }\n  return result\n}\n\nexport const print =\n  process.env.NODE_ENV === \"production\" ? (...args) => {} : console.log\n\nexport const sleep = async (ms) =>\n  new Promise((resolve) => setTimeout(resolve, ms))\n\n//dead simple implementation. more robust here: https://stackoverflow.com/questions/27078285/simple-throttle-in-js\nexport function throttle(fn, waitMs: number) {\n  let last: Date\n  let prevFn: any\n  let prevTimer: any\n  return (...args) => {\n    const now = new Date()\n    if (prevFn) {\n      prevFn(undefined)\n      clearTimeout(prevTimer)\n      prevFn = null\n    }\n    return new Promise((resolve) => {\n      const x = last\n        ? Math.max(0, waitMs - (now.getTime() - last.getTime()))\n        : 0\n      prevFn = resolve\n      prevTimer = setTimeout(function () {\n        last = now\n        prevFn = null\n        resolve(fn.apply(null, args))\n      }, x)\n    })\n  }\n}\n\nexport function getChipColor(option: any) {\n  return option.color in notionColors\n    ? notionColors[option.color]\n    : notionColors.default\n}\n\nconst arrayMoveMutate = (array, from, to) => {\n  const startIndex = to < 0 ? array.length + to : to\n  const item = array.splice(from, 1)[0]\n  array.splice(startIndex, 0, item)\n}\n\nexport const arrayMove = (array, from, to) => {\n  array = array.slice()\n  arrayMoveMutate(array, from, to)\n  return array\n}\n","import { promisify, print } from \"../utils\"\n\nfunction getCacheKey(key, i) {\n  return i === 0 ? key : key + \"_\" + i\n}\n\nconst QUOTA_BYTES_PER_ITEM = chrome.storage.sync?.QUOTA_BYTES_PER_ITEM || 8192\nconst MAX_ITEMS = chrome.storage.sync?.MAX_ITEMS || 512\n\n/**\n * Allows to save strings longer than QUOTA_BYTES_PER_ITEM in chrome.storage.sync by splitting them into smaller parts.\n * Please note that you still can't save more than QUOTA_BYTES.\n *\n * @param {string} key\n * @param {string} value\n * @param {function(): void=} callback\n */\nfunction xset(key, obj, callback) {\n  var i = 0,\n    cache = {},\n    segment,\n    cacheKey\n\n  // split value into chunks and store them in an object indexed by `key_i`\n  let value = JSON.stringify(obj)\n  let x: any[] = []\n  while (value.length > 0) {\n    cacheKey = getCacheKey(key, i)\n    //if you are wondering about -2 at the end see: https://code.google.com/p/chromium/issues/detail?id=261572\n    segment = value.substr(0, QUOTA_BYTES_PER_ITEM - cacheKey.length - 2)\n    x.push(segment.length)\n    cache[cacheKey] = segment\n    value = value.substr(QUOTA_BYTES_PER_ITEM - cacheKey.length - 2)\n    i++\n  }\n  //console.log(chrome.storage.sync.QUOTA_BYTES_PER_ITEM, Object.keys(cache), x);\n\n  // store all the chunks\n  chrome.storage.local.set(cache, callback)\n\n  //we need to make sure that after the last chunk we have an empty chunk. Why this is so important?\n  // Saving v1 of our object. Chrome sync status: [chunk1v1] [chunk2v1] [chunk3v1]\n  // Saving v2 of our object (a bit smaller). Chrome sync status: [chunk1v2] [chunk2v2] [chunk3v1]\n  // When reading this configuration back we will end up with chunk3v1 being appended to the chunk1v2+chunk2v2\n  chrome.storage.local.remove(getCacheKey(key, i))\n}\n\n/**\n * Retrieves chunks of value stored in chrome.storage.sync and combines them.\n *\n * @param {string} key\n * @param {function(string):void=} callback\n * @param {function(string):void=} error callback\n */\nfunction xget(key, cb, err) {\n  //get everything from storage\n  chrome.storage.local.get(null, function (items) {\n    var i,\n      value = \"\"\n    let found = false\n    for (i = 0; i < MAX_ITEMS; i++) {\n      if (items[getCacheKey(key, i)] === undefined) {\n        break\n      }\n      found = true\n      value += items[getCacheKey(key, i)]\n    }\n    //console.log(\"value\",value);\n    if (found) cb(JSON.parse(value))\n    else err()\n  })\n}\n\n//let v = {}\n\nexport async function get(key, defaultValue): Promise<any> {\n  //remove\n  /*return new Promise((accept) => {\n    print(\"set\", key, defaultValue)\n    if (v[key]) accept(v[key])\n    else accept(defaultValue)\n  })*/\n  //old\n  return new Promise((accept) => {\n    xget(\n      key,\n      (value) => {\n        accept(value)\n      },\n      async () => {\n        print(\"no value found, saving default\")\n        await set(key, defaultValue)\n        accept(defaultValue)\n      }\n    )\n  })\n}\n\nexport async function set(key, obj: any): Promise<void> {\n  /*print(\n    \"storing\",\n    key,\n    obj,\n    chrome.storage.sync.QUOTA_BYTES_PER_ITEM,\n    chrome.storage.sync.MAX_ITEMS\n  )*/\n  new Promise((accept) => {\n    xset(key, obj, () => {\n      accept()\n    })\n  })\n}\n\nexport default {\n  set,\n  get,\n}\n","import React from \"react\"\r\n\r\nexport const SelectIcon = ({}:{}) => {\r\n    return (<>\r\n<svg viewBox=\"0 0 14 14\"\r\nstyle={{width:'14px', height:'14px', display: 'block',\r\nfill:'rgba(55, 53, 47, 0.4)',\r\nflexShrink: 0, backfaceVisibility: 'hidden',\r\n    }}>\r\n    <path d=\"M7,13 C10.31348,13 13,10.31371 13,7 C13,3.68629 10.31348,1 7,1 C3.68652,1 1,3.68629 1,7 C1,10.31371 3.68652,13 7,13 Z M3.75098,5.32278 C3.64893,5.19142 3.74268,5 3.90869,5 L10.09131,5 C10.25732,5 10.35107,5.19142 10.24902,5.32278 L7.15771,9.29703 C7.07764,9.39998 6.92236,9.39998 6.84229,9.29703 L3.75098,5.32278 Z\"></path></svg>\r\n    </>);\r\n}\r\nexport default SelectIcon;","import React from \"react\"\r\n\r\nexport const CheckboxIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 14 14\"\r\n        style={{\r\n          width: \"16px\",\r\n          height: \"16px\",\r\n          display: \"block\",\r\n          fill: \"rgba(55, 53, 47, 0.4)\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n        }}\r\n      >\r\n        <path d=\"M0,3 C0,1.34314 1.34326,0 3,0 L11,0 C12.6567,0 14,1.34314 14,3 L14,11 C14,12.6569 12.6567,14 11,14 L3,14 C1.34326,14 0,12.6569 0,11 L0,3 Z M3,1.5 C2.17139,1.5 1.5,2.17157 1.5,3 L1.5,11 C1.5,11.8284 2.17139,12.5 3,12.5 L11,12.5 C11.8286,12.5 12.5,11.8284 12.5,11 L12.5,3 C12.5,2.17157 11.8286,1.5 11,1.5 L3,1.5 Z M2.83252,6.8161 L3.39893,6.27399 L3.57617,6.10425 L3.92334,5.77216 L4.26904,6.10559 L4.44531,6.27582 L5.58398,7.37402 L9.28271,3.81073 L9.45996,3.64008 L9.80664,3.3056 L10.1538,3.63989 L10.3311,3.81067 L10.8936,4.35303 L11.0708,4.52399 L11.4434,4.88379 L11.0708,5.24353 L10.8936,5.41437 L6.1084,10.0291 L5.93115,10.2 L5.58398,10.5344 L5.23682,10.2 L5.05957,10.0292 L2.83057,7.87946 L2.65283,7.70801 L2.27832,7.34674 L2.6543,6.98694 L2.83252,6.8161 Z\"></path>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\nexport default CheckboxIcon\r\n","import React from \"react\"\r\n\r\nexport const MultiSelectIcon = ({}:{}) => {\r\n    return (<>\r\n<svg viewBox=\"0 0 14 14\" style={{\"width\":\"14px\",\"height\":\"14px\",\"display\":\"block\",\"fill\":\"rgba(55, 53, 47, 0.4)\",\r\n\"flexShrink\":0,\"backfaceVisibility\":\"hidden\"}}\r\n>\r\n<path d=\"M4,3 C4,2.447715 4.447715,2 5,2 L12,2 C12.5523,2 13,2.447716 13,3 C13,3.55228 12.5523,4 12,4 L5,4 C4.447715,4 4,3.55228 4,3 Z M4,7 C4,6.447715 4.447715,6 5,6 L12,6 C12.5523,6 13,6.447716 13,7 C13,7.55228 12.5523,8 12,8 L5,8 C4.447715,8 4,7.55228 4,7 Z M4,11 C4,10.447715 4.447715,10 5,10 L12,10 C12.5523,10 13,10.447716 13,11 C13,11.55228 12.5523,12 12,12 L5,12 C4.447715,12 4,11.55228 4,11 Z M2,4 C1.44771525,4 1,3.55228475 1,3 C1,2.44771525 1.44771525,2 2,2 C2.55228475,2 3,2.44771525 3,3 C3,3.55228475 2.55228475,4 2,4 Z M2,8 C1.44771525,8 1,7.55228475 1,7 C1,6.44771525 1.44771525,6 2,6 C2.55228475,6 3,6.44771525 3,7 C3,7.55228475 2.55228475,8 2,8 Z M2,12 C1.44771525,12 1,11.5522847 1,11 C1,10.4477153 1.44771525,10 2,10 C2.55228475,10 3,10.4477153 3,11 C3,11.5522847 2.55228475,12 2,12 Z\"></path></svg>\r\n    </>);\r\n}\r\n\r\nexport default MultiSelectIcon;\r\n","import React from \"react\"\r\n\r\nexport const TextIcon = ({}:{}) => {\r\n    return (<>\r\n    \r\n<svg viewBox=\"0 0 14 14\"\r\nstyle={{\"width\":\"14px\",\"height\":\"14px\",\"display\":\"block\",\"fill\":\"rgba(55, 53, 47, 0.4)\",\"flexShrink\":0,\"backfaceVisibility\":\"hidden\"}}>\r\n    \r\n    <path d=\"M7,4.56818 C7,4.29204 6.77614,4.06818 6.5,4.06818 L0.5,4.06818 C0.223858,4.06818 0,4.29204 0,4.56818 L0,5.61364 C0,5.88978 0.223858,6.11364 0.5,6.11364 L6.5,6.11364 C6.77614,6.11364 7,5.88978 7,5.61364 L7,4.56818 Z M0.5,1 C0.223858,1 0,1.223858 0,1.5 L0,2.54545 C0,2.8216 0.223858,3.04545 0.5,3.04545 L12.5,3.04545 C12.7761,3.04545 13,2.8216 13,2.54545 L13,1.5 C13,1.223858 12.7761,1 12.5,1 L0.5,1 Z M0,8.68182 C0,8.95796 0.223858,9.18182 0.5,9.18182 L11.5,9.18182 C11.7761,9.18182 12,8.95796 12,8.68182 L12,7.63636 C12,7.36022 11.7761,7.13636 11.5,7.13636 L0.5,7.13636 C0.223858,7.13636 0,7.36022 0,7.63636 L0,8.68182 Z M0,11.75 C0,12.0261 0.223858,12.25 0.5,12.25 L9.5,12.25 C9.77614,12.25 10,12.0261 10,11.75 L10,10.70455 C10,10.4284 9.77614,10.20455 9.5,10.20455 L0.5,10.20455 C0.223858,10.20455 0,10.4284 0,10.70455 L0,11.75 Z\">\r\n    </path></svg>\r\n  </>);\r\n}\r\nexport default TextIcon;\r\n","import React from \"react\"\r\n\r\nexport const TitleIcon = ({}:{}) => {\r\n    return (<>\r\n    \r\n<svg viewBox=\"0 0 14 14\"\r\nstyle={{\"width\":\"14px\",\"height\":\"14px\",\"display\":\"block\",\"fill\":\"rgba(55, 53, 47, 0.4)\",\"flexShrink\":0,\"backfaceVisibility\":\"hidden\"}}><path d=\"M7.73943662,8.6971831 C7.77640845,8.7834507 7.81338028,8.8943662 7.81338028,9.00528169 C7.81338028,9.49823944 7.40669014,9.89260563 6.91373239,9.89260563 C6.53169014,9.89260563 6.19894366,9.64612676 6.08802817,9.30105634 L5.75528169,8.33978873 L2.05809859,8.33978873 L1.72535211,9.30105634 C1.61443662,9.64612676 1.2693662,9.89260563 0.887323944,9.89260563 C0.394366197,9.89260563 0,9.49823944 0,9.00528169 C0,8.8943662 0.0246478873,8.7834507 0.0616197183,8.6971831 L2.46478873,2.48591549 C2.68661972,1.90669014 3.24119718,1.5 3.90669014,1.5 C4.55985915,1.5 5.12676056,1.90669014 5.34859155,2.48591549 L7.73943662,8.6971831 Z M2.60035211,6.82394366 L5.21302817,6.82394366 L3.90669014,3.10211268 L2.60035211,6.82394366 Z M11.3996479,3.70598592 C12.7552817,3.70598592 14,4.24823944 14,5.96126761 L14,9.07922535 C14,9.52288732 13.6549296,9.89260563 13.2112676,9.89260563 C12.8169014,9.89260563 12.471831,9.59683099 12.4225352,9.19014085 C12.028169,9.6584507 11.3257042,9.95422535 10.5492958,9.95422535 C9.60035211,9.95422535 8.47887324,9.31338028 8.47887324,7.98239437 C8.47887324,6.58978873 9.60035211,6.08450704 10.5492958,6.08450704 C11.3380282,6.08450704 12.040493,6.33098592 12.4348592,6.81161972 L12.4348592,5.98591549 C12.4348592,5.38204225 11.9172535,4.98767606 11.1285211,4.98767606 C10.6602113,4.98767606 10.2411972,5.11091549 9.80985915,5.38204225 C9.72359155,5.43133803 9.61267606,5.46830986 9.50176056,5.46830986 C9.18133803,5.46830986 8.91021127,5.1971831 8.91021127,4.86443662 C8.91021127,4.64260563 9.0334507,4.44542254 9.19366197,4.34683099 C9.87147887,3.90316901 10.6232394,3.70598592 11.3996479,3.70598592 Z M11.1778169,8.8943662 C11.6830986,8.8943662 12.1760563,8.72183099 12.4348592,8.37676056 L12.4348592,7.63732394 C12.1760563,7.29225352 11.6830986,7.11971831 11.1778169,7.11971831 C10.5616197,7.11971831 10.056338,7.45246479 10.056338,8.0193662 C10.056338,8.57394366 10.5616197,8.8943662 11.1778169,8.8943662 Z M0.65625,11.125 L13.34375,11.125 C13.7061869,11.125 14,11.4188131 14,11.78125 C14,12.1436869 13.7061869,12.4375 13.34375,12.4375 L0.65625,12.4375 C0.293813133,12.4375 4.43857149e-17,12.1436869 0,11.78125 C-4.43857149e-17,11.4188131 0.293813133,11.125 0.65625,11.125 Z\"></path></svg>\r\n  </>);\r\n}\r\nexport default TitleIcon;\r\n","import React from \"react\"\r\n\r\nexport const LinkIcon = ({}:{}) => {\r\n    return (<>\r\n<svg viewBox=\"0 0 14 14\" style={{\"width\":\"14px\",\"height\":\"14px\",\"display\":\"block\",\"fill\":\"rgba(55, 53, 47, 0.4)\",\"flexShrink\":0,\"backfaceVisibility\":\"hidden\"}}><path d=\"M3.73333,3.86667 L7.46667,3.86667 C8.49613,3.86667 9.33333,4.70387 9.33333,5.73333 C9.33333,6.7628 8.49613,7.6 7.46667,7.6 L6.53333,7.6 C6.01813,7.6 5.6,8.0186 5.6,8.53333 C5.6,9.04807 6.01813,9.46667 6.53333,9.46667 L7.46667,9.46667 C9.5284,9.46667 11.2,7.79507 11.2,5.73333 C11.2,3.6716 9.5284,2 7.46667,2 L3.73333,2 C1.6716,2 0,3.6716 0,5.73333 C0,7.124 0.762067,8.33453 1.88953,8.97713 C1.87553,8.83107 1.86667,8.6836 1.86667,8.53333 C1.86667,7.92013 1.98753,7.33447 2.2036,6.7978 C1.99267,6.4954 1.86667,6.12953 1.86667,5.73333 C1.86667,4.70387 2.70387,3.86667 3.73333,3.86667 Z M12.1095,5.28907 C12.1231,5.4356 12.1333,5.58307 12.1333,5.73333 C12.1333,6.34607 12.0101,6.9294 11.7931,7.46513 C12.0059,7.768 12.1333,8.13573 12.1333,8.53333 C12.1333,9.5628 11.2961,10.4 10.2667,10.4 L6.53333,10.4 C5.50387,10.4 4.66667,9.5628 4.66667,8.53333 C4.66667,7.50387 5.50387,6.66667 6.53333,6.66667 L7.46667,6.66667 C7.98187,6.66667 8.4,6.24807 8.4,5.73333 C8.4,5.2186 7.98187,4.8 7.46667,4.8 L6.53333,4.8 C4.4716,4.8 2.8,6.4716 2.8,8.53333 C2.8,10.59507 4.4716,12.2667 6.53333,12.2667 L10.2667,12.2667 C12.3284,12.2667 14,10.59507 14,8.53333 C14,7.14267 13.2375,5.93167 12.1095,5.28907 Z\"></path></svg>\r\n  </>);\r\n}\r\nexport default LinkIcon;\r\n","import React from \"react\"\r\n\r\nexport const DragHandleIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 10 10\"\r\n        style={{\r\n          width: \"14px\",\r\n          height: \"14px\",\r\n          display: \"block\",\r\n          fill: \"inherit\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n        }}\r\n      >\r\n        <path d=\"M3,2 C2.44771525,2 2,1.55228475 2,1 C2,0.44771525 2.44771525,0 3,0 C3.55228475,0 4,0.44771525 4,1 C4,1.55228475 3.55228475,2 3,2 Z M3,6 C2.44771525,6 2,5.55228475 2,5 C2,4.44771525 2.44771525,4 3,4 C3.55228475,4 4,4.44771525 4,5 C4,5.55228475 3.55228475,6 3,6 Z M3,10 C2.44771525,10 2,9.55228475 2,9 C2,8.44771525 2.44771525,8 3,8 C3.55228475,8 4,8.44771525 4,9 C4,9.55228475 3.55228475,10 3,10 Z M7,2 C6.44771525,2 6,1.55228475 6,1 C6,0.44771525 6.44771525,0 7,0 C7.55228475,0 8,0.44771525 8,1 C8,1.55228475 7.55228475,2 7,2 Z M7,6 C6.44771525,6 6,5.55228475 6,5 C6,4.44771525 6.44771525,4 7,4 C7.55228475,4 8,4.44771525 8,5 C8,5.55228475 7.55228475,6 7,6 Z M7,10 C6.44771525,10 6,9.55228475 6,9 C6,8.44771525 6.44771525,8 7,8 C7.55228475,8 8,8.44771525 8,9 C8,9.55228475 7.55228475,10 7,10 Z\"></path>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\nexport default DragHandleIcon\r\n","import React from \"react\"\r\n\r\nexport const DeleteIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 30 30\"\r\n        style={{\r\n          width: \"17px\",\r\n          height: \"17px\",\r\n          display: \"block\",\r\n          fill: \"inherit\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n        }}\r\n      >\r\n        <path d=\"M21,5c0-2.2-1.8-4-4-4h-4c-2.2,0-4,1.8-4,4H2v2h2v22h22V7h2V5H21z M13,3h4c1.104,0,2,0.897,2,2h-8C11,3.897,11.897,3,13,3zM24,27H6V7h18V27z M16,11h-2v12h2V11z M20,11h-2v12h2V11z M12,11h-2v12h2V11z\"></path>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\nexport default DeleteIcon\r\n","import React from \"react\"\r\n\r\nexport const PlusIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 16 16\"\r\n        style={{\r\n          width: \"15px\",\r\n          height: \"15px\",\r\n          display: \"block\",\r\n          fill: \"rgba(55, 53, 47, 0.3)\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n          marginRight: \"9px\",\r\n          marginTop: \"1px\",\r\n        }}\r\n      >\r\n        <path d=\"M7.977 14.963c.407 0 .747-.324.747-.723V8.72h5.362c.399 0 .74-.34.74-.747a.746.746 0 00-.74-.738H8.724V1.706c0-.398-.34-.722-.747-.722a.732.732 0 00-.739.722v5.529h-5.37a.746.746 0 00-.74.738c0 .407.341.747.74.747h5.37v5.52c0 .399.332.723.739.723z\"></path>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\nexport default PlusIcon\r\n","import React from \"react\"\r\n\r\nexport const DuplicateIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 30 30\"\r\n        style={{\r\n          width: \"17px\",\r\n          height: \"17px\",\r\n          display: \"block\",\r\n          fill: \"inherit\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n        }}\r\n      >\r\n        <path d=\"M1,29h20V9H1V29z M3,11h16v16H3V11z M9,1v6h2V3h16v16h-4v2h6V1H9z\"></path>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DuplicateIcon\r\n","import React from \"react\"\r\n\r\nexport const TemplateIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 14 14\"\r\n        style={{\r\n          width: \"15px\",\r\n          height: \"15px\",\r\n          display: \"block\",\r\n          fill: \"rgba(55, 53, 47, 0.4)\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n        }}\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M7.237 1l7.84 1.237-1.201 7.61L11.5 6.15 9.424 9.38 6 8.84 7.237 1zM5.545 5.31a4 4 0 1 0 2.29 4.832l-2.979-.47.689-4.363zM7 15l4.5-7 4.5 7H7z\"\r\n        ></path>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\nexport default TemplateIcon\r\n","import React from \"react\"\n\nexport const NotionPageIcon = ({}: {}) => {\n  return (\n    <>\n      <svg\n        viewBox=\"0 0 30 30\"\n        style={{\n          width: \"19.8px\",\n          height: \"19.8px\",\n          display: \"block\",\n          fill: \"rgba(55, 53, 47, 0.4)\",\n          flexShrink: 0,\n          backfaceVisibility: \"hidden\",\n        }}\n      >\n        <g>\n          {\" \"}\n          <path d=\"M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z\"></path>{\" \"}\n        </g>\n      </svg>{\" \"}\n    </>\n  )\n}\nexport default NotionPageIcon\n","import React from \"react\"\n\nexport const EmptyNotionPageIcon = ({}: {}) => {\n  return (\n    <>\n      <svg\n        viewBox=\"0 0 30 30\"\n        style={{\n          width: \"19.8px\",\n          height: \"19.8px\",\n          display: \"block\",\n          fill: \"rgba(55, 53, 47, 0.4)\",\n          flexShrink: 0,\n          backfaceVisibility: \"hidden\",\n        }}\n      >\n        <g>\n          {\" \"}\n          <path d=\"M16,1H4v28h22V11L16,1z M23.172,11H16V3.828L23.172,11z M24,27H6V3h8v10h10V27z\"></path>{\" \"}\n        </g>\n      </svg>\n    </>\n  )\n}\nexport default EmptyNotionPageIcon\n","import React from \"react\"\r\n\r\nexport const RelationIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 14 14\"\r\n        style={{\r\n          width: \"14px\",\r\n          height: \"14px\",\r\n          display: \"block\",\r\n          fill: \"rgba(55, 53, 47, 0.4)\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n        }}\r\n      >\r\n        <polygon points=\"4.5 1 4.5 3 9.586 3 1 11.586 2.414 13 11 4.414 11 9.5 13 9.5 13 1\"></polygon>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\nexport default RelationIcon\r\n","import React from \"react\"\r\n\r\nexport const NumberIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 14 14\"\r\n        style={{\r\n          width: \"14px\",\r\n          height: \"14px\",\r\n          display: \"block\",\r\n          fill: \"rgba(55, 53, 47, 0.4)\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n        }}\r\n      >\r\n        <path d=\"M4.46191,0 C3.8667,0 3.38428,0.482422 3.38428,1.07751 L3.38428,3.38425 L1.07764,3.38425 C0.482422,3.38425 0,3.86667 0,4.46179 C0,5.05688 0.482422,5.53931 1.07764,5.53931 L3.38428,5.53931 L3.38428,8.46063 L1.07764,8.46063 C0.482422,8.46063 0,8.94308 0,9.53818 C0,10.1333 0.482422,10.6157 1.07764,10.6157 L3.38428,10.6157 L3.38428,12.9224 C3.38428,13.5175 3.8667,13.9999 4.46191,13.9999 C5.05664,13.9999 5.53906,13.5175 5.53906,12.9224 L5.53906,10.6157 L8.46045,10.6157 L8.46045,12.9224 C8.46045,13.5175 8.94287,13.9999 9.53809,13.9999 C10.1333,13.9999 10.6157,13.5175 10.6157,12.9224 L10.6157,10.6157 L12.9224,10.6157 C13.5176,10.6157 14,10.1333 14,9.53818 C14,8.94308 13.5176,8.46063 12.9224,8.46063 L10.6157,8.46063 L10.6157,5.53931 L12.9224,5.53931 C13.5176,5.53931 14,5.05688 14,4.46179 C14,3.86667 13.5176,3.38425 12.9224,3.38425 L10.6157,3.38425 L10.6157,1.07751 C10.6157,0.482422 10.1333,0 9.53809,0 C8.94287,0 8.46045,0.482422 8.46045,1.07751 L8.46045,3.38425 L5.53906,3.38425 L5.53906,1.07751 C5.53906,0.482422 5.05664,0 4.46191,0 Z M5.53906,8.46063 L5.53906,5.53931 L8.46045,5.53931 L8.46045,8.46063 L5.53906,8.46063 Z\"></path>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\nexport default NumberIcon\r\n","/** Import libraries. */\nimport { Logger } from \"@dnpr/logger\"\n\n/**\n * @category Library Internal\n */\nconst log = new Logger(\"notionapi-agent\")\n\nexport { log }\n","/**\n * @category Error\n */\nexport class RequestError extends Error {\n  name = \"RequestError\"\n\n  constructor(message: string) {\n    super()\n    Object.setPrototypeOf(this, RequestError.prototype)\n    this.message = message\n  }\n}\n","/** Import libraries. */\n//import { makeHTTPRequest, makeHTTPSRequest } from \"@dnpr/make-request\"\n//import fetch from 'node-fetch';\n/** Import other sripts. */\nimport { log } from \"./log\"\nimport { RequestError } from \"./error/RequestError\"\n\ntype Await<T> = T extends {\n  then(onfulfilled?: (value: infer U) => unknown): unknown\n}\n  ? U\n  : T\n\n/**\n * @category Library Internal\n */\nfunction post(url: string) {\n  const myURL = new URL(url)\n\n  if (myURL.protocol !== \"http:\" && myURL.protocol !== \"https:\") {\n    throw new RequestError(`Unsupported protocol: ${myURL.protocol}`)\n  }\n\n  const port = myURL.port ? myURL.port : myURL.protocol === \"http:\" ? 80 : 443\n\n  const agentOptions = {\n    hostname: myURL.hostname,\n    authority: myURL.hostname,\n    port: port,\n    path: myURL.pathname + myURL.search,\n    method: \"POST\",\n    headers: {},\n  }\n\n  return {\n    setHeader: function (key: string, value: string) {\n      agentOptions.headers[key] = value\n      return this\n    },\n    sendAsJson: async function (body?: any) {\n      log.debug(\n        `http-util.ts: ${agentOptions.method} ${agentOptions.hostname} \\\n${agentOptions.port} ${agentOptions.path}`\n      )\n\n      /** @dnpr/make-request only support these two. */\n      this.setHeader(\"accept-encoding\", \"gzip, deflate\")\n      this.setHeader(\"content-type\", \"application/json\")\n\n      let payload = \"\"\n\n      try {\n        if (body) payload = JSON.stringify(body)\n      } catch (error) {\n        throw error\n      }\n\n      let response: Await<ReturnType<typeof fetch>>\n      try {\n        response = await fetch(myURL.toString(), {\n          method: \"post\",\n          headers: agentOptions.headers,\n          body: payload as any,\n        })\n        /*if (response.status < 200 || response.status > 299){\n          throw response.statusText\n        }*/\n      } catch (error) {\n        throw error\n      }\n\n      try {\n        return await response.json()\n      } catch (error) {\n        throw error\n      }\n    }, // send\n  } // return\n} // post\n\nexport { post }\n","/**\n * @category Library Constant\n */\nconst Default = {\n  server: \"https://www.notion.so\",\n  userAgent:\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36\",\n}\n\nexport { Default }\n","import { API } from \"../interfaces\"\n\n/**\n * @category Error\n */\nexport class APIError extends Error {\n  name = \"APIError\"\n\n  constructor(error: API.ErrorResponse) {\n    super()\n    Object.setPrototypeOf(this, APIError.prototype)\n    this.message = `Server says \"${error.name}: ${error.message}`\n    if (error.status) {\n      this.message += ` Status: ${error.status}`\n    }\n    this.message += '\"'\n  }\n}\n","/** Import other sripts. */\nimport { post } from \"./httputil\"\nimport { log } from \"./log\"\nimport { Default } from \"./strings\"\nimport { APIError } from \"./error/APIError\"\n\n/** Import typings. */\nimport { API } from \"./interfaces\"\n\n/**\n * Options to config a Notion API agent instance.\n *\n * @category Library\n */\ninterface CreateAgentOptions {\n  /** Web address of the API server. Default: `\"https://www.notion.so\"`. */\n  server?: string\n  /**\n   * Notion API token. Default: `\"\"`.\n   * {@link https://github.com/dragonman225/notionapi-agent/blob/master/documentation/obtain-token/obtain-token.md | How to get it ?}\n   */\n  token?: string\n  /** Whether to trun on debug message. Default: `false`. */\n  debug?: boolean\n}\n\n/**\n * Notion API agent instance.\n *\n * @category Library\n */\nexport interface Agent {\n  /**\n   * POST /api/v3/getActivityLog\n   *\n   * Get user activities of a navigable block, e.g. a page.\n   * Equivalent to the \"Updates\" button in Notion's UI.\n   *\n   * @remark Must be authenticated even for public blocks.\n   */\n  getActivityLog: (\n    req: API.GetActivityLog.Request\n  ) => Promise<API.GetActivityLog.Response>\n\n  /**\n   * POST /api/v3/getAssetsJson\n   *\n   * Get a list of static asset paths, current version number, and more.\n   */\n  getAssetsJson: (\n    req: API.GetAssetsJson.Request\n  ) => Promise<API.GetAssetsJson.Response>\n\n  /**\n   * POST /api/v3/getRecordValues\n   *\n   * Get records by table name and id.\n   *\n   * If a {@link RecordRequest} is the i<sup>th</sup> element\n   * of {@link GetRecordValues.Request.requests}, its result is\n   * the i<sup>th</sup> element of {@link GetRecordValues.Response.results}.\n   */\n  getRecordValues: (\n    req: API.GetRecordValues.Request\n  ) => Promise<API.GetRecordValues.Response>\n\n  /**\n   * POST /api/v3/getSnapshotsList\n   *\n   * @remark Must be authenticated even for public blocks.\n   */\n  getSnapshotsList: (\n    req: API.GetSnapshotsList.Request\n  ) => Promise<API.GetSnapshotsList.Response>\n\n  /**\n   * POST /api/v3/getUserSharedPages\n   *\n   * Get ids of pages created with **+ New Page** button at the top level\n   * of the user's workspace *AND* those not created at the top level of\n   * the user's workspace but had been moved to the top level some time\n   * after created.\n   *\n   * To always get the top level pages of the user's workspace,\n   * use {@link Agent.loadUserContent}.\n   */\n  getUserSharedPages: (\n    req: API.GetUserSharedPages.Request\n  ) => Promise<API.GetUserSharedPages.Response>\n\n  /**\n   * POST /api/v3/loadPageChunk\n   *\n   * Load some data related to a page.\n   */\n  loadPageChunk: (\n    req: API.LoadPageChunk.Request\n  ) => Promise<API.LoadPageChunk.Response>\n\n  /**\n   * POST /api/v3/loadUserContent\n   *\n   * Get top level page blocks (`block` in\n   * {@link LoadUserContent.Response.recordMap}),\n   * user information, and workspace information.\n   */\n  loadUserContent: (\n    req: API.LoadUserContent.Request\n  ) => Promise<API.LoadUserContent.Response>\n\n  /**\n   * POST /api/v3/queryCollection\n   *\n   * Query a collection by id, view id,\n   * with aggregate, filter, sort functions.\n   *\n   * To configure aggregate, filter, sort parameters, see\n   * {@link QueryCollection.Request.query}.\n   *\n   * Set `limit` in {@link QueryCollection.Request.loader}\n   * to limit maximum number of items in response data.\n   */\n  queryCollection: (\n    req: API.QueryCollection.Request\n  ) => Promise<API.QueryCollection.Response>\n\n  /**\n   * POST /api/v3/submitTransaction\n   *\n   * Make changes to documents and settings.\n   */\n  submitTransaction: (\n    req: API.SubmitTransaction.Request\n  ) => Promise<API.SubmitTransaction.Response>\n\n  /**\n   * POST /api/v3/search\n   *\n   * use search functionnality\n   *\n   * can be use to search Collections\n   */\n  search: (req: API.Search.Request) => Promise<API.Search.Response>\n}\n\n/**\n * Create an asynchronous Notion API function.\n * @param url The API's full URL.\n * @param token The API token for authentication.\n *\n * @category Library Internal\n */\nfunction createAPI<Req, Res>(url: string, token: string) {\n  log.debug(`agent.ts: Create API function with\\\n URL \"${url}\"`)\n\n  return async function (req: Req): Promise<Res> {\n    log.debug(`agent.ts: Call API \"${url}\".`)\n\n    const result = await post(url)\n      .setHeader(\"accept\", \"*/*\")\n      .setHeader(\"accept-language\", \"en-US,en;q=0.9\")\n      .setHeader(\"cookie\", `token_v2=${token};`)\n      .setHeader(\"origin\", Default.server)\n      .setHeader(\"referer\", Default.server)\n      .setHeader(\"user-agent\", Default.userAgent)\n      .sendAsJson(req)\n\n    if (result.hasOwnProperty(\"errorId\")) {\n      const error = result as API.ErrorResponse\n      throw new APIError(error)\n    }\n\n    return result\n  }\n}\n\n/**\n * Create a Notion API agent.\n * @param opts A config object.\n *\n * @category Library\n */\nfunction createAgent(opts: CreateAgentOptions = {}): Agent {\n  const token = opts.token ? opts.token : \"\"\n  const server = opts.server ? opts.server : Default.server\n\n  if (opts.debug) {\n    log.setLogLevel(\"debug\")\n  }\n\n  log.debug(`agent.ts: Create API agent with\\\n server \"${server}\" and token \"${token.substr(0, 9)}...\"`)\n\n  const getActivityLog = createAPI<\n    API.GetActivityLog.Request,\n    API.GetActivityLog.Response\n  >(`${server}/api/v3/getActivityLog`, token)\n\n  const getAssetsJson = createAPI<\n    API.GetAssetsJson.Request,\n    API.GetAssetsJson.Response\n  >(`${server}/api/v3/getAssetsJson`, token)\n\n  const getRecordValues = createAPI<\n    API.GetRecordValues.Request,\n    API.GetRecordValues.Response\n  >(`${server}/api/v3/getRecordValues`, token)\n\n  const getSnapshotsList = createAPI<\n    API.GetSnapshotsList.Request,\n    API.GetSnapshotsList.Response\n  >(`${server}/api/v3/getSnapshotsList`, token)\n\n  const getUserSharedPages = createAPI<\n    API.GetUserSharedPages.Request,\n    API.GetUserSharedPages.Response\n  >(`${server}/api/v3/getUserSharedPages`, token)\n\n  const loadPageChunk = createAPI<\n    API.LoadPageChunk.Request,\n    API.LoadPageChunk.Response\n  >(`${server}/api/v3/loadPageChunk`, token)\n\n  const loadUserContent = createAPI<\n    API.LoadUserContent.Request,\n    API.LoadUserContent.Response\n  >(`${server}/api/v3/loadUserContent`, token)\n\n  const queryCollection = createAPI<\n    API.QueryCollection.Request,\n    API.QueryCollection.Response\n  >(`${server}/api/v3/queryCollection`, token)\n\n  const submitTransaction = createAPI<\n    API.SubmitTransaction.Request,\n    API.SubmitTransaction.Response\n  >(`${server}/api/v3/submitTransaction`, token)\n\n  const search = createAPI<API.Search.Request, API.Search.Response>(\n    `${server}/api/v3/search`,\n    token\n  )\n\n  return {\n    getActivityLog,\n    getAssetsJson,\n    getRecordValues,\n    getSnapshotsList,\n    getUserSharedPages,\n    loadPageChunk,\n    loadUserContent,\n    queryCollection,\n    submitTransaction,\n    search,\n  }\n}\n\nexport { createAgent }\n","//import yaml from 'js-yaml';\n//todo: export all the util functions to a gist place where I can update it and use it when needed\nexport const print = console.log\nexport const sleep = async (ms) =>\n  new Promise((resolve) => setTimeout(resolve, ms))\n//export const ydump = (data) => yaml.safeDump(data)\nexport const jdump = (data) => JSON.stringify(data, null, 2)\n","import { Util } from \"../notionapi/interfaces\"\nimport { createAgent } from \"../notionapi\"\nimport { Agent } from \"../notionapi/agent\"\n//import { Record } from \"../notionapi/interfaces/notion-api/v3/Record\"\nimport { Collection as CollectionType } from \"../notionapi/interfaces/notion-models/collection\"\nimport { print, sleep } from \"./util\"\nimport { camelCase } from \"./stringUtils\"\nimport { getTransacOperationsFromTemplate } from \"../appUtils\"\nconst uuid = require(\"uuid/v4\")\n\ntype FailKind = \"success\"\ntype UID = string\ntype ID = string\ntype RandId4 = string\n\ntype NotionAddWebClipperURLsParams = {\n  blockId: string\n  from: \"chrome\"\n  type: \"block\"\n  property?: string\n  items: { title: string; url: string }[]\n}\n\ntype NotionAddWebClipperURLsResp = {\n  parentBlock: {\n    record: {\n      table: \"block\"\n      type: \"page\"\n      id: string\n      role: \"editor\"\n      name: string\n      iconEmoji?: string\n    }\n    ancestors: []\n  }\n  createdBlockIds: ID[]\n}\n\nexport class NotionV3Client {\n  token: string\n  defaultHeaders = {\n    accept: \"*/*\",\n    \"accept-language\": \"en-US,en;q=0.9\",\n    \"accept-encoding\": \"gzip, deflate, br\",\n    origin: \"https://www.notion.so\",\n    referer: \"https://www.notion.so\",\n  }\n  async _axios(\n    route: string,\n    method: \"post\" | \"get\" | \"delete\" | \"put\" = \"get\",\n    data = {},\n    headers = {}\n  ) {\n    //check can still fetch (rate limit)\n    let res\n    res = await fetch(\n      `https://www.notion.so/api/v3/${\n        (route.startsWith(\"/\") && route.slice(1)) || route\n      }`,\n      {\n        method: method.toUpperCase(),\n        headers: {\n          \"content-type\": \"application/json\",\n          ...this.defaultHeaders,\n          ...(this.token && { cookie: `token_v2=${this.token}` }),\n          ...headers,\n        },\n        body: JSON.stringify(data),\n      }\n    )\n    return res.json()\n  }\n\n  post(route, data = {}, headers = {}) {\n    return this._axios(route, \"post\", data, headers)\n  }\n\n  put(route, data = {}, headers = {}) {\n    return this._axios(route, \"put\", data, headers)\n  }\n\n  delete(route) {\n    return this._axios(route, \"delete\")\n  }\n\n  get(route) {\n    return this._axios(route, \"get\", null)\n  }\n\n  constructor(token) {\n    this.token = token\n  }\n\n  addWebClipperURLs(\n    d: NotionAddWebClipperURLsParams\n  ): Promise<NotionAddWebClipperURLsResp> {\n    return this.post(\"/addWebClipperURLs\", d)\n  }\n\n  custom = {\n    createWebClippedPage: async (\n      parentId: ID,\n      { title, url }: { title: string; url: string }\n    ) => {\n      const x = await this.addWebClipperURLs({\n        blockId: parentId,\n        items: [{ title, url }],\n        from: \"chrome\",\n        type: \"block\",\n      })\n      return x.createdBlockIds[0]\n    },\n  }\n}\n\ntype Property = CollectionType.ColumnProperty & {\n  id: UID\n  strippedName: string\n}\n\nconst idToUuid = (path: string) =>\n  `${path.substr(0, 8)}-${path.substr(8, 4)}-${path.substr(\n    12,\n    4\n  )}-${path.substr(16, 4)}-${path.substr(20)}`\n\nconst parsePageId = (id: string) => {\n  if (id) {\n    const rawId = id.replace(/\\-/g, \"\").slice(-32)\n    return idToUuid(rawId)\n  }\n}\n\nconst castRowProperty = (d: any[], property: Property) => {\n  //for now cast simple data\n  switch (property.type) {\n    case \"checkbox\":\n      return d[0][0] == \"Yes\"\n    case \"select\":\n    case \"text\":\n    case \"title\":\n    case \"url\":\n      return d[0][0]\n    case \"number\":\n      return Number(d[0][0])\n    default:\n      print(`WARNING ${property.type} not casted`)\n      return d\n  }\n}\n\n//todo: find better name for those two functions\nconst uncastRowProperty = (v: any, property: Property) => {\n  switch (property.type) {\n    case \"checkbox\":\n      if (typeof v != \"boolean\")\n        throw `value passed to property ${property.strippedName} must be bool`\n      return [[v ? \"Yes\" : \"No\"]]\n    case \"select\":\n    //todo detect if v does not belong to one of the select possibilities\n    case \"text\":\n    case \"title\":\n      if (typeof v != \"string\") {\n        throw `value passed to property ${property.strippedName} must be string, but got ${v}`\n      }\n      return [[v]]\n    case \"number\":\n      return [[String(parseFloat(v))]]\n    /*if (typeof v != \"number\")\n        throw `value passed to property ${property.strippedName} must be number`\n      return [[String(v)]]*/\n    case \"multi_select\":\n      return [[v.join(\",\")]]\n    case \"relation\":\n      return v\n    default:\n      print(`WARNING: ${property.type} not uncasted`)\n      return [[v]]\n  }\n}\n\nexport type RowData = {\n  __template?: { blocksMap: any; id: string }\n} & Record<string, any>\ntype Row = { id: UID; pageCover?: string } & RowData\n\nfunction getFrontPageImageOperations(\n  pageId: string,\n  {\n    imgUrl,\n    width,\n    height,\n    opts,\n  }: {\n    imgUrl: string\n    width: number\n    height: number\n    opts: {\n      type: \"original\" | \"coverLike\" | \"fullWidthCover\"\n      size: \"normal\" | \"small\" | \"large\"\n      addDivider?: boolean\n    }\n  }\n) {\n  print(\"here\", \"ok\", \"ok\")\n  //reset content\n  const newBlockId = uuid()\n  const newDividerBlockId = uuid()\n\n  const maxSizes = {\n    large: {\n      width: 672,\n      height: 380,\n    },\n    normal: {\n      width: 672,\n      height: 250,\n    },\n    small: {\n      width: 336,\n      height: 175,\n    },\n  }\n  const maxWidth = maxSizes[opts.size].width\n  const maxHeight = maxSizes[opts.size].height\n\n  let w = null\n  let h = null\n  let fullWidth = false\n  let blockPageWidth = false\n  switch (opts.type) {\n    case \"coverLike\":\n      if (opts.size == \"large\") blockPageWidth = true\n      w = width\n      h = height\n      //scale image to maxHeight\n      if (w != maxWidth) {\n        h = Math.floor(h * (maxWidth / w))\n        w = maxWidth\n      }\n      if (h > maxHeight) {\n        w = Math.floor(w * (maxHeight / h))\n        h = maxHeight\n      }\n      if (w < maxWidth) {\n        blockPageWidth = false\n      }\n      print(\"heve\", h, w)\n      h = null\n      break\n    case \"fullWidthCover\":\n      fullWidth = true\n      h = maxHeight\n    case \"original\":\n    default:\n      break\n  }\n  /*const sizes = {\n      'big':500,\n      'small':180,\n      original:null,\n  }*/\n  return [\n    {\n      id: newBlockId,\n      table: \"block\",\n      path: [],\n      command: \"set\",\n      args: {\n        type: \"text\",\n        id: newBlockId,\n        version: 1,\n      },\n    },\n    {\n      id: newBlockId,\n      table: \"block\",\n      path: [],\n      command: \"update\",\n      args: {\n        parent_id: pageId,\n        parent_table: \"block\",\n        alive: true,\n      },\n    },\n    {\n      table: \"block\",\n      id: pageId,\n      path: [\"content\"],\n      command: \"listBefore\",\n      args: { id: newBlockId },\n    },\n    //set image\n    {\n      id: newBlockId,\n      table: \"block\",\n      path: [],\n      command: \"update\",\n      args: { type: \"image\" },\n    },\n\n    {\n      id: newBlockId,\n      table: \"block\",\n      path: [\"properties\"],\n      command: \"update\",\n      args: {\n        source: [[imgUrl]],\n      },\n    },\n    {\n      id: newBlockId,\n      table: \"block\",\n      path: [\"format\"],\n      command: \"update\",\n      args: {\n        display_source: imgUrl,\n      },\n    },\n    {\n      id: newBlockId,\n      table: \"block\",\n      path: [\"format\"],\n      command: \"update\",\n      args: {\n        block_height: h,\n        block_width: w,\n        block_full_width: fullWidth,\n        block_page_width: blockPageWidth,\n      },\n    },\n    ...(((opts.addDivider == true || opts.addDivider === undefined) && [\n      {\n        id: newDividerBlockId,\n        table: \"block\",\n        path: [],\n        command: \"set\",\n        args: {\n          type: \"divider\",\n          id: newDividerBlockId,\n          properties: {},\n        },\n      },\n      {\n        id: newDividerBlockId,\n        table: \"block\",\n        path: [],\n        command: \"update\",\n        args: {\n          parent_id: pageId,\n          parent_table: \"block\",\n          alive: true,\n        },\n      },\n      {\n        table: \"block\",\n        id: pageId,\n        path: [\"content\"],\n        command: \"listAfter\",\n        args: {\n          after: newBlockId,\n          id: newDividerBlockId,\n        },\n      },\n    ]) ||\n      []),\n  ]\n}\n\nfunction getTransacOperationsFromWebClipping(\n  pageId: string,\n  userId: string,\n  d: {\n    title: string\n    url: string\n  }\n) {\n  const newBlockId = uuid()\n\n  let args = {\n    id: newBlockId,\n    version: 1,\n    alive: true,\n    created_by: userId,\n    created_time: Date.now(),\n    parent_id: pageId,\n    parent_table: \"block\",\n    type: \"page\",\n  }\n\n  return [\n    buildOperation({ id: newBlockId, command: \"set\", args, table: \"block\" }),\n    {\n      table: \"block\",\n      id: pageId,\n      path: [\"content\"],\n      command: \"listAfter\",\n      args: {\n        id: newBlockId,\n      },\n    },\n  ]\n}\n\nfunction buildOperation(param: {\n  id: UID\n  command?: \"set\" | \"update\" | \"listAfter\" | \"listRemove\"\n  table?: Util.Table\n  args?: any\n  path?: string[]\n}) {\n  param = {\n    ...{ table: \"block\", path: [], args: {}, command: \"set\" },\n    ...param,\n  }\n  //if (type(path) == \"string\") path = path.split(\".\");\n  return {\n    id: param.id,\n    path: param.path,\n    args: param.args,\n    command: param.command,\n    table: param.table,\n  }\n}\n\nconst domainsIncludeFrontImageMap = {\n  \"youtube.com\": true,\n}\n\nexport class Collection {\n  id: UID\n  parentId: UID\n\n  viewId: UID\n  fetched: boolean\n  schema: { [stripppedName: string]: Property }\n  rows: { [id: string]: Row }\n  client: DummyNotionClient\n\n  constructor(id, viewId, parentId, notionClient) {\n    this.id = id\n    this.parentId = parentId\n    this.fetched = false\n    this.schema = {}\n    this.viewId = viewId\n    this.rows = {}\n    this.client = notionClient\n  }\n\n  initLocally(schema) {\n    this._extractSchema(schema)\n    this.fetched = true\n  }\n\n  _extractSchema(schema) {\n    this.schema = {}\n    for (let uid of Object.keys(schema)) {\n      let property = schema[uid]\n      this.schema[uid] = {\n        ...property,\n        ...{ id: uid, strippedName: \"\" },\n      }\n    }\n    //print('loaded schema\\n', ydump(this.schema));\n    print(\"keys are \", Object.keys(this.schema))\n  }\n\n  async createRow(\n    data: RowData,\n    saveWebClip?: { title: string; url: string }\n  ): Promise<{ id: string }> {\n    //await this.ready();\n    let lowOp = []\n    let recordId = null\n    if (saveWebClip) {\n      const clientV2 = new NotionV3Client(this.client.authToken)\n      console.log(\"got\", data)\n      recordId = await clientV2.custom.createWebClippedPage(this.parentId, {\n        title: data.title,\n        url: saveWebClip.url,\n      })\n      console.log(\"got\", recordId)\n    } else {\n      let { id, operations } = this.client.createRecordOperations(\n        \"block\",\n        { id: this.id, _table: \"collection\" },\n        { type: \"page\" }\n      )\n      recordId = id\n      lowOp = operations\n    }\n\n    this.rows[recordId] = { id: recordId }\n    let skipFrontImage = false\n    if (saveWebClip != null) {\n      skipFrontImage = true\n      try {\n        let u = new URL(saveWebClip.url)\n        console.log(\"got\", u.hostname)\n        const n =\n          (u.hostname.startsWith(\"www.\") && u.hostname.substring(4)) ||\n          u.hostname\n        console.log(\">>>>\", n)\n        if (n in domainsIncludeFrontImageMap) skipFrontImage = false\n      } catch (e) {\n        //ignore\n      }\n    }\n    return this.updateRow({\n      where: { id: recordId },\n      data,\n      operations: lowOp,\n      skipFrontImage,\n    })\n  }\n\n  async findRow({ where }: { where: Partial<Row> }): Promise<Row | null> {\n    //await this.ready();\n    if (where.id && where.id in this.rows) {\n      return this.rows[where.id]\n    }\n    //iterate on each rows to find the name\n    let countTotal = Object.keys(where).length\n    for (let id in this.rows) {\n      let row = this.rows[id]\n      let countSame = 0\n      for (let field in where) {\n        if (row[field] == where[field]) {\n          countSame++\n        } else {\n          break\n        }\n      }\n      if (countSame == countTotal) return row\n    }\n    return null\n  }\n\n  async updateRow({\n    where,\n    data,\n    operations,\n    skipFrontImage,\n  }: {\n    where: Partial<Row>\n    data: RowData\n    operations: any[]\n    skipFrontImage: boolean\n  }): Promise<{ id: string }> {\n    let transacs: { path: string[]; value }[] = []\n    let lowOperations = operations\n    //todo: decide if smart to do quick check row exists here\n    let x = await this.findRow({ where })\n    if (!x) throw `can't update because row not found`\n    let recordId = x.id\n    if (data.__template) {\n      lowOperations.push(\n        ...(await getTransacOperationsFromTemplate(\n          data.__template.blocksMap,\n          data.__template.id,\n          x.id\n        ))\n      )\n      print(lowOperations, \"\\x1b[43m -- lowOperations \\x1b[0m\")\n    }\n    if (data.pageFrontImage && skipFrontImage == false) {\n      lowOperations.push(\n        ...getFrontPageImageOperations(x.id, data.pageFrontImage)\n      )\n    }\n\n    for (let uid in data) {\n      if (uid == \"__template\" || uid == \"pageFrontImage\") continue\n\n      if (uid == \"pageCover\") {\n        transacs.push({\n          path: [\"format\", \"page_cover\"],\n          value: data[uid].imgUrl,\n        })\n        continue\n      }\n      if (uid == \"pageIcon\") {\n        transacs.push({\n          path: [\"format\", \"page_icon\"],\n          value: data[uid].imgUrl,\n        })\n        continue\n      }\n      /*if (!(k in this.schema))\n        throw `collection unknown property name '${k}', known properties are: ${Object.keys(\n          this.schema\n        ).join(\", \")}`*/\n      let property = this.schema[uid]\n      let path = [\"properties\", property.id]\n      let value = uncastRowProperty(data[uid], property)\n      transacs.push({ path, value })\n    }\n    //transacs.push({ path: [\"last_edited_time\"], value: Date.now() })\n    await this.client.updateDataRecord(recordId, transacs, lowOperations)\n    let row = this.rows[recordId]\n    for (let k in data) {\n      row[k] = data[k]\n    }\n    //let path = [\"properties\", prop[\"id\"]], val\n    return { id: row.id }\n  }\n\n  /*\n  getCoverTransaction(pageCover){\n    return {\n      id:uuid(),\n      operations:[\n        {\n          id:where.id,\n          command:'set',\n\n          table:'block',\n          path:['format','page_cover'],\n          args:pageCover,\n      }\n      ],\n  }\n   }*/\n  /*async updateRowCover({where,data}:{where:Partial<Row>, data:{coverUrl:string}}):Promise<void>{\n    const x = await this.client.agent.submitTransaction({\n      requestId:uuid(),\n      transactions:[\n        \n    ],\n    });\n\n  }*/\n\n  /*async upsertRow({\n    where,\n    ...r\n  }:\n    | { where: Partial<Row>; create: Obj; update: Obj }\n    | { where: Partial<Row>; data: Obj }) {\n    //await this.ready();\n    let x = await this.findRow({ where })\n    return !x\n      ? this.createRow(\"data\" in r ? r.data : r.create)\n      : this.updateRow({ where, data: \"data\" in r ? r.data : r.update })\n  }*/\n}\n\n//todo: stop having a global agent, and migrate agent inside NotionClient\nexport let client: DummyNotionClient | null = null\n\nexport type Space = { id: UID; name: string }\nexport type User = {\n  id: string\n  spaces: Space[]\n  givenName: string\n}\nexport type CollectionPage = {\n  id: string\n  name: string\n  icon?: string\n}\nfunction getDepVal(properties, key, defaultValue) {\n  return (\n    (properties != null &&\n      properties[key] != null &&\n      properties[key].length &&\n      properties[key][0].length &&\n      properties[key][0][0]) ||\n    defaultValue\n  )\n}\nfunction getParents(blocksMap, id) {\n  let parents = []\n  let block = blocksMap[id]\n  while (block != null) {\n    if (!block.value) break\n    if (block.value.type == \"page\") {\n      parents.push({\n        name: getDepVal(block.value.properties, \"title\", \"Untitled\"),\n        icon: block.value.format?.page_icon || null,\n      })\n    }\n    block = blocksMap[block.value?.parent_id || null]\n  }\n  parents.reverse()\n  return parents\n}\n\nconst emptyUser = { id: null, spaces: [], givenName: null }\nexport class DummyNotionClient {\n  user: User\n  agent: Agent\n  authToken: string\n\n  /** Todo : need to improve the simple App */\n  constructor(notionAuthToken: string) {\n    this.agent = createAgent({ token: notionAuthToken, debug: false })\n    this.authToken = notionAuthToken\n    this.user = emptyUser\n  }\n\n  async addValueToPropertyCollection(\n    col: CollectionType,\n    propertyId,\n    value: string,\n    valueId: string,\n    color: any\n  ): Promise<{ id: string; value: string; color: \"default\" }> {\n    let newSchema = { ...col.schema }\n    let newVal = {\n      id: valueId,\n      value: value,\n      color: color,\n      //\"default\" as \"default\",\n    }\n    newSchema[propertyId] = {\n      ...newSchema[propertyId],\n      options: [...(newSchema[propertyId].options || []), newVal],\n    }\n    await this._submitTransaction([\n      {\n        id: col.id,\n        table: \"collection\",\n        path: [],\n        command: \"update\",\n        args: {\n          schema: newSchema,\n        },\n      },\n    ])\n    return newVal\n  }\n\n  setUserInfos(user: User) {\n    this.user = user\n  }\n\n  async fetchUserInfos() {\n    const res = await this.agent.loadUserContent({})\n\n    //Todo: ensure security here before publishing app? -- create another account and see if data different\n    let userKeys = Object.keys(res.recordMap.notion_user)\n    this.user.id = userKeys[0]\n    let userData = res.recordMap.notion_user[this.user.id]\n    this.user.givenName = userData.value.given_name\n\n    for (let spaceId in res.recordMap.space) {\n      let space = res.recordMap.space[spaceId]\n      this.user.spaces.push({ id: spaceId, name: space.value.name })\n    }\n  }\n\n  createRecordOperations(\n    table: Util.Table,\n    parent: { id: UID; _table: Util.Table },\n    extra = {}\n  ): { id: string; operations: any[] } {\n    let recordId: string = uuid()\n\n    let args = {\n      id: recordId,\n      version: 1,\n      alive: true,\n      created_by: this.user.id,\n      created_time: Date.now(),\n      last_edited_time: Date.now(),\n      parent_id: parent.id,\n      parent_table: parent._table,\n      ...extra,\n    }\n\n    return {\n      id: recordId,\n      operations: [\n        this._buildOperation({ id: recordId, command: \"set\", args, table }),\n      ],\n    }\n  }\n\n  async createRecord(\n    table: Util.Table,\n    parent: { id: UID; _table: Util.Table },\n    extra = {}\n  ): Promise<string> {\n    let recordId: string = extra[\"id\"] || uuid()\n\n    let args = {\n      id: recordId,\n      version: 1,\n      alive: true,\n      created_by: this.user.id,\n      created_time: Date.now(),\n      last_edited_time: Date.now(),\n      parent_id: parent.id,\n      parent_table: parent._table,\n      ...extra,\n    }\n\n    await this._submitTransaction([\n      this._buildOperation({ id: recordId, command: \"set\", args, table }),\n    ])\n    return recordId\n  }\n\n  async updateDataRecord(\n    recordId,\n    dataPaths: { path: string[]; value: any }[],\n    lowLevelOperations?: any[]\n  ) {\n    await this._submitTransaction([\n      ...(lowLevelOperations || []),\n      ...dataPaths.map((data) =>\n        this._buildOperation({\n          id: recordId,\n          command: \"set\",\n          table: \"block\",\n          path: data.path,\n          args: data.value,\n        })\n      ),\n    ])\n    return recordId\n  }\n\n  async getCollectionLocally(collectionId: UID, parentId: UID, schema) {\n    let col = new Collection(collectionId, \"\", parentId, this)\n    col.initLocally(schema)\n    return col\n  }\n\n  _buildOperation(param: {\n    id: UID\n    command?: \"set\" | \"update\" | \"listAfter\" | \"listRemove\"\n    table?: Util.Table\n    args?: any\n    path?: string[]\n  }) {\n    param = {\n      ...{ table: \"block\", path: [], args: {}, command: \"set\" },\n      ...param,\n    }\n    //if (type(path) == \"string\") path = path.split(\".\");\n    return {\n      id: param.id,\n      path: param.path,\n      args: param.args,\n      command: param.command,\n      table: param.table,\n    }\n  }\n\n  async searchCollectionPages(\n    query: string,\n    collectionId: string,\n    spaceId: string\n  ) {\n    let ret: any = await this.agent.search({\n      type: \"BlocksInParent\" as any,\n      query: query,\n      spaceId: spaceId,\n      parentId: collectionId,\n      limit: 20,\n      filters: {\n        isDeletedOnly: false,\n        excludeTemplates: true,\n        isNavigableOnly: true,\n        requireEditPermissions: false,\n        ancestors: [],\n        createdBy: [],\n        editedBy: [],\n        lastEditedTime: {},\n        createdTime: {},\n      },\n      sort: \"Relevance\",\n      source: \"relation_menu\",\n    } as any)\n    let pages: CollectionPage[] = []\n    for (let obj of ret.results) {\n      let k = obj.id\n      if (!(k in ret.recordMap.block)) continue\n      let page = ret.recordMap.block[k].value\n      //todo: return also permission\n\n      pages.push({\n        id: page.id,\n        name: getDepVal(page.properties, \"title\", \"Untitled\"),\n        icon: page.format?.page_icon || null,\n      })\n    }\n    return pages\n  }\n  async searchCollections(\n    query: string = \"\",\n    spaceId = this.user.spaces[0].id\n  ) {\n    let ret = await this.agent.search({\n      query,\n      type: \"CollectionsInSpace\",\n      spaceId,\n      limit: 20,\n      sort: \"Relevance\",\n      source: \"link_to_collection_block\",\n      filters: {\n        /*ancestors: []\n        createdBy: []\n        createdTime: {}\n        editedBy: []\n        excludeTemplates: true\n        isDeletedOnly: false\n        isNavigableOnly: false\n        lastEditedTime: {}\n        requireEditPermissions: true*/\n\n        isDeletedOnly: false,\n        excludeTemplates: true,\n        isNavigableOnly: false,\n        requireEditPermissions: true,\n        ancestors: [],\n        createdBy: [],\n        editedBy: [],\n        lastEditedTime: {},\n        createdTime: {},\n      } as any,\n    })\n    let collections: CollectionType[] = []\n    for (let k in ret.recordMap.collection) {\n      let col = ret.recordMap.collection[k].value\n      //todo: return also permission\n      ;(col as any).parents = getParents(\n        (ret.recordMap as any).block,\n        col.parent_id\n      )\n      collections.push(col)\n    }\n    return collections\n  }\n\n  async _submitTransaction(operations: any[]) {\n    return this.agent.submitTransaction({\n      requestId: uuid(),\n      transactions: [\n        {\n          id: uuid(),\n          operations,\n        },\n      ],\n    })\n  }\n\n  async appendBulletPointToPage(pageId: string, text: string) {\n    const newBlockId = uuid()\n    pageId = parsePageId(pageId)\n    print(\"got\", pageId)\n    const operations = [\n      {\n        id: newBlockId,\n        table: \"block\",\n        path: [],\n        command: \"update\",\n        args: {\n          type: \"bulleted_list\",\n          id: newBlockId,\n          parent_id: pageId,\n          parent_table: \"block\",\n          alive: true,\n          version: 1,\n          created_time: Date.now(),\n          last_edited_time: Date.now(),\n          properties: { title: [[text]] },\n        },\n      },\n      {\n        table: \"block\",\n        id: pageId,\n        path: [\"content\"],\n        command: \"listAfter\",\n        args: {\n          id: newBlockId,\n        },\n      },\n    ]\n    return this._submitTransaction(operations)\n  }\n}\n","import { CollectionPage, DummyNotionClient } from \"./notionlib/notion\"\nimport { Collection } from \"./notionapi/interfaces\"\nimport {\n  Dap,\n  ModifiedDapProperty,\n  FORM_LIST_KEY,\n  FORM_KEY_PREFIX,\n  FormData,\n  TemplateInfo,\n  FormListItem,\n} from \"./appConfig\"\nimport { APP_NAME, COOKIE_KEY, NOTION_CLIENT_DATA_KEY } from \"./appConfig\"\nimport storage from \"./lib/storage\"\nimport { call, promisify, print, makeid } from \"./utils\"\nimport { fetchFullContentPage } from \"./notionapiV2/fetchFullContentPage\"\nimport { BlockType } from \"./notionapiV2/types\"\n\nconst uuid = require(\"uuid/v4\")\n\nexport async function getFormData(id: string): Promise<FormData | null> {\n  return await storage.get(FORM_KEY_PREFIX + id, null)\n}\n\ntype PopupStateParam = {\n  pos: \"fillForm\" | \"settings\" //|\"fillFormSettings\";\n  url: string\n  fieldDatas?: {\n    key: string\n    options: any\n  }[]\n  formId: string\n}\n\ntype PopupState =\n  | null\n  | (PopupStateParam & { createdAt: number; lastUpdatedAt: number })\n\nexport async function saveCurrentPopupState(state: PopupStateParam) {\n  return storage.set(\"popup-state\", {\n    ...state,\n    createdAt: Date.now(),\n    lastUpdatedAt: Date.now(),\n  })\n}\n\nexport async function getCurrentPopupState(currentUrl: string) {\n  const state: PopupState = await storage.get(\"popup-state\", null)\n  if (!state) return state\n  resetCurrentPopupState()\n  //logic\n  const now = Date.now()\n  switch (state.pos) {\n    /*case \"fillFormSettings\":\n      //above 1 minute\n      if (now - state.last > 1000 * 60) {\n        return null\n      }*/\n    case \"fillForm\":\n      if (state.url != currentUrl) return null\n      //above 1 minute\n      if (now - state.lastUpdatedAt > 1000 * 60) {\n        return null\n      }\n      return state\n    case \"settings\":\n      //above 1 minute\n      if (now - state.lastUpdatedAt > 1000 * 60) {\n        return null\n      }\n      return state\n  }\n}\n\nexport async function resetCurrentPopupState() {\n  return saveCurrentPopupState(null)\n}\n\nexport async function deleteFormData(id: string) {\n  let forms: FormListItem[] = await storage.get(FORM_LIST_KEY, [])\n  storage.set(\n    FORM_LIST_KEY,\n    forms.filter((form) => form.id != id)\n  )\n  storage.set(FORM_KEY_PREFIX + id, null)\n}\n\nexport async function saveFormData(\n  data: Partial<FormData>,\n  status: \"new\" | \"edit\",\n  id: string\n): Promise<FormListItem> {\n  let forms: FormListItem[] = await storage.get(FORM_LIST_KEY, [])\n  let formInfo: FormListItem\n  if (status == \"new\") {\n    let id = makeid(4)\n    while (forms.some((e) => e.id == id)) id = makeid(4)\n    data.id = id\n    forms.push({ name: data.name, id })\n    await storage.set(FORM_LIST_KEY, forms)\n    await storage.set(FORM_KEY_PREFIX + id, sanitizeFormData(data as FormData))\n    formInfo = { id: id, name: data.name }\n  } else {\n    forms = forms.map((e) =>\n      e.id != id\n        ? e\n        : { name: data.name, id, favorite: e.favorite === true ? true : false }\n    )\n    formInfo = { id: id, name: data.name }\n    await storage.set(FORM_LIST_KEY, forms)\n    await storage.set(FORM_KEY_PREFIX + id, sanitizeFormData(data as FormData))\n  }\n  print(\"storage size: \", JSON.stringify(data).length)\n  return formInfo\n}\n\nfunction sanitizeFormData(data: FormData): FormData {\n  console.log(\"colection !!!\", data.collection)\n  return {\n    ...data,\n    collection: { ...data.collection },\n\n    name: (data.name.length && data.name) || \"Untitled\",\n    daps: data.daps.filter((field) => {\n      return field.property != null\n    }),\n  }\n}\n\nfunction copyBlockOperation(\n  block: BlockType,\n  parentId: string | undefined,\n  blocksMap: Record<string, BlockType>,\n  currentId?: string\n) {\n  const newBlockId = currentId || uuid()\n  let op = {\n    id: newBlockId,\n    table: \"block\",\n    path: [],\n    command: \"update\",\n    args: {} as any,\n  }\n  let ops = [op]\n  if (block.role == \"none\") {\n    return {\n      id: newBlockId,\n      ops: [{ ...op, args: { type: \"text\", parent_id: parentId } }],\n    }\n  }\n  let blockVal = block.value\n  op.args = {\n    ...blockVal,\n    id: newBlockId,\n    parent_id: parentId,\n    copied_from: blockVal.id,\n  }\n  //remove key from args\n  ;[\"is_template\", \"created_time\", \"last_edited_time\"].forEach((key) => {\n    delete op.args[key]\n  })\n\n  if (blockVal.content) {\n    const childResults = blockVal.content.map((id) =>\n      copyBlockOperation(blocksMap[id], newBlockId, blocksMap)\n    )\n    let newContent = childResults.map((op) => op.id)\n    op.args.content = newContent\n    ops.push(...childResults.flatMap((res) => res.ops))\n  }\n  return {\n    id: newBlockId,\n    ops,\n  }\n}\n\nexport async function getTransacOperationsFromTemplate(\n  blocksMap: Record<string, BlockType>,\n  templateId: string,\n  currentId: string\n) {\n  let res = copyBlockOperation(\n    blocksMap[templateId],\n    undefined,\n    blocksMap,\n    currentId\n  )\n  return res.ops\n}\n\nexport async function getTransacOperationsFromWebClipping() {\n  return []\n}\nexport async function getUpToDateTemplateBlocksMap(\n  client: DummyNotionClient,\n  templateId: string,\n  refreshTemplate: boolean\n) {\n  let content\n  if (refreshTemplate) {\n    print(\"refreshing the template...\")\n    content = await fetchFullContentPage(templateId, client.authToken)\n    await storage.set(`TEMPLATE-${templateId}`, content)\n  } else {\n    content = await storage.get(`TEMPLATE-${templateId}`, null)\n    if (content == null) {\n      content = await getUpToDateTemplateBlocksMap(client, templateId, true)\n    } else {\n      print(\"got template from cache!\")\n    }\n  }\n  print(content, \"\\x1b[43m -- content template \\x1b[0m\")\n  return content\n}\n\nexport function throttle(fn, waitMs: number) {\n  let last: Date\n  let prevFn: any\n  let prevTimer: any\n  return (...args) => {\n    const now = new Date()\n    if (prevFn) {\n      prevFn(undefined)\n      clearTimeout(prevTimer)\n      prevFn = null\n    }\n    return new Promise((resolve) => {\n      const x = last\n        ? Math.max(0, waitMs - (now.getTime() - last.getTime()))\n        : 0\n      prevFn = resolve\n      prevTimer = setTimeout(function () {\n        last = now\n        prevFn = null\n        resolve(fn.apply(null, args))\n      }, x)\n    })\n  }\n}\n\nexport type RefreshCollectionResult = {\n  needToResetCollection: boolean\n  fieldsToModify: { key: string; action: \"remove\" | \"removeDefaultValue\" }[]\n  collection?: Collection\n  needToRefreshTemplate?: boolean\n  needToRemoveTemplate?: boolean\n}\nconst extraProperty = [\"pageCover\", \"pageFrontImage\", \"pageIcon\"]\nexport function applyRefreshCollection(\n  result: RefreshCollectionResult,\n  oldDaps: Dap[]\n): { collection: Collection; daps: Dap[] } {\n  if (result.needToResetCollection) {\n    return { daps: oldDaps, collection: undefined }\n  }\n  let daps: Dap[] = []\n  for (let d of oldDaps) {\n    let mField = result.fieldsToModify.find((f) => f.key == d.key)\n    //print(\"old dap\", d)\n    let nproperty: ModifiedDapProperty\n    if (d.property) {\n      if (extraProperty.some((e) => e == d.property.id)) {\n        print(\"reaplie\", d.property)\n        nproperty = d.property\n      } else {\n        nproperty = {\n          ...result.collection.schema[d.property.id],\n          id: d.property.id,\n        }\n      }\n    }\n    if (!mField) {\n      daps.push({ ...d, property: nproperty })\n      continue\n    }\n    switch (mField.action) {\n      case \"remove\":\n        continue\n      case \"removeDefaultValue\":\n        daps.push({ ...d, property: nproperty, options: {} })\n        break\n    }\n  }\n  return { collection: result.collection, daps }\n}\nexport function applyRefreshCollectionOnData(\n  result: RefreshCollectionResult,\n  oldData: FormData\n): FormData {\n  const { collection, daps } = applyRefreshCollection(result, oldData.daps)\n  return {\n    ...oldData,\n    collection,\n    daps,\n    template: (!result.needToRemoveTemplate && oldData.template) || undefined,\n    needToRefreshTemplate: result.needToRefreshTemplate,\n  }\n}\nasync function getTemplateInfo(\n  client: DummyNotionClient,\n  pageId: string\n): Promise<TemplateInfo> {\n  const resp = await client.agent.loadPageChunk({\n    pageId: pageId,\n    limit: 1,\n    cursor: {\n      stack: [[{ id: pageId, table: \"block\", index: 0 }]],\n    },\n    chunkNumber: 0,\n    verticalColumns: false,\n  })\n  const page = resp.recordMap.block[pageId]\n  if (!page) return null\n  print(page, \"\\x1b[43m -- page \\x1b[0m\")\n  return {\n    name: (page.value as any)?.properties.title[0][0] || \"undefined\",\n    id: pageId,\n    lastEditedTime: page.value.last_edited_time || Date.now(),\n    icon: page.value?.format?.page_icon || null,\n  }\n}\n\n/** Refresh the properties of the database  */\nexport async function refreshCollection(\n  client: DummyNotionClient,\n  collection: Collection,\n  daps: Dap[],\n  config: {\n    getTemplatesInfo?: boolean\n    checkTemplateUpToDate?: TemplateInfo\n  }\n): Promise<RefreshCollectionResult> {\n  let result: RefreshCollectionResult = {\n    needToResetCollection: false,\n    fieldsToModify: [],\n  }\n\n  const resp = await client.agent.loadPageChunk({\n    pageId: collection.parent_id,\n    limit: 1,\n    cursor: {\n      stack: [[{ id: collection.parent_id, table: \"block\", index: 0 }]],\n    },\n    chunkNumber: 0,\n    verticalColumns: false,\n  })\n  if (!(collection.id in resp.recordMap.collection)) {\n    result.needToResetCollection = true\n    return result\n  }\n\n  result.collection = resp.recordMap.collection[collection.id].value\n  let col: any = result.collection\n  if (config.getTemplatesInfo && col.template_pages) {\n    col.templatesInfo = await Promise.all(\n      col.template_pages.map((id) => getTemplateInfo(client, id))\n    )\n  }\n\n  if (config.checkTemplateUpToDate) {\n    const stillExist = (col.template_pages || []).some(\n      (id) => config.checkTemplateUpToDate.id\n    )\n    if (!stillExist) {\n      result.needToRemoveTemplate = true\n    } else {\n      let newTemplate = await getTemplateInfo(\n        client,\n        config.checkTemplateUpToDate.id\n      )\n      print(\n        newTemplate.lastEditedTime >\n          config.checkTemplateUpToDate.lastEditedTime,\n        \"checking template is up to date\",\n        config.checkTemplateUpToDate,\n        newTemplate\n      )\n      if (\n        newTemplate.lastEditedTime > config.checkTemplateUpToDate.lastEditedTime\n      ) {\n        result.needToRefreshTemplate = true\n      }\n      ;(result.collection as any).template = newTemplate\n    }\n  }\n\n  let schema = result.collection.schema\n  const ncol = await client.getCollectionLocally(\n    collection.id,\n    collection.parent_id,\n    schema\n  )\n  //Verification of the fields\n  for (let dap of daps) {\n    if (dap.property) {\n      if (extraProperty.some((e) => e == dap.property.id)) {\n        continue\n      }\n      if (!(dap.property.id in ncol.schema)) {\n        result.fieldsToModify.push({ key: dap.key, action: \"remove\" })\n      } else {\n        //check same type\n        let nproperty = ncol.schema[dap.property.id]\n        if (dap.property.type != nproperty.type) {\n          //need to reset\n          result.fieldsToModify.push({\n            key: dap.key,\n            action: \"removeDefaultValue\",\n          })\n        } else {\n          if ([\"select\", \"multi_select\"].includes(dap.property.type)) {\n            //check if options need to be changed\n            switch (dap.property.type) {\n              case \"select\":\n                if (\n                  dap.options.defaultSelectId &&\n                  (!nproperty.options ||\n                    !nproperty.options.some(\n                      (opt) => opt.id == dap.options.defaultSelectId\n                    ))\n                ) {\n                  result.fieldsToModify.push({\n                    key: dap.key,\n                    action: \"removeDefaultValue\",\n                  })\n                }\n                break\n              case \"multi_select\":\n                if (\n                  dap.options.defaultSelectIds &&\n                  (!nproperty.options ||\n                    !dap.options.defaultSelectIds.every((id) =>\n                      nproperty.options.some((opt) => opt.id == id)\n                    ))\n                ) {\n                  result.fieldsToModify.push({\n                    key: dap.key,\n                    action: \"removeDefaultValue\",\n                  })\n                }\n                break\n            }\n          }\n          //check default value\n        }\n      }\n    }\n  }\n  return result\n}\n\nfunction encrypt(s) {\n  try {\n    return window.btoa(s)\n  } catch {\n    return s\n  }\n}\n\nfunction decrypt(s) {\n  try {\n    return window.atob(s)\n  } catch {\n    return s\n  }\n}\nasync function fetchNotionClient(\n  client: DummyNotionClient,\n  cookie: string\n): Promise<\n  | { status: \"ok\"; client: DummyNotionClient }\n  | { status: \"error\"; errorMsg: ErrorGetClient }\n> {\n  try {\n    print(\"fetch\", client.user)\n    await client.fetchUserInfos()\n    print(\"fetchdone\", client.user)\n  } catch (err) {\n    return { status: \"error\", errorMsg: \"cookie_expired\" }\n  }\n  await storage.set(\n    NOTION_CLIENT_DATA_KEY,\n    encrypt(JSON.stringify(client.user))\n  )\n  await storage.set(COOKIE_KEY, encrypt(cookie))\n  return { status: \"ok\", client }\n}\n\nexport type ErrorGetClient =\n  | \"need_to_login_to_notion\"\n  | \"cookie_expired\"\n  | \"network_issue\"\n/** get the client and update/refresh the cookie */\nexport async function getClient(\n  onStatusChange?: (status: \"fetching_client\") => void\n): Promise<\n  | { status: \"error\"; errorMsg: ErrorGetClient }\n  | { status: \"ok\"; client: DummyNotionClient }\n> {\n  let client: DummyNotionClient\n  const cookieWrap = await promisify(chrome.cookies.get, {\n    url: \"https://www.notion.so\",\n    name: \"token_v2\",\n  })\n  if (!cookieWrap) {\n    return { status: \"error\", errorMsg: \"need_to_login_to_notion\" }\n  }\n  const cookie: string = cookieWrap.value\n\n  let storedCookie = await storage.get(COOKIE_KEY, null)\n  if (storedCookie) {\n    storedCookie = decrypt(storedCookie)\n  }\n  let clientData = await storage.get(NOTION_CLIENT_DATA_KEY, null)\n  if (clientData) {\n    clientData = JSON.parse(decrypt(clientData))\n  }\n  client = new DummyNotionClient(cookie)\n  if (!storedCookie || storedCookie != cookie || !clientData) {\n    onStatusChange && onStatusChange(\"fetching_client\")\n    return await fetchNotionClient(client, cookie)\n  } else {\n    client.setUserInfos(clientData)\n  }\n  return { status: \"ok\", client }\n}\n\nconst cachedCollectionsMap: Record<\n  string,\n  { count: number; map: Record<string, CollectionPage>; order: string[] }\n> = {}\nconst cachedCollectionsTimeout = {}\nexport async function getCachedCollectionPages(collectionId: string) {\n  if (collectionId in cachedCollectionsMap)\n    return cachedCollectionsMap[collectionId].map\n\n  const p = await storage.get(`collection-pages-${collectionId}`, {\n    count: 0,\n    map: {},\n    order: [],\n  })\n  cachedCollectionsMap[collectionId] = p\n  return p.map\n}\n\nexport async function upsertCachedCollectionPage(\n  page: CollectionPage,\n  collectionId: string\n) {\n  const p = await getCachedCollectionPages(collectionId)\n  if (!(page.id in p)) {\n    if (cachedCollectionsMap[collectionId].count > 300) {\n      const oldId = cachedCollectionsMap[collectionId].order.shift()\n      delete p[oldId]\n      cachedCollectionsMap[collectionId].count--\n    }\n    cachedCollectionsMap[collectionId].count++\n    cachedCollectionsMap[collectionId].order.push(page.id)\n  }\n  p[page.id] = page\n  if (!cachedCollectionsTimeout[collectionId]) {\n    cachedCollectionsTimeout[collectionId] = setTimeout(async () => {\n      //sort\n      let m = cachedCollectionsMap[collectionId].map\n      const keys = Object.keys(m).sort((a, b) =>\n        m[a].name.toLowerCase() < m[b].name.toLowerCase() ? -1 : 1\n      )\n      let newMap = {}\n      keys.forEach(\n        (k) => (newMap[k] = cachedCollectionsMap[collectionId].map[k])\n      )\n      await storage.set(`collection-pages-${collectionId}`, {\n        ...cachedCollectionsMap[collectionId],\n        map: newMap,\n      })\n      cachedCollectionsTimeout[collectionId] = null\n    }, 200)\n  }\n  return p\n}\n","import * as React from \"react\"\r\n\r\nfunction useForceUpdate(): () => void {\r\n  const [, dispatch] = React.useState(Object.create(null))\r\n\r\n  return React.useCallback(() => {\r\n    dispatch(Object.create(null))\r\n  }, [dispatch])\r\n}\r\n\r\ntype RouterStackItem = {\r\n  component: React.ComponentType<any>\r\n  props: any\r\n}\r\n\r\nlet stack: RouterStackItem[] = []\r\n\r\nlet forceUpdate: Function\r\n\r\nfunction goTo(comp: React.ComponentType<any>, props: any = {}): void {\r\n  stack.push({ component: comp, props })\r\n  forceUpdate && forceUpdate()\r\n}\r\n\r\nfunction goBack(): void {\r\n  if (stack.length) {\r\n    stack.pop()\r\n  }\r\n  forceUpdate && forceUpdate()\r\n}\r\n\r\nfunction popToTop(): void {\r\n  stack = []\r\n  forceUpdate && forceUpdate()\r\n}\r\n\r\n/*\r\nfunction getCurrent(): RouterStackItem {\r\n  return stack[stack.length - 1] || { component: false, props: null }\r\n}\r\n*/\r\n\r\nfunction getComponentStack(): RouterStackItem[] {\r\n  return stack\r\n}\r\n\r\ninterface ILinkProps {\r\n  id?: string\r\n  component: React.ComponentType<any>\r\n  children?: React.ReactNode\r\n  props: any\r\n  href?: string\r\n  className?: string\r\n  onClick?: (event: React.SyntheticEvent) => void\r\n}\r\n\r\nfunction Link({\r\n  id = \"\",\r\n  component,\r\n  children,\r\n  props = {},\r\n  href = \"\",\r\n  className = \"\",\r\n  onClick,\r\n  ...restProps\r\n}: ILinkProps & React.HTMLProps<HTMLAnchorElement>) {\r\n  const onClickHandler = React.useCallback(\r\n    (evt: React.SyntheticEvent) => {\r\n      evt.preventDefault()\r\n      if (component) {\r\n        goTo(component, props)\r\n      }\r\n      if (!component && href) {\r\n        window.open(href)\r\n      }\r\n      onClick && onClick(evt)\r\n    },\r\n    [component, props, href, onClick]\r\n  )\r\n\r\n  return React.createElement(\r\n    \"a\",\r\n    {\r\n      href,\r\n      className,\r\n      id,\r\n      onClick: onClickHandler,\r\n      ...restProps,\r\n    },\r\n    children\r\n  )\r\n}\r\n\r\ninterface IRouterProps {\r\n  children: React.ReactNode\r\n}\r\n\r\nconst emptyStackComponent: RouterStackItem = {\r\n  component: ({ children }: any) => children,\r\n  props: {},\r\n}\r\n\r\nfunction Router({ children }: any) {\r\n  const update = useForceUpdate()\r\n\r\n  React.useEffect(() => {\r\n    forceUpdate = update\r\n  }, [update])\r\n\r\n  const { component: Component, props } =\r\n    stack[stack.length - 1] || emptyStackComponent\r\n\r\n  return React.createElement(Component, props, children)\r\n}\r\n\r\nexport {\r\n  goBack,\r\n  /*getCurrent,*/ getComponentStack,\r\n  goTo,\r\n  popToTop,\r\n  Link,\r\n  Router,\r\n}\r\n//export type { ILinkProps, IRouterProps };\r\n","export const arrayMoveMutate = (array, from, to) => {\n  const startIndex = to < 0 ? array.length + to : to\n  const item = array.splice(from, 1)[0]\n  array.splice(startIndex, 0, item)\n}\n\nexport const arrayMove = (array, from, to) => {\n  array = array.slice()\n  arrayMoveMutate(array, from, to)\n  return array\n}\n\nexport default arrayMove\n","import React from \"react\"\nimport {\n  SelectIcon,\n  CheckboxIcon,\n  MultiSelectIcon,\n  TextIcon,\n  TitleIcon,\n  LinkIcon,\n  TemplateIcon,\n  RelationIcon,\n  NumberIcon,\n} from \"../shared/icons\"\nconst ImageIcon = require(\"@material-ui/icons/Image\").default\nconst AssignmentOutlinedIcon = require(\"@material-ui/icons/AssignmentOutlined\")\n  .default\n\nconst dataTypeIcon = {\n  select: <SelectIcon />,\n  multi_select: <MultiSelectIcon />,\n  checkbox: <CheckboxIcon />,\n  text: <TextIcon />,\n  url: <LinkIcon />,\n  title: <TitleIcon />,\n  relation: <RelationIcon />,\n  number: <NumberIcon />,\n  image: (\n    <ImageIcon\n      style={{\n        fontSize: \"16px\",\n        color: \"rgba(55, 53, 47, 0.4)\",\n        paddingTop: \"3px\",\n      }}\n    />\n  ),\n  template: <TemplateIcon />,\n  saveContent: (\n    <AssignmentOutlinedIcon\n      style={{\n        fontSize: \"18px\",\n        color: \"rgba(55, 53, 47, 0.4)\",\n        paddingTop: \"3px\",\n      }}\n    />\n  ),\n}\n\nexport const PropretyName = ({ option }: { option: any }) => {\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <div style={{ width: 25 }}>\n        {option.type in dataTypeIcon && (\n          <div style={{ marginRight: \"4px\" }}>{dataTypeIcon[option.type]}</div>\n        )}{\" \"}\n      </div>\n      <div style={{ marginLeft: \"4px\", fontSize: \"14px\" }}>{option.name}</div>\n    </div>\n  )\n}\n","import React, {\n  useState,\n  useMemo,\n  useEffect,\n  useContext,\n  useCallback,\n} from \"react\"\n// prettier-ignore\nimport {\n    Box, Boxfc, Boxf, BoxPaper, Hidden,  Content,BoxProps,Chip,\n    BoxCont, BoxVert, BoxHori, TextField,\n    H4, H1, H3, H2,Txt,\n    Button,Touchable, Switch, Divider,Avatar,\n    Table, TableBody, TableCell, TableContainer, TableHead,TableRow, \n  } from \"../shared/MaterialUI\";\nimport { Collection } from \"../shared/notionapi/interfaces\"\nimport { DataContext } from \"../App\"\nimport FieldWrapper from \"./FieldWrapper\"\nimport { print, throttle } from \"../shared/utils\"\nimport { Dap } from \"../shared/appConfig\"\nimport { DummyNotionClient } from \"../shared/notionlib/notion\"\nimport { PropretyName } from \"./PropretyName\"\n\nimport { RefreshCollectionResult, refreshCollection } from \"../shared/appUtils\"\nimport { NotionPageIcon } from \"../shared/icons\"\n//import throttle from 'lodash/throttle';\nconst Autocomplete = require(\"@material-ui/lab/Autocomplete\").default\nconst CircularProgress = require(\"@material-ui/core/CircularProgress\").default\nconst ReplayIcon = require(\"@material-ui/icons/Replay\").default\n\n//let last:Date;\n//let deferTimer: ReturnType<typeof setTimeout>;\n\nconst toNotionImageUrl = (url: string) => {\n  return `https://notion.so/image/${encodeURIComponent(\n    url.startsWith(\"/image\") ? `https://notion.so${url}` : url\n  )}`\n}\n\nconst toCollectionImageUrl = (\n  url: string,\n  collectionId: string,\n  userId: string\n) => {\n  return `${toNotionImageUrl(\n    url\n  )}?table=collection&id=${collectionId}&userId=${userId}&cache=v2`\n}\n\nconst ColIcon = ({\n  icon,\n  collectionId,\n  userId,\n}: {\n  icon: string | null\n  collectionId: string\n  userId: string\n}) => {\n  if (!icon)\n    return (\n      <div style={{ width: \"27px\" }}>\n        <NotionPageIcon />\n      </div>\n    )\n  return (\n    <div style={{ marginRight: \"4px\", display: \"flex\", alignItems: \"center\" }}>\n      {icon.startsWith(\"http\") ? (\n        <>\n          {\n            <img\n              src={toCollectionImageUrl(icon, collectionId, userId)}\n              height=\"20px\"\n              width=\"20px\"\n            />\n          }\n        </>\n      ) : (\n        <>{icon}</>\n      )}\n    </div>\n  )\n}\nconst Parents = ({ parents }: { parents: { name: string }[] }) => {\n  return (\n    <div style={{ color: \"grey\", fontSize: 11, fontWeight: 350 }}>\n      {parents.length >= 1 && <>{parents[0].name}</>}\n      {parents.length >= 3 ? ` / ... / ` : parents.length == 2 ? ` / ` : ``}\n      {parents.length >= 2 && <>{parents[parents.length - 1].name}</>}\n    </div>\n  )\n}\n\nconst CollectionSelect = ({\n  collection,\n  onSelectCollection,\n  spaceId,\n  daps,\n  disabled,\n}: {\n  collection: Collection | null\n  spaceId: string\n  daps: Dap[]\n  disabled?: boolean\n  onSelectCollection: (col: Collection) => void\n}) => {\n  const [open, setOpen] = React.useState(false)\n  const [active, setActive] = useState(false)\n  const [focus, setFocus] = useState(false)\n  const [collections, setCollections] = useState({ count: 0, collections: {} })\n  const [options, setOptions] = React.useState<Collection[]>([\n    ...(collection ? [collection] : []),\n  ])\n  const [inputValue, setInputValue] = useState(\"\")\n  const loading = open && active\n  const { client } = useContext(DataContext)\n\n  const updateOptions = (fetchedCollections: Collection[]) => {\n    let ids = {}\n    let opts = [...fetchedCollections]\n    fetchedCollections.forEach((e) => {\n      ids[e.id] = true\n    })\n    //print(\"got\", ids)\n    for (let i = 0; i < options.length && i < 70; i++) {\n      if (!(options[i].id in ids)) {\n        opts.push(options[i])\n      }\n    }\n    setOptions(opts)\n  }\n\n  const searchCollections: (v: string) => Promise<Collection[]> = useMemo(\n    () =>\n      throttle(async function (v) {\n        const x = await client.searchCollections(v, spaceId)\n        return x\n      }, 500),\n    [spaceId]\n  ) as any\n\n  useEffect(() => {\n    if (collection) {\n      setInputValue(collection.name[0][0])\n    }\n  }, [collection])\n  useEffect(() => {\n    setFocus(false)\n    setActive(true)\n    ;(async () => {\n      //print(`calling... '${inputValue}'`, )\n      const x: Collection[] | undefined = await searchCollections(inputValue)\n      //print(`result... '${inputValue}'`, x)\n      if (x) {\n        updateOptions(x)\n        setActive(false)\n      }\n    })()\n  }, [inputValue, focus])\n\n  return (\n    <>\n      <Boxf align=\"center\" flex={1}>\n        <Box\n          style={{\n            minWidth: \"200px\",\n            marginRight: \"28px\",\n            fontSize: \"1rem\",\n            fontWeight: 400,\n          }}\n        >\n          <PropretyName option={{ name: \"Database\", type: \"database\" }} />\n        </Box>\n        <Boxf flex={1}>\n          <Autocomplete\n            size=\"small\"\n            disabled={disabled}\n            style={{ width: 220 }}\n            inputValue={inputValue}\n            onInputChange={(ev, value) => setInputValue(value)}\n            value={collection}\n            open={open}\n            onOpen={() => {\n              setOpen(true)\n            }}\n            loading={loading}\n            openOnFocus={true}\n            onFocus={() => {\n              setFocus(true)\n            }}\n            onClose={() => {\n              setOpen(false)\n            }}\n            onChange={(\n              ev,\n              value,\n              reason:\n                | \"create-option\"\n                | \"select-option\"\n                | \"remove-option\"\n                | \"blur\"\n                | \"clear\"\n            ) => {\n              console.log(\"select database\", value, reason)\n              onSelectCollection && onSelectCollection(value)\n            }}\n            getOptionSelected={(option, value) =>\n              option.name[0][0] === value.name[0][0]\n            }\n            renderOption={(option) => {\n              //console.log(\"got\", option)\n              return (\n                <>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <ColIcon\n                      icon={option.icon}\n                      collectionId={option.id}\n                      userId={client.user.id}\n                    />\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                      }}\n                    >\n                      <div>{option.name[0][0]}</div>\n                      <Parents parents={option.parents || []} />\n                    </div>\n                  </div>\n                </>\n              )\n            }}\n            getOptionLabel={(option) => option.name[0][0]}\n            options={options}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                style={{ width: \"200px\" }}\n                className=\"collectionField\"\n                placeholder=\"Select Database...\"\n                InputProps={{\n                  ...params.InputProps,\n                  endAdornment: (\n                    <React.Fragment>\n                      {loading ? (\n                        <CircularProgress color=\"inherit\" size={20} />\n                      ) : null}\n                      {params.InputProps.endAdornment}\n                    </React.Fragment>\n                  ),\n                }}\n              />\n            )}\n          />\n        </Boxf>\n      </Boxf>\n      <Boxf align=\"center\">\n        <Boxfc width=\"300px\"></Boxfc>\n        {/*<Box pl={1}>\n          <Button\n            onClick={() => {\n              handleRefreshCollection()\n            }}\n            endIcon={<ReplayIcon />}\n            disabled={!collection}\n            variant=\"text\"\n          >\n            Refresh Database\n          </Button>\n        </Box>*/}\n      </Boxf>\n    </>\n  )\n}\n\nexport default CollectionSelect\n","import React from \"react\"\r\n\r\nexport const SelectIcon = ({}:{}) => {\r\n    return (<>\r\n<svg viewBox=\"0 0 14 14\"\r\nstyle={{width:'14px', height:'14px', display: 'block',\r\nfill:'rgba(55, 53, 47, 0.4)',\r\nflexShrink: 0, backfaceVisibility: 'hidden',\r\n    }}>\r\n    <path d=\"M7,13 C10.31348,13 13,10.31371 13,7 C13,3.68629 10.31348,1 7,1 C3.68652,1 1,3.68629 1,7 C1,10.31371 3.68652,13 7,13 Z M3.75098,5.32278 C3.64893,5.19142 3.74268,5 3.90869,5 L10.09131,5 C10.25732,5 10.35107,5.19142 10.24902,5.32278 L7.15771,9.29703 C7.07764,9.39998 6.92236,9.39998 6.84229,9.29703 L3.75098,5.32278 Z\"></path></svg>\r\n    </>);\r\n}\r\nexport default SelectIcon;","import React from \"react\"\r\n\r\nexport const MultiSelectIcon = ({}:{}) => {\r\n    return (<>\r\n<svg viewBox=\"0 0 14 14\" style={{\"width\":\"14px\",\"height\":\"14px\",\"display\":\"block\",\"fill\":\"rgba(55, 53, 47, 0.4)\",\r\n\"flexShrink\":0,\"backfaceVisibility\":\"hidden\"}}\r\n>\r\n<path d=\"M4,3 C4,2.447715 4.447715,2 5,2 L12,2 C12.5523,2 13,2.447716 13,3 C13,3.55228 12.5523,4 12,4 L5,4 C4.447715,4 4,3.55228 4,3 Z M4,7 C4,6.447715 4.447715,6 5,6 L12,6 C12.5523,6 13,6.447716 13,7 C13,7.55228 12.5523,8 12,8 L5,8 C4.447715,8 4,7.55228 4,7 Z M4,11 C4,10.447715 4.447715,10 5,10 L12,10 C12.5523,10 13,10.447716 13,11 C13,11.55228 12.5523,12 12,12 L5,12 C4.447715,12 4,11.55228 4,11 Z M2,4 C1.44771525,4 1,3.55228475 1,3 C1,2.44771525 1.44771525,2 2,2 C2.55228475,2 3,2.44771525 3,3 C3,3.55228475 2.55228475,4 2,4 Z M2,8 C1.44771525,8 1,7.55228475 1,7 C1,6.44771525 1.44771525,6 2,6 C2.55228475,6 3,6.44771525 3,7 C3,7.55228475 2.55228475,8 2,8 Z M2,12 C1.44771525,12 1,11.5522847 1,11 C1,10.4477153 1.44771525,10 2,10 C2.55228475,10 3,10.4477153 3,11 C3,11.5522847 2.55228475,12 2,12 Z\"></path></svg>\r\n    </>);\r\n}\r\n\r\nexport default MultiSelectIcon;\r\n","import React from \"react\"\r\n\r\nexport const TextIcon = ({}:{}) => {\r\n    return (<>\r\n    \r\n<svg viewBox=\"0 0 14 14\"\r\nstyle={{\"width\":\"14px\",\"height\":\"14px\",\"display\":\"block\",\"fill\":\"rgba(55, 53, 47, 0.4)\",\"flexShrink\":0,\"backfaceVisibility\":\"hidden\"}}>\r\n    \r\n    <path d=\"M7,4.56818 C7,4.29204 6.77614,4.06818 6.5,4.06818 L0.5,4.06818 C0.223858,4.06818 0,4.29204 0,4.56818 L0,5.61364 C0,5.88978 0.223858,6.11364 0.5,6.11364 L6.5,6.11364 C6.77614,6.11364 7,5.88978 7,5.61364 L7,4.56818 Z M0.5,1 C0.223858,1 0,1.223858 0,1.5 L0,2.54545 C0,2.8216 0.223858,3.04545 0.5,3.04545 L12.5,3.04545 C12.7761,3.04545 13,2.8216 13,2.54545 L13,1.5 C13,1.223858 12.7761,1 12.5,1 L0.5,1 Z M0,8.68182 C0,8.95796 0.223858,9.18182 0.5,9.18182 L11.5,9.18182 C11.7761,9.18182 12,8.95796 12,8.68182 L12,7.63636 C12,7.36022 11.7761,7.13636 11.5,7.13636 L0.5,7.13636 C0.223858,7.13636 0,7.36022 0,7.63636 L0,8.68182 Z M0,11.75 C0,12.0261 0.223858,12.25 0.5,12.25 L9.5,12.25 C9.77614,12.25 10,12.0261 10,11.75 L10,10.70455 C10,10.4284 9.77614,10.20455 9.5,10.20455 L0.5,10.20455 C0.223858,10.20455 0,10.4284 0,10.70455 L0,11.75 Z\">\r\n    </path></svg>\r\n  </>);\r\n}\r\nexport default TextIcon;\r\n","import React from \"react\"\r\n\r\nexport const TitleIcon = ({}:{}) => {\r\n    return (<>\r\n    \r\n<svg viewBox=\"0 0 14 14\"\r\nstyle={{\"width\":\"14px\",\"height\":\"14px\",\"display\":\"block\",\"fill\":\"rgba(55, 53, 47, 0.4)\",\"flexShrink\":0,\"backfaceVisibility\":\"hidden\"}}><path d=\"M7.73943662,8.6971831 C7.77640845,8.7834507 7.81338028,8.8943662 7.81338028,9.00528169 C7.81338028,9.49823944 7.40669014,9.89260563 6.91373239,9.89260563 C6.53169014,9.89260563 6.19894366,9.64612676 6.08802817,9.30105634 L5.75528169,8.33978873 L2.05809859,8.33978873 L1.72535211,9.30105634 C1.61443662,9.64612676 1.2693662,9.89260563 0.887323944,9.89260563 C0.394366197,9.89260563 0,9.49823944 0,9.00528169 C0,8.8943662 0.0246478873,8.7834507 0.0616197183,8.6971831 L2.46478873,2.48591549 C2.68661972,1.90669014 3.24119718,1.5 3.90669014,1.5 C4.55985915,1.5 5.12676056,1.90669014 5.34859155,2.48591549 L7.73943662,8.6971831 Z M2.60035211,6.82394366 L5.21302817,6.82394366 L3.90669014,3.10211268 L2.60035211,6.82394366 Z M11.3996479,3.70598592 C12.7552817,3.70598592 14,4.24823944 14,5.96126761 L14,9.07922535 C14,9.52288732 13.6549296,9.89260563 13.2112676,9.89260563 C12.8169014,9.89260563 12.471831,9.59683099 12.4225352,9.19014085 C12.028169,9.6584507 11.3257042,9.95422535 10.5492958,9.95422535 C9.60035211,9.95422535 8.47887324,9.31338028 8.47887324,7.98239437 C8.47887324,6.58978873 9.60035211,6.08450704 10.5492958,6.08450704 C11.3380282,6.08450704 12.040493,6.33098592 12.4348592,6.81161972 L12.4348592,5.98591549 C12.4348592,5.38204225 11.9172535,4.98767606 11.1285211,4.98767606 C10.6602113,4.98767606 10.2411972,5.11091549 9.80985915,5.38204225 C9.72359155,5.43133803 9.61267606,5.46830986 9.50176056,5.46830986 C9.18133803,5.46830986 8.91021127,5.1971831 8.91021127,4.86443662 C8.91021127,4.64260563 9.0334507,4.44542254 9.19366197,4.34683099 C9.87147887,3.90316901 10.6232394,3.70598592 11.3996479,3.70598592 Z M11.1778169,8.8943662 C11.6830986,8.8943662 12.1760563,8.72183099 12.4348592,8.37676056 L12.4348592,7.63732394 C12.1760563,7.29225352 11.6830986,7.11971831 11.1778169,7.11971831 C10.5616197,7.11971831 10.056338,7.45246479 10.056338,8.0193662 C10.056338,8.57394366 10.5616197,8.8943662 11.1778169,8.8943662 Z M0.65625,11.125 L13.34375,11.125 C13.7061869,11.125 14,11.4188131 14,11.78125 C14,12.1436869 13.7061869,12.4375 13.34375,12.4375 L0.65625,12.4375 C0.293813133,12.4375 4.43857149e-17,12.1436869 0,11.78125 C-4.43857149e-17,11.4188131 0.293813133,11.125 0.65625,11.125 Z\"></path></svg>\r\n  </>);\r\n}\r\nexport default TitleIcon;\r\n","import React from \"react\"\r\n\r\nexport const CheckboxIcon = ({}: {}) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        viewBox=\"0 0 14 14\"\r\n        style={{\r\n          width: \"16px\",\r\n          height: \"16px\",\r\n          display: \"block\",\r\n          fill: \"rgba(55, 53, 47, 0.4)\",\r\n          flexShrink: 0,\r\n          backfaceVisibility: \"hidden\",\r\n        }}\r\n      >\r\n        <path d=\"M0,3 C0,1.34314 1.34326,0 3,0 L11,0 C12.6567,0 14,1.34314 14,3 L14,11 C14,12.6569 12.6567,14 11,14 L3,14 C1.34326,14 0,12.6569 0,11 L0,3 Z M3,1.5 C2.17139,1.5 1.5,2.17157 1.5,3 L1.5,11 C1.5,11.8284 2.17139,12.5 3,12.5 L11,12.5 C11.8286,12.5 12.5,11.8284 12.5,11 L12.5,3 C12.5,2.17157 11.8286,1.5 11,1.5 L3,1.5 Z M2.83252,6.8161 L3.39893,6.27399 L3.57617,6.10425 L3.92334,5.77216 L4.26904,6.10559 L4.44531,6.27582 L5.58398,7.37402 L9.28271,3.81073 L9.45996,3.64008 L9.80664,3.3056 L10.1538,3.63989 L10.3311,3.81067 L10.8936,4.35303 L11.0708,4.52399 L11.4434,4.88379 L11.0708,5.24353 L10.8936,5.41437 L6.1084,10.0291 L5.93115,10.2 L5.58398,10.5344 L5.23682,10.2 L5.05957,10.0292 L2.83057,7.87946 L2.65283,7.70801 L2.27832,7.34674 L2.6543,6.98694 L2.83252,6.8161 Z\"></path>\r\n      </svg>\r\n    </>\r\n  )\r\n}\r\nexport default CheckboxIcon\r\n","import React from \"react\"\r\n\r\nexport const LinkIcon = ({}:{}) => {\r\n    return (<>\r\n<svg viewBox=\"0 0 14 14\" style={{\"width\":\"14px\",\"height\":\"14px\",\"display\":\"block\",\"fill\":\"rgba(55, 53, 47, 0.4)\",\"flexShrink\":0,\"backfaceVisibility\":\"hidden\"}}><path d=\"M3.73333,3.86667 L7.46667,3.86667 C8.49613,3.86667 9.33333,4.70387 9.33333,5.73333 C9.33333,6.7628 8.49613,7.6 7.46667,7.6 L6.53333,7.6 C6.01813,7.6 5.6,8.0186 5.6,8.53333 C5.6,9.04807 6.01813,9.46667 6.53333,9.46667 L7.46667,9.46667 C9.5284,9.46667 11.2,7.79507 11.2,5.73333 C11.2,3.6716 9.5284,2 7.46667,2 L3.73333,2 C1.6716,2 0,3.6716 0,5.73333 C0,7.124 0.762067,8.33453 1.88953,8.97713 C1.87553,8.83107 1.86667,8.6836 1.86667,8.53333 C1.86667,7.92013 1.98753,7.33447 2.2036,6.7978 C1.99267,6.4954 1.86667,6.12953 1.86667,5.73333 C1.86667,4.70387 2.70387,3.86667 3.73333,3.86667 Z M12.1095,5.28907 C12.1231,5.4356 12.1333,5.58307 12.1333,5.73333 C12.1333,6.34607 12.0101,6.9294 11.7931,7.46513 C12.0059,7.768 12.1333,8.13573 12.1333,8.53333 C12.1333,9.5628 11.2961,10.4 10.2667,10.4 L6.53333,10.4 C5.50387,10.4 4.66667,9.5628 4.66667,8.53333 C4.66667,7.50387 5.50387,6.66667 6.53333,6.66667 L7.46667,6.66667 C7.98187,6.66667 8.4,6.24807 8.4,5.73333 C8.4,5.2186 7.98187,4.8 7.46667,4.8 L6.53333,4.8 C4.4716,4.8 2.8,6.4716 2.8,8.53333 C2.8,10.59507 4.4716,12.2667 6.53333,12.2667 L10.2667,12.2667 C12.3284,12.2667 14,10.59507 14,8.53333 C14,7.14267 13.2375,5.93167 12.1095,5.28907 Z\"></path></svg>\r\n  </>);\r\n}\r\nexport default LinkIcon;\r\n","import React, {\n  useState,\n  useMemo,\n  useEffect,\n  useContext,\n  useCallback,\n} from \"react\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Boxfc,\n  Boxf,\n  H4,\n  H3,\n  H2,\n  Button,\n  BoxCont,\n  BoxVert,\n  BoxHori,\n  TextField,\n  Box,\n  Txt,\n  callAfterMs,\n  Hidden,\n  BoxPaper,\n  Content,\n  BoxProps,\n  Touchable,\n} from \"../shared/MaterialUI\"\nimport {\n  FormData,\n  FORM_LIST_KEY,\n  FORM_KEY_PREFIX,\n  Dap,\n  ModifiedDapProperty,\n  DapOptions,\n  DapOptionsSelectedDataTypes,\n  FieldOptions,\n  randomNotionColor,\n} from \"../shared/appConfig\"\nimport { CollectionPage } from \"../shared/notionlib/notion\"\nimport {\n  sleep,\n  print,\n  promisify,\n  makeid,\n  getChipColor,\n  throttle,\n} from \"../shared/utils\"\nimport SelectIcon from \"../dataTypes/SelectIcon\"\nimport MultiSelectIcon from \"../dataTypes/MultiSelectIcon\"\nimport TextIcon from \"../dataTypes/TextIcon\"\nimport TitleIcon from \"../dataTypes/TitleIcon\"\nimport CheckboxIcon from \"../dataTypes/CheckboxIcon\"\nimport LinkIcon from \"../dataTypes/LinkIcon\"\nimport { DataContext, FormSubmissionContext } from \"../App\"\nimport { DataPage } from \"../pages/EditForm\"\nimport {\n  EmptyNotionPageIcon,\n  NotionPageIcon,\n  RelationIcon,\n  NumberIcon,\n} from \"../shared/icons\"\nimport { jdump } from \"../shared/notionlib/util\"\nconst Select = require(\"@material-ui/core/Select\").default\nconst Menu = require(\"@material-ui/core/Menu\").default\nconst MenuItem = require(\"@material-ui/core/MenuItem\").default\nconst AttachFileIcon = require(\"@material-ui/icons/Attachment\").default\n\nconst FormControlLabel = require(\"@material-ui/core/FormControlLabel\").default\nconst Checkbox = require(\"@material-ui/core/Checkbox\").default\n\nconst ImageIcon = require(\"@material-ui/icons/Image\").default\nconst Paper = require(\"@material-ui/core/Paper\").default\n\nconst dataTypeIcon = {\n  select: <SelectIcon />,\n  multi_select: <MultiSelectIcon />,\n  text: <TextIcon />,\n  url: <LinkIcon />,\n  checkbox: <CheckboxIcon />,\n  title: <TitleIcon />,\n  image: (\n    <ImageIcon style={{ fontSize: \"14px\", color: \"rgba(55, 53, 47, 0.4)\" }} />\n  ),\n  relation: <RelationIcon />,\n  number: <NumberIcon />,\n}\n\n//import Autocomplete from \"@material-ui/lab/Autocomplete\"\nconst Autocomplete = require(\"@material-ui/lab/Autocomplete\").default\nconst { createFilterOptions } = require(\"@material-ui/lab/Autocomplete\")\nconst FormLabel = require(\"@material-ui/core/FormLabel\").default\nconst Chip = require(\"@material-ui/core/Chip\").default\nconst InputLabel = require(\"@material-ui/core/InputLabel\").default\n\nconst filter = createFilterOptions({ limit: 20, trim: true })\n\nconst TypeTextField = ({\n  defaultValue,\n  onChangeValue,\n  refresh,\n  name,\n  textClass,\n  textStyle,\n  isNumber,\n}: {\n  defaultValue: string\n  onChangeValue: (v: string) => void\n  refresh?: boolean\n  name: string\n  textClass?: string\n  textStyle?: any\n  isNumber?: boolean\n}) => {\n  const [value, setValue] = useState(defaultValue)\n  const saveTimeout = React.useRef(null)\n\n  useEffect(() => {\n    setValue(defaultValue)\n  }, [defaultValue])\n  return (\n    <TextField\n      className={textClass || undefined}\n      style={textStyle || {}}\n      value={value}\n      multiline\n      rowsMax={3}\n      onChange={(ev) => {\n        setValue(ev.target.value)\n        if (!saveTimeout.current) {\n          saveTimeout.current = setTimeout(() => {\n            setValue((v) => {\n              onChangeValue(v)\n              saveTimeout.current = null\n              return v\n            })\n          }, 700)\n        }\n      }}\n      placeholder={`${name}...`}\n      onBlur={() => {\n        print(\"got blurred\", value)\n        onChangeValue(value)\n      }}\n    />\n  )\n}\n\nexport const DataOptionRow = ({ data }: { data: DataPage }) => {\n  return (\n    <Boxfc>\n      <Box></Box>\n      <Boxfc>\n        <Boxf align=\"center\">\n          <AttachFileIcon\n            style={{\n              color: \"rgba(55, 53, 47, 0.4)\",\n              fontSize: \"18px\",\n              marginRight: \"8px\",\n            }}\n          />\n          <div className=\"titleDataOptionRow\" style={{}}>\n            {data.name}\n          </div>\n        </Boxf>\n        {data.example && data.example.length && (\n          <div className=\"descriptionDataOptionRow\">\n            example: {data.example}\n          </div>\n        )}\n      </Boxfc>\n    </Boxfc>\n  )\n}\n\nexport const DataSelectedOption = ({ data }: { data: DataPage }) => {\n  return (\n    <Boxf align=\"center\">\n      <AttachFileIcon\n        style={{\n          color: \"rgba(55, 53, 47, 0.4)\",\n          fontSize: \"18px\",\n          marginRight: \"8px\",\n        }}\n      />\n      <div className=\"selectedDataOptionRow\">{data.name}</div>\n    </Boxf>\n  )\n}\n\nexport const TextFieldWithData = ({\n  datas,\n  name,\n  textClass,\n  options,\n  onSetOptions,\n  textStyle,\n}: {\n  datas: DataPage[]\n  options: DapOptions\n  onSetOptions: (opt: DapOptions) => void\n  name: string\n  textClass?: string\n  textStyle?: any\n}) => {\n  const [value, setValue] = useState(\n    options.selectedData\n      ? [datas.find((d) => d.key == options.selectedData)]\n      : /*options.defaultValue\n      ? [options.defaultValue]\n      :*/ []\n  )\n  const [inputValue, setInputValue] = useState(options.defaultValue || \"\")\n  //print(\"state:\", options, inputValue, inputValue.length, value)\n\n  useEffect(() => {\n    if (options.defaultValue) setInputValue(options.defaultValue)\n    else setInputValue(\"\")\n  }, [options])\n  return (\n    <>\n      <Autocomplete\n        multiple\n        freeSolo\n        size=\"small\"\n        includeInputInList\n        inputValue={inputValue}\n        onInputChange={(ev, v, reason: \"input\" | \"reset\" | \"clear\") =>\n          setInputValue(v)\n        }\n        blurOnSelect\n        value={value}\n        options={datas || []}\n        getOptionLabel={(option) => {\n          return option.name\n        }}\n        renderOption={(option: DataPage) => {\n          return <DataOptionRow data={option} />\n        }}\n        renderTags={(tagValue, getTagProps) => {\n          return tagValue.map((opt, index) => {\n            console.log(\">>>>\", opt)\n            if (typeof opt == \"string\") return opt\n            const { key, ...tagProps } = getTagProps({ index })\n            return <DataSelectedOption data={opt} />\n          })\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params)\n          return filtered\n        }}\n        style={{}}\n        onChange={async (\n          ev,\n          options,\n          reason:\n            | \"create-option\"\n            | \"select-option\"\n            | \"remove-option\"\n            | \"blur\"\n            | \"clear\"\n        ) => {\n          //check need to create an option\n          let opts = options\n          if (reason == \"blur\") {\n            print(\"BLUR\")\n          }\n          print(\"SUBMIT\", opts, reason, \"\\x1b[43m -- opts \\x1b[0m\")\n          if (opts.length == 0) {\n            onSetOptions({ defaultValue: \"\" })\n            setValue([])\n            return\n          }\n          //onSetOptions({ defaultSelectValue: opts[opts.length - 1].id })\n          let opt = opts[0]\n          if (typeof opt == \"string\") {\n            print(\"save here\", opt)\n            onSetOptions({ defaultValue: opt })\n            //setValue([])\n            //setInputValue(opt)\n            //setValue([opt])\n          } else {\n            onSetOptions({ selectedData: opt.key })\n            setValue([opt])\n          }\n        }}\n        renderInput={(params) => {\n          return (\n            <TextField\n              onMouseDown={params.inputProps.onMouseDown}\n              className={textClass || undefined}\n              placeholder={value.length == 0 ? \"Empty\" : \"\"}\n              style={textStyle || {}}\n              {...params}\n              variant=\"outlined\"\n            />\n          )\n        }}\n      />\n    </>\n  )\n}\nconst TypeCheckboxField = ({\n  defaultValue,\n  onChangeValue,\n  refresh,\n  propertyName,\n}: {\n  defaultValue: boolean\n  onChangeValue: (v: string) => void\n  refresh: boolean\n  propertyName: string\n}) => {\n  const [value, setValue] = useState<boolean>(defaultValue)\n\n  useEffect(() => {\n    setValue(defaultValue)\n  }, [defaultValue])\n\n  return (\n    <>\n      <FormControlLabel\n        style={{ userSelect: \"none\" }}\n        className=\"checkBoxField\"\n        control={\n          <Checkbox\n            checked={value}\n            onChange={(ev) => {\n              setValue(ev.target.checked)\n              onChangeValue(ev.target.checked)\n              //onSetOptions({ defaultValue: ev.target.checked } as any)\n            }}\n            name={propertyName}\n            color=\"primary\"\n          />\n        }\n        label={propertyName}\n      />\n    </>\n  )\n}\n\nexport const CheckBoxField = ({\n  name,\n  value,\n  onChange,\n  checkboxClass,\n  checkboxStyle,\n  size = \"medium\",\n}: {\n  name: string\n  value: boolean\n  onChange: (v: boolean) => void\n  checkboxStyle?: any\n  checkboxClass?: string\n  size?: \"small\" | \"medium\"\n}) => {\n  return (\n    <>\n      <FormControlLabel\n        className={`${checkboxClass || \"\"} checkBox-${size}`}\n        style={checkboxStyle || {}}\n        control={\n          <Checkbox\n            size={size}\n            checked={value}\n            onChange={(ev) => {\n              onChange(ev.target.checked)\n              //onSetOptions({ defaultValue: ev.target.checked } as any)\n            }}\n            name={name}\n            color=\"primary\"\n          />\n        }\n        label={name}\n      />\n    </>\n  )\n}\n\nfunction getDefaultOptionOfSelect(dap: Dap) {\n  if (!dap.options.defaultSelectId || !dap.property.options) return undefined\n  let x = dap.property.options.find(\n    (opt) => opt.id == dap.options.defaultSelectId\n  )\n  return x\n}\n\nexport const SelectFieldNoAutoComplete = ({\n  value,\n  options,\n  onSelectOption,\n  renderOption,\n  uniqueKey,\n  style,\n  className,\n  renderValue,\n  disabled,\n  onOpen,\n  displayEmpty,\n  renderOptionEmpty,\n  renderValueEmpty,\n}: {\n  value\n  className?: string\n  style?: {}\n  options\n  onSelectOption\n  renderOption\n  uniqueKey: string\n  renderValue\n  disabled?: boolean\n  onOpen?: any\n  displayEmpty?: boolean\n  renderOptionEmpty?: () => any\n  renderValueEmpty?: () => any\n}) => {\n  return (\n    <>\n      <Select\n        disabled={disabled}\n        style={style}\n        className={className}\n        value={value}\n        onOpen={onOpen}\n        onChange={(ev) => {\n          onSelectOption(ev.target.value)\n        }}\n        renderValue={(id) => {\n          if (renderValueEmpty && id == \"\") return renderValueEmpty()\n          return renderValue(id)\n        }}\n        displayEmpty={displayEmpty}\n      >\n        {renderOptionEmpty && (\n          <MenuItem value=\"\">{renderOptionEmpty()}</MenuItem>\n        )}\n        {options.map((opt) => (\n          <MenuItem key={opt[uniqueKey]} value={opt[uniqueKey]}>\n            {renderOption(opt)}\n          </MenuItem>\n        ))}\n      </Select>\n    </>\n  )\n}\n\nexport const SelectField = ({\n  dap,\n  onChangeField,\n  refresh,\n  textClass,\n  textStyle,\n  size,\n}: {\n  dap: Dap\n  onChangeField: (field: Dap) => void\n  refresh?: boolean\n  textClass?: string\n  textStyle?: any\n  size?: \"small\" | \"medium\"\n}) => {\n  const [defaultOption] = useState(getDefaultOptionOfSelect(dap))\n  //const inputRef = React.useRef(null)\n  //const [focus, setFocus] = useState(false)\n  const [value, setValue] = useState(defaultOption ? [defaultOption] : [])\n  const { createNewValueForProperty, refreshCollection } = useContext(\n    FormSubmissionContext\n  )\n\n  useEffect(() => {\n    const x = getDefaultOptionOfSelect(dap)\n    print(\"here change!\", x)\n    setValue(x ? [x] : [])\n  }, [dap])\n  return (\n    <>\n      <Autocomplete\n        multiple\n        openOnFocus\n        value={value}\n        options={dap.property.options || []}\n        getOptionLabel={(option) => option.value}\n        size={size}\n        blurOnSelect\n        renderOption={(option) => {\n          if (option.type == \"create\")\n            return (\n              <div>\n                <span style={{ marginRight: \"2px\" }}>Create</span>\n                <Chip\n                  label={option.value}\n                  style={{ backgroundColor: getChipColor(option) }}\n                />\n              </div>\n            )\n          return (\n            <Chip\n              label={option.value}\n              style={{ backgroundColor: getChipColor(option) }}\n            />\n          )\n        }}\n        renderTags={(tagValue, getTagProps) =>\n          tagValue.map((option, index) => {\n            const { key, ...tagProps } = getTagProps({ index })\n            return (\n              <Chip\n                key={key}\n                data-tag-index={tagProps[\"data-tag-index\"]}\n                label={option.value}\n                style={{\n                  backgroundColor: getChipColor(option),\n                }}\n              />\n            )\n          })\n        }\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params)\n\n          // Suggest the creation of a new value\n          if (\n            params.inputValue !== \"\" &&\n            !(filtered.length == 1 && filtered[0].value == params.inputValue)\n          ) {\n            filtered.push({\n              type: \"create\",\n              value: pass(params.inputValue),\n              color: randomNotionColor(),\n            })\n          }\n\n          return filtered\n        }}\n        style={{}}\n        onChange={async (\n          ev,\n          options,\n          reason:\n            | \"create-option\"\n            | \"select-option\"\n            | \"remove-option\"\n            | \"blur\"\n            | \"clear\"\n        ) => {\n          console.log(\"render property\", options, reason)\n          //check need to create an option\n          print(dap, options, \"\\x1b[43m -- dap \\x1b[0m\")\n          let newOpt = null\n          const opts: any[] = options.map((opt) => {\n            if (opt.type == \"create\") {\n              newOpt = createNewValueForProperty(\n                dap.property.id,\n                opt.value,\n                opt.color\n              )\n              return newOpt\n            }\n            return opt\n          })\n\n          print(opts, \"\\x1b[43m -- opts \\x1b[0m\")\n          let selectedId\n          if (opts.length == 0) {\n            selectedId = \"\"\n            setValue([])\n          } else {\n            selectedId = opts[opts.length - 1].id\n            setValue([opts[opts.length - 1]])\n          }\n          onChangeField({\n            ...dap,\n            options: {\n              defaultSelectId: selectedId,\n            },\n            property: {\n              ...dap.property,\n              options: [\n                ...(dap.property.options || []),\n                ...(newOpt ? [newOpt] : []),\n              ],\n            },\n          })\n        }}\n        renderInput={(params) => (\n          <TextField\n            onMouseDown={(ev) => {\n              /*print(\"ev\", focus)\n              if (focus) {\n                print(\"loose focus\", inputRef.current)\n                inputRef.current.blur()\n                setFocus(false)\n                return params.inputProps.onBlur(ev)\n                //setFocus(false)\n              } else {\n                print(\"focus!!\")\n                setFocus(true)\n                return params.inputProps.onFocus(ev)\n              }\n              */\n              if (ev.target?.classList?.contains(\"MuiSvgIcon-root\")) return\n              return params.inputProps.onMouseDown(ev)\n            }}\n            placeholder={value.length == 0 ? \"Empty\" : \"\"}\n            className={textClass || undefined}\n            style={textStyle || {}}\n            {...params}\n            /*inputRef={inputRef}\n            inputProps={{\n              ...params.inputProps,\n              onFocus: (...args) => {\n                print(\"here focs\")\n                setFocus(true)\n                return params.inputProps.onFocus(...args)\n              },\n              onBlur: (...args) => {\n                print(\"here blur\")\n                setFocus(false)\n                return params.inputProps.onBlur(...args)\n              },\n            }}*/\n            variant=\"outlined\"\n          />\n        )}\n      />\n    </>\n  )\n}\n\nfunction getDefaultOptionsOfMultiSelect(dap: Dap) {\n  if (!dap.options.defaultSelectIds || !dap.property.options) return []\n  let ids = {}\n  dap.options.defaultSelectIds.forEach((id) => (ids[id] = true))\n  let xs = dap.property.options.filter((opt) => ids[opt.id])\n  return xs\n}\nfunction pass(str: string) {\n  return str.replace(/,/g, \" \")\n}\n\nexport const MultiSelectField = ({\n  dap,\n  onChangeField,\n  refresh,\n  textClass,\n  textStyle,\n  size,\n}: {\n  dap: Dap\n  onChangeField: (field: Dap) => void\n  refresh?: boolean\n  textClass?: string\n  textStyle?: any\n  size?: \"normal\" | \"small\"\n}) => {\n  const elRef = React.useRef(null)\n  const [value, setValue] = useState(getDefaultOptionsOfMultiSelect(dap))\n  const { createNewValueForProperty, refreshCollection } = useContext(\n    FormSubmissionContext\n  )\n  const [focus, setFocus] = useState(false)\n\n  useEffect(() => {\n    const x = getDefaultOptionsOfMultiSelect(dap)\n    print(\"optimistic, rerender here\", refresh, dap, value, x)\n    setValue(x)\n  }, [dap])\n\n  return (\n    <>\n      <Autocomplete\n        multiple\n        value={value}\n        size={size}\n        openOnFocus\n        disableCloseOnSelect={true}\n        options={dap.property.options || []}\n        getOptionLabel={(option) => option.value}\n        style={{}}\n        renderOption={(option) => {\n          if (option.type == \"create\")\n            return (\n              <div>\n                <span style={{ marginRight: \"2px\" }}>Create</span>\n                <Chip\n                  label={option.value}\n                  style={{ backgroundColor: getChipColor(option) }}\n                />\n              </div>\n            )\n          return (\n            <Chip\n              label={option.value}\n              style={{ backgroundColor: getChipColor(option) }}\n            />\n          )\n        }}\n        onChange={(\n          ev,\n          options,\n          reason:\n            | \"create-option\"\n            | \"select-option\"\n            | \"remove-option\"\n            | \"blur\"\n            | \"clear\"\n        ) => {\n          let newOpt = null\n          const opts: any[] = options.map((opt) => {\n            if (opt.type == \"create\") {\n              newOpt = createNewValueForProperty(\n                dap.property.id,\n                opt.value,\n                opt.color\n              )\n              return newOpt\n            }\n            return opt\n          })\n          setValue(opts)\n          //optimistically update field (add new option before sync on server)\n          onChangeField({\n            ...dap,\n            options: {\n              defaultSelectIds: opts.map((opt) => opt.id),\n            },\n            property: {\n              ...dap.property,\n              options: [\n                ...(dap.property.options || []),\n                ...(newOpt ? [newOpt] : []),\n              ],\n            },\n          })\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params)\n\n          // Suggest the creation of a new value\n          if (\n            params.inputValue !== \"\" &&\n            !(filtered.length == 1 && filtered[0].value == params.inputValue)\n          ) {\n            filtered.push({\n              type: \"create\",\n              value: pass(params.inputValue),\n              color: randomNotionColor(),\n            })\n          }\n\n          return filtered\n        }}\n        limitTags={3}\n        renderTags={(tagValue, getTagProps) =>\n          tagValue.map((option, index) => {\n            const { key, ...tagProps } = getTagProps({ index })\n            return (\n              <Chip\n                key={key}\n                data-tag-index={tagProps[\"data-tag-index\"]}\n                label={option.value}\n                style={{\n                  backgroundColor: getChipColor(option),\n                  marginLeft: \"2px\",\n                  marginTop: \"2px\",\n                }}\n              />\n            )\n          })\n        }\n        renderInput={(params) => (\n          <TextField\n            onMouseDown={(ev) => {\n              if ([...(ev.target?.classList || [])].includes(\"MuiSvgIcon-root\"))\n                return\n              return params.inputProps.onMouseDown(ev)\n            }}\n            /*\n            //inputRef={elRef}\n            onMouseDown={(...args) => {\n              if (focus == true) {\n                print(\"BLUR!!\", elRef, params)\n                elRef.current.blur()\n                setFocus(false)\n                params.inputProps.ref.current.blur()\n              }\n              params.inputProps.onMouseDown(...args)\n            }}*/\n            placeholder={value.length == 0 ? \"Empty\" : \"\"}\n            className={textClass || undefined}\n            style={textStyle || {}}\n            {...params}\n            /*inputProps={{\n              ...params.inputProps,\n              onFocus: (...args) => {\n                setFocus(true)\n                print(\"focus\")\n                params.inputProps.onFocus(...args)\n              },\n              onBlur: (...args) => {\n                setFocus(false)\n                print(\"blur\")\n                params.inputProps.onBlur(...args)\n              },\n            }}*/\n            variant=\"outlined\"\n          />\n        )}\n      />\n    </>\n  )\n}\n\nfunction getDefaultOptionsOfRelation(\n  field: Dap,\n  map: Record<string, CollectionPage>\n) {\n  if (!field.options.defaultSelectIds) return []\n  let xs = []\n  field.options.defaultSelectIds.forEach((id) => {\n    xs.push(map[id])\n  })\n  return xs\n}\n\nconst RelationOption = ({ name, icon }: { name: string; icon: string }) => {\n  return <div>{name}</div>\n}\n\nconst toNotionImageUrl = (url: string) => {\n  return `https://notion.so/image/${encodeURIComponent(\n    url.startsWith(\"/image\") ? `https://notion.so${url}` : url\n  )}`\n}\n\nconst toPageImageUrl = (url: string, pageId: string, userId: string) => {\n  return `${toNotionImageUrl(\n    url\n  )}?table=block&id=${pageId}&userId=${userId}&cache=v2`\n}\n\nconst PageIcon = ({\n  icon,\n  pageId,\n  userId,\n}: {\n  icon: string | null\n  pageId: string\n  userId: string\n}) => {\n  if (!icon)\n    return (\n      <div style={{ width: \"27px\" }}>\n        <NotionPageIcon />\n      </div>\n    )\n  return (\n    <div style={{ marginRight: \"4px\", display: \"flex\", alignItems: \"center\" }}>\n      {icon.startsWith(\"http\") ? (\n        <>\n          {\n            <img\n              src={toPageImageUrl(icon, pageId, userId)}\n              height=\"20px\"\n              width=\"20px\"\n            />\n          }\n        </>\n      ) : (\n        <>{icon}</>\n      )}\n    </div>\n  )\n}\n\nexport const SelectedPageOption = ({\n  name,\n  icon,\n  iconComp,\n  userId,\n  pageId,\n  className,\n}: {\n  name: string\n  icon?: any\n  iconComp?: any\n  pageId?: string\n  userId?: string\n  className?: string\n}) => {\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n        }}\n      >\n        {(iconComp && iconComp) || (\n          <PageIcon icon={icon} pageId={pageId} userId={userId} />\n        )}\n        <div className={className || \"notionPage\"}>{name}</div>\n      </div>\n    </>\n  )\n}\n\nexport const RelationField = ({\n  dap,\n  onChangeOptions,\n  textClass,\n  textStyle,\n  size,\n}: {\n  dap: Dap\n  onChangeOptions\n  textClass?: string\n  textStyle?: any\n  size?: \"normal\" | \"small\"\n}) => {\n  const [open, setOpen] = React.useState(false)\n  const [active, setActive] = useState(false)\n  const {\n    createNewPageInCollection,\n    upsertCachedCollectionPage,\n    getCachedCollectionPages,\n    spaceId,\n  } = useContext(FormSubmissionContext)\n  const [value, setValue] = useState([])\n  const [focus, setFocus] = useState(false)\n  const [firstOpen, setFirstOpen] = useState(true)\n  const [options, setOptions] = React.useState<CollectionPage[]>([])\n  const [inputValue, setInputValue] = useState(\"\")\n  const loading = open && active\n  const { client } = useContext(DataContext)\n  const updateOptions = async (fetchedPages: CollectionPage[]) => {\n    const pagesMap = await getCachedCollectionPages(dap.property.collection_id)\n    //print(\"COLLECTION FIELDS\", pagesMap)\n    const opts = []\n    Object.keys(pagesMap).forEach((id) => {\n      opts.push(pagesMap[id])\n    })\n    fetchedPages.forEach((e) => {\n      if (!(e.id in pagesMap)) {\n        opts.push(e)\n      }\n      upsertCachedCollectionPage(e, dap.property.collection_id)\n    })\n    print(\"got1\", fetchedPages)\n    print(\"got\", opts)\n    //add 100maps\n    setOptions(opts)\n  }\n\n  const searchCollectionPages: (\n    v: string\n  ) => Promise<CollectionPage[]> = useMemo(\n    () =>\n      throttle(async function (v) {\n        const x = await client.searchCollectionPages(\n          v,\n          dap.property.collection_id,\n          spaceId\n        )\n        return x\n      }, 500),\n    []\n  ) as any\n\n  /*useEffect(() => {\n    if (collection) {\n      setInputValue(collection.name[0][0])\n    }\n  }, [collection])*/\n\n  useEffect(() => {\n    setFocus(false)\n    setActive(true)\n    ;(async () => {\n      const x: CollectionPage[] | undefined = await searchCollectionPages(\n        inputValue\n      )\n      print(\"received2\", x)\n      //print(`result... '${inputValue}'`, x)\n      if (x) {\n        updateOptions(x)\n        setActive(false)\n      }\n    })()\n  }, [inputValue, focus])\n\n  useEffect(() => {\n    ;(async () => {\n      print(\"uo HAVE\", dap)\n      const x = getDefaultOptionsOfRelation(\n        dap,\n        await getCachedCollectionPages(dap.property.collection_id)\n      )\n      print(\"uo DEFAULT\", x)\n      setValue(x)\n    })()\n  }, [dap])\n\n  return (\n    <>\n      <Autocomplete\n        multiple\n        value={value}\n        size={size}\n        open={open}\n        onOpen={() => {\n          if (firstOpen == true) {\n            setFirstOpen(false)\n            ;(async () => {\n              print(\"FIRST OPEN\")\n              const d = await getCachedCollectionPages(\n                dap.property.collection_id\n              )\n              print(\"REEV\", d)\n              const options = Object.keys(d).map((id) => d[id])\n              print(\"OPTO\", options)\n              setOptions(options)\n            })()\n          }\n          setOpen(true)\n        }}\n        inputValue={inputValue}\n        onInputChange={(ev, value) => setInputValue(value)}\n        openOnFocus={true}\n        onFocus={() => {\n          setFocus(true)\n        }}\n        onClose={() => {\n          setOpen(false)\n        }}\n        loading={loading}\n        disableCloseOnSelect={true}\n        options={options || []}\n        getOptionLabel={(option) => option.name}\n        style={{}}\n        renderOption={(option) => {\n          if (option.type == \"create\")\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div>\n                  <span style={{ marginRight: \"8px\" }}>Create</span>\n                </div>\n                <SelectedPageOption\n                  userId={client.user.id}\n                  pageId={option.id}\n                  icon={option.icon}\n                  name={option.name}\n                />\n              </div>\n            )\n          return (\n            <SelectedPageOption\n              userId={client.user.id}\n              pageId={option.id}\n              icon={option.icon}\n              name={option.name}\n            />\n          )\n        }}\n        onChange={(\n          ev,\n          options,\n          reason:\n            | \"create-option\"\n            | \"select-option\"\n            | \"remove-option\"\n            | \"blur\"\n            | \"clear\"\n        ) => {\n          let newOpt = null\n          const opts: any[] = options.map((opt) => {\n            if (opt.type == \"create\") {\n              newOpt = createNewPageInCollection(\n                opt.name,\n                dap.property.collection_id\n              )\n              print(\"NEW OPT\", newOpt)\n              return newOpt\n            }\n            return opt\n          })\n          print(\"uo UPDAED\", opts)\n          setValue(opts)\n          //optimistically update field (add new option before sync on server)\n          onChangeOptions({ defaultSelectIds: opts.map((opt) => opt.id) })\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params)\n\n          // Suggest the creation of a new value\n          if (\n            params.inputValue !== \"\" &&\n            !(\n              filtered.length == 1 &&\n              filtered[0].name.toLowerCase() == params.inputValue.toLowerCase()\n            )\n          ) {\n            filtered.push({\n              type: \"create\",\n              name: params.inputValue,\n              //value: pass(params.inputValue),\n              //color: randomNotionColor(),\n            })\n          }\n\n          return filtered\n        }}\n        limitTags={3}\n        renderTags={(tagValue, getTagProps) =>\n          tagValue.map((option, index) => {\n            const { key, ...tagProps } = getTagProps({ index })\n            return (\n              <div\n                data-tag-index={tagProps[\"data-tag-index\"]}\n                style={{ marginRight: \"8px\" }}\n                key={key}\n              >\n                {option && (\n                  <SelectedPageOption\n                    userId={client.user.id}\n                    pageId={option.id}\n                    icon={option.icon}\n                    name={option.name}\n                  />\n                )}\n              </div>\n            )\n          })\n        }\n        renderInput={(params) => (\n          <TextField\n            onMouseDown={(ev) => {\n              if ([...(ev.target?.classList || [])].includes(\"MuiSvgIcon-root\"))\n                return\n              return params.inputProps.onMouseDown(ev)\n            }}\n            /*\n            //inputRef={elRef}\n            onMouseDown={(...args) => {\n              if (focus == true) {\n                print(\"BLUR!!\", elRef, params)\n                elRef.current.blur()\n                setFocus(false)\n                params.inputProps.ref.current.blur()\n              }\n              params.inputProps.onMouseDown(...args)\n            }}*/\n            placeholder={value.length == 0 ? \"Empty\" : \"\"}\n            className={textClass || undefined}\n            style={textStyle || {}}\n            {...params}\n            /*inputProps={{\n              ...params.inputProps,\n              onFocus: (...args) => {\n                setFocus(true)\n                print(\"focus\")\n                params.inputProps.onFocus(...args)\n              },\n              onBlur: (...args) => {\n                setFocus(false)\n                print(\"blur\")\n                params.inputProps.onBlur(...args)\n              },\n            }}*/\n            variant=\"outlined\"\n          />\n        )}\n      />\n    </>\n  )\n}\nconst FieldWrapper = ({\n  label,\n  propertyType,\n  children,\n  ...bprops\n}: { label: string; propertyType?: string; children } & BoxProps) => {\n  return (\n    <Box {...bprops}>\n      <Boxfc mb={0}>\n        <Boxf>\n          <Boxf mb={0.1}>\n            <Box mr={0.5}>\n              {propertyType in dataTypeIcon ? dataTypeIcon[propertyType] : null}\n            </Box>\n            <Txt mb={0.1} style={{ textTransform: \"capitalize\" }}>\n              {\" \"}\n              {label}\n            </Txt>\n          </Boxf>\n        </Boxf>\n        <Boxfc width=\"100%\">{children}</Boxfc>\n      </Boxfc>\n    </Box>\n  )\n}\n\nconst CustomDisplayDataValue = ({ dap }: { dap: Dap }) => {\n  const option = useMemo(() => getDefaultOptionOfSelect(dap), [dap])\n  const options = useMemo(() => getDefaultOptionsOfMultiSelect(dap), [dap])\n\n  if (typeof dap.options.defaultValue == \"boolean\") {\n    return <>{dap.options.defaultValue ? \"true\" : \"false\"}</>\n  }\n  if (dap.options.defaultValue) {\n    return (\n      <Txt style={{ fontStyle: \"italic\" }}>\n        {(dap.property?.type == \"url\" &&\n          dap.options.defaultValue.replace(/(^\\w+:|^)\\/\\/(?:www.)?/, \"\")) ||\n          dap.options.defaultValue}\n      </Txt>\n    )\n  }\n  if (dap.options.defaultSelectId) {\n    return (\n      <>\n        <Chip\n          label={option.value}\n          style={{\n            backgroundColor: getChipColor(option),\n            fontSize: \"11px\",\n            color: \"rgba(0, 0, 0, 0.54)\",\n          }}\n        />\n      </>\n    )\n  }\n  if (dap.options.defaultSelectIds) {\n    return (\n      <div style={{ overflow: \"hidden\" }}>\n        {options.map((option) => (\n          <Chip\n            key={option.id}\n            label={option.value}\n            style={{\n              marginRight: \"4px\",\n              marginTop: \"2px\",\n              backgroundColor: getChipColor(option),\n              fontSize: \"11px\",\n              color: \"rgba(0, 0, 0, 0.54)\",\n            }}\n          />\n        ))}\n      </div>\n    )\n  }\n  return <Txt color=\"#9e9e9e\">(empty)</Txt>\n}\n\nconst LockedRow = ({\n  label,\n  propertyType,\n  children,\n  ...bprops\n}: { label: string; propertyType?: string; children } & BoxProps) => {\n  return (\n    <Boxf color=\"text.secondary\" align=\"center\" {...bprops}>\n      <FieldWrapper label={label} propertyType={propertyType}>\n        <></>\n      </FieldWrapper>\n      <Txt ml={1}>•</Txt>\n      <Box\n        ml={1}\n        style={{\n          fontStyle: \"italic\",\n          overflow: \"hidden\",\n          whiteSpace: \"nowrap\",\n          textOverflow: \"ellipsis\",\n          wordBreak: \"break-all\",\n          wordWrap: \"break-word\",\n          fontSize: \"11px\",\n        }}\n      >\n        {children}\n      </Box>\n    </Boxf>\n  )\n}\n\nexport const HeaderViewer = ({\n  image,\n  lockedFields,\n  wantImage = true,\n}: {\n  image: string | null\n  lockedFields: Dap[]\n  wantImage?: boolean\n}) => {\n  return (\n    <Boxfc color=\"text.secondary\" flex={1} width=\"100%\">\n      <Boxfc align=\"center\" pl={1.5} pr={2.0} justify=\"center\">\n        <div>\n          {(image != null || wantImage == true) && (\n            <img\n              src={image || \"/assets/icon.png\"}\n              style={{\n                maxWidth: \"180px\",\n                height: \"90px\",\n                objectFit: \"cover\",\n                backgroundColor: \"transparent\",\n              }}\n            />\n          )}\n        </div>\n      </Boxfc>\n      <Box>\n        {lockedFields.slice(0, !image ? 3 : 2).map((dap) => (\n          <LockedRow\n            key={dap.key}\n            maxWidth={\"300px\"}\n            align=\"center\"\n            mt={1}\n            label={dap.property.name}\n            propertyType={dap.property.type}\n          >\n            <CustomDisplayDataValue dap={dap} />\n          </LockedRow>\n        ))}\n      </Box>\n      {/*<hr className=\"headeViewerHr\" />*/}\n      {/*<div style={{position:'relative',\n        backgroundImage:'linear-gradient(to bottom, transparent, black)',\n          bottom:0,\n          left:0,\n          width:'100%',\n          height:'10px'\n        }}></div>*/}\n    </Boxfc>\n  )\n}\n\nexport const Field = ({\n  onChangeOptions,\n  onChangeField,\n  dap,\n  metadatas,\n  refresh,\n}: {\n  onChangeOptions: (options: any) => void\n  onChangeField: (field: Dap) => void\n  dap: Dap\n  metadatas\n  refresh: boolean\n}) => {\n  if (dap.property.type == (\"image\" as any)) {\n    return null\n  }\n  if (dap.fieldOptions.locked == true) return null\n  /* return <Boxf color=\"text.secondary\" maxWidth=\"300px\" align=\"center\">\n      <FieldWrapper label={dap.property.name} propertyType={dap.property.type}><></></FieldWrapper>\n      <Txt ml={1}>•</Txt>\n      <Box  ml={1} style={{fontStyle:'italic',\n    \"overflow\":\"hidden\",\"whiteSpace\":\"nowrap\",\"textOverflow\":\"ellipsis\",\"wordBreak\":\"break-all\",\"wordWrap\":\"break-word\",\n    fontSize:'11px',\n    }}>\n    <CustomDisplayDataValue dap={dap}/>\n    </Box>\n    </Boxf>\n    */\n  if (dap.property.type == \"checkbox\") {\n    return (\n      <Box mb={1}>\n        <TypeCheckboxField\n          refresh={refresh}\n          defaultValue={\n            (typeof dap.options?.defaultValue == \"boolean\" &&\n              dap.options?.defaultValue) ||\n            false\n          }\n          propertyName={dap.property.name || \"empty\"}\n          onChangeValue={(defaultValue) => onChangeOptions({ defaultValue })}\n        />\n      </Box>\n    )\n  }\n  return (\n    <Box mb={1}>\n      <FieldWrapper label={dap.property.name} propertyType={dap.property.type}>\n        {() => {\n          switch (dap.property.type) {\n            case \"url\":\n            case \"title\":\n            case \"text\":\n            case \"number\":\n              return (\n                <TypeTextField\n                  isNumber={dap.property.type == \"number\"}\n                  defaultValue={dap.options.defaultValue}\n                  onChangeValue={(defaultValue) =>\n                    onChangeOptions({ defaultValue })\n                  }\n                  textClass=\"fieldText\"\n                  name={dap.property?.name || \"Untitled\"}\n                />\n              )\n            case \"select\":\n              return (\n                <SelectField\n                  dap={dap}\n                  textClass=\"fieldSelect\"\n                  onChangeField={onChangeField}\n                />\n              )\n            case \"multi_select\":\n              return (\n                <MultiSelectField\n                  onChangeField={onChangeField}\n                  textClass=\"fieldSelect\"\n                  dap={dap}\n                />\n              )\n            case \"relation\":\n              return (\n                <RelationField\n                  onChangeOptions={onChangeOptions}\n                  textClass=\"fieldSelect\"\n                  dap={dap}\n                />\n              )\n\n            default:\n              return <>property's type not implemented</>\n          }\n        }}\n      </FieldWrapper>\n    </Box>\n  )\n}\n","import React, { useState, useEffect, useCallback, useRef } from \"react\"\n// prettier-ignore\nimport {\n  Box, Boxfc, Boxf, BoxPaper, Hidden,  Content,BoxProps,Chip,\n  BoxCont, BoxVert, BoxHori, TextField,\n  H4, H1, H3, H2,Txt,\n  Button,Touchable, Switch, Divider,Avatar,\n  Table, TableBody, TableCell, TableContainer, TableHead,TableRow, \n  Opener,useLoadState\n} from \"../shared/MaterialUI\";\nimport {\n  FORM_LIST_KEY,\n  FORM_KEY_PREFIX,\n  FormData,\n  Dap,\n  ModifiedDapProperty,\n  DapOptionsSelectedDataTypes,\n  APP_NAME,\n  FormListItem,\n  APP_VERSION,\n  APP_VERSION_FULL,\n  WHATS_NEW_LINK,\n  OptionParams,\n} from \"../shared/appConfig\"\nimport {\n  DragHandleIcon,\n  DeleteIcon,\n  PlusIcon,\n  DuplicateIcon,\n} from \"../shared/icons\"\nimport { sleep, print, promisify, makeid, arrayMove } from \"../shared/utils\"\nimport { Field, HeaderViewer } from \"../components/Field\"\nimport {\n  RefreshCollectionResult,\n  refreshCollection,\n  getClient,\n  ErrorGetClient,\n  applyRefreshCollection,\n  saveFormData,\n  getFormData,\n} from \"../shared/appUtils\"\nimport { DummyNotionClient } from \"../shared/notionlib/notion\"\nimport { Router, goTo } from \"../components/dummyRouter\"\nimport { EditForm as EditFormPage } from \"../pages/EditForm\"\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableHandle,\n} from \"react-sortable-hoc\"\nimport { DataContext } from \"../App\"\nconst ArrowBackIcon = require(\"@material-ui/icons/ArrowBack\").default\nconst CloseIcon = require(\"@material-ui/icons/Close\").default\nconst KeyboardArrowLeftIcon = require(\"@material-ui/icons/KeyboardArrowLeft\")\n  .default\nconst IconButton = require(\"@material-ui/core/IconButton\").default\nconst InputLabel = require(\"@material-ui/core/InputLabel\").default\nconst Select = require(\"@material-ui/core/Select\").default\nconst CircularProgress = require(\"@material-ui/core/CircularProgress\").default\nconst SettingsIcon = require(\"@material-ui/icons/SettingsOutlined\").default\nconst SettingsOutlinedIcon = require(\"@material-ui/icons/SettingsOutlined\")\n  .default\nconst EditIcon = require(\"@material-ui/icons/EditOutlined\").default\nconst InfoIcon = require(\"@material-ui/icons/InfoOutlined\").default\nconst List = require(\"@material-ui/core/List\").default\nconst ListItem = require(\"@material-ui/core/ListItem\").default\nconst ListItemText = require(\"@material-ui/core/ListItemText\").default\nconst Skeleton = require(\"@material-ui/lab/Skeleton\").default\n\nconst DialogTitle = require(\"@material-ui/core/DialogTitle\").default\nconst Dialog = require(\"@material-ui/core/Dialog\").default\n\nconst Menu = require(\"@material-ui/core/Menu\").default\nconst MenuItem = require(\"@material-ui/core/MenuItem\").default\nconst uuid = require(\"uuid/v4\")\n\nconst InfoHeader = ({ ...bprops }: {} & BoxProps) => {\n  return (\n    <Box {...bprops}>\n      <Boxfc justify=\"center\" align=\"center\">\n        <Box>\n          <img src=\"/assets/icon.png\" height={64} width={64} />\n        </Box>\n        <H4>{APP_NAME}</H4>\n        <Txt>version {APP_VERSION_FULL}</Txt>\n        <Boxfc>\n          <Boxfc mt={2}>\n            <Button\n              variant=\"text\"\n              className=\"linkButton\"\n              onClick={() => {\n                window.open(\n                  \"https://www.notion.so/Save-To-Notion-Changelog-b85cff00e8c24b10a893a6aa18a887fa\",\n                  \"_blank\"\n                )\n              }}\n            >\n              ✨ changelog\n            </Button>\n\n            <Button\n              variant=\"text\"\n              className=\"linkButton\"\n              onClick={() => {\n                window.open(\n                  \"https://www.notion.so/Save-To-Notion-Tutorials-a8604da6e2864a538efcc777a330266c\",\n                  \"_blank\"\n                )\n              }}\n            >\n              👨‍🎓 tutorials\n            </Button>\n          </Boxfc>\n\n          <Button\n            variant=\"text\"\n            className=\"linkButton\"\n            onClick={() => {\n              window.open(\"https://www.buymeacoffee.com/amibane\", \"_blank\")\n            }}\n          >\n            ☕ donate\n          </Button>\n\n          <Button\n            variant=\"text\"\n            className=\"linkButton\"\n            onClick={() => {\n              window.open(\"mailto:anis.craheix@gmail.com\", \"_blank\")\n            }}\n          >\n            📩 contact\n          </Button>\n        </Boxfc>\n      </Boxfc>\n    </Box>\n  )\n}\nfunction InfoDialog(props) {\n  const { onClose, selectedValue, open } = props\n  return (\n    <Dialog fullScreen onClose={onClose} open={open}>\n      <Box style={{ position: \"absolute\", right: 10, top: 5 }}>\n        <>\n          <IconButton onClick={onClose}>\n            <CloseIcon size=\"small\" />\n          </IconButton>\n        </>\n      </Box>\n      <Boxfc height=\"100%\" justify=\"center\">\n        <InfoHeader />\n      </Boxfc>\n    </Dialog>\n  )\n}\n\nconst LayoutHeader = ({\n  onClickOpenOption,\n  onClickGoBack,\n  canGoBack,\n  prevPageName,\n  rightIcon,\n  hideAppTitle,\n}: {\n  onClickOpenOption\n  onClickGoBack\n  canGoBack: boolean\n  prevPageName: string\n  rightIcon: RightIcon\n  hideAppTitle?: boolean\n}) => {\n  return (\n    <>\n      <Box p={0.5} pt={1} mb={1} height=\"48px\">\n        {!canGoBack ? (\n          <>\n            {(hideAppTitle == true && <></>) || (\n              <Boxf justify=\"center\" pt={1.3} align=\"center\">\n                <H4>{APP_NAME} </H4>\n              </Boxf>\n            )}\n          </>\n        ) : (\n          <>\n            <Box pt={0.8} pl={2}>\n              <Button\n                variant=\"text\"\n                onClick={onClickGoBack}\n                startIcon={canGoBack && <KeyboardArrowLeftIcon />}\n                disabled={!canGoBack}\n              >\n                {prevPageName}\n              </Button>\n            </Box>\n          </>\n        )}\n      </Box>\n      <Box style={{ position: \"absolute\", right: 10, top: 5 }}>\n        {rightIcon == \"info\" ? (\n          <Opener>\n            {(modal) => (\n              <>\n                <IconButton onClick={modal.handleOpen}>\n                  <InfoIcon size=\"small\" />\n                </IconButton>\n                <InfoDialog open={modal.isOpen} onClose={modal.handleClose} />\n              </>\n            )}\n          </Opener>\n        ) : rightIcon == \"settings\" ? (\n          <IconButton onClick={onClickOpenOption}>\n            <SettingsIcon size=\"small\" />\n          </IconButton>\n        ) : (\n          <></>\n        )}\n      </Box>\n    </>\n  )\n}\ntype RightIcon = \"settings\" | \"info\" | \"none\"\nexport type LayoutProps = {\n  canGoBack?: boolean\n  onClickGoBack?: () => void\n  prevPageName?: string\n  rightIcon?: RightIcon\n  optionParams?: OptionParams\n  minWidth?: string\n  minHeight?: string\n  hideAppTitle?: boolean\n}\n\nexport const Layout = ({\n  children,\n  canGoBack = false,\n  optionParams = null,\n  onClickGoBack = null,\n  prevPageName = \"\",\n  minWidth,\n  minHeight,\n  rightIcon,\n  hideAppTitle,\n}: LayoutProps & { children: any }) => {\n  const { openOptionsPage } = React.useContext(DataContext)\n  return (\n    <Boxfc minWidth={minWidth || \"380px\"} minHeight={minHeight} pb={2}>\n      <LayoutHeader\n        hideAppTitle={hideAppTitle}\n        prevPageName={prevPageName}\n        onClickOpenOption={() => openOptionsPage(optionParams)}\n        onClickGoBack={onClickGoBack}\n        canGoBack={canGoBack}\n        rightIcon={rightIcon || \"none\"}\n      />\n      <Boxfc flex={1} justify=\"center\">\n        {children}\n      </Boxfc>\n    </Boxfc>\n  )\n}\n","import React, { useState, useEffect, useCallback, useRef } from \"react\"\r\n// prettier-ignore\r\nimport {\r\n  Box, Boxfc, Boxf, BoxPaper, Hidden,  Content,BoxProps,Chip,\r\n  BoxCont, BoxVert, BoxHori, TextField,\r\n  H4, H1, H3, H2,Txt,\r\n  Button,Touchable, Switch, Divider,Avatar,\r\n  Table, TableBody, TableCell, TableContainer, TableHead,TableRow, \r\n  Opener,useLoadState\r\n} from \"../shared/MaterialUI\";\r\nimport {\r\n  FORM_LIST_KEY,\r\n  FORM_KEY_PREFIX,\r\n  FormData,\r\n  Dap,\r\n  ModifiedDapProperty,\r\n  DapOptionsSelectedDataTypes,\r\n  APP_NAME,\r\n  FormListItem,\r\n  APP_VERSION,\r\n  APP_VERSION_FULL,\r\n  WHATS_NEW_LINK,\r\n  OptionParams,\r\n} from \"../shared/appConfig\"\r\nimport {\r\n  DragHandleIcon,\r\n  DeleteIcon,\r\n  PlusIcon,\r\n  DuplicateIcon,\r\n} from \"../shared/icons\"\r\nimport { sleep, print, promisify, makeid, arrayMove } from \"../shared/utils\"\r\nimport { Field, HeaderViewer } from \"../components/Field\"\r\nimport {\r\n  RefreshCollectionResult,\r\n  refreshCollection,\r\n  getClient,\r\n  ErrorGetClient,\r\n  applyRefreshCollection,\r\n  saveFormData,\r\n  getFormData,\r\n} from \"../shared/appUtils\"\r\nimport { DummyNotionClient } from \"../shared/notionlib/notion\"\r\nimport { Router, goTo } from \"../components/dummyRouter\"\r\nimport {\r\n  SortableContainer,\r\n  SortableElement,\r\n  SortableHandle,\r\n} from \"react-sortable-hoc\"\r\nimport { Layout } from \"./Layout\"\r\nconst CircularProgress = require(\"@material-ui/core/CircularProgress\").default\r\n\r\nexport const Loading = ({\r\n  msg = null,\r\n  height = \"300px\",\r\n  minLayoutHeight,\r\n}: {\r\n  msg?: string\r\n  height?: string\r\n  minLayoutHeight?: string\r\n}) => {\r\n  return (\r\n    <Layout minHeight={minLayoutHeight}>\r\n      <Boxfc justify=\"center\" align=\"center\" height={height} px={2} py={0.5}>\r\n        <Box mb={1}>\r\n          <CircularProgress color=\"primary\" size={20} />\r\n        </Box>\r\n        <H4>{msg}</H4>\r\n      </Boxfc>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Error = ({ msg }: { msg?: string }) => {\r\n  return (\r\n    <Layout>\r\n      <Boxfc justify=\"center\" align=\"center\">\r\n        <H3 mb={1} color=\"red\">\r\n          Error\r\n        </H3>\r\n        <H4>{msg}</H4>\r\n      </Boxfc>\r\n    </Layout>\r\n  )\r\n}\r\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  useContext,\n} from \"react\"\n// prettier-ignore\nimport {\n  Box, Boxfc, Boxf, BoxPaper, Hidden,  Content,BoxProps,Chip,\n  BoxCont, BoxVert, BoxHori, TextField,\n  H4, H1, H3, H2,Txt,\n  Button,Touchable, Switch, Divider,Avatar,\n  Table, TableBody, TableCell, TableContainer, TableHead,TableRow, \n  Opener,useLoadState\n} from \"../shared/MaterialUI\";\nimport {\n  FORM_LIST_KEY,\n  FORM_KEY_PREFIX,\n  FormData,\n  Dap,\n  ModifiedDapProperty,\n  DapOptionsSelectedDataTypes,\n  APP_NAME,\n  FormListItem,\n  APP_VERSION,\n  APP_VERSION_FULL,\n  WHATS_NEW_LINK,\n  OptionParams,\n  randomNotionColor,\n} from \"../shared/appConfig\"\nimport {\n  DragHandleIcon,\n  DeleteIcon,\n  PlusIcon,\n  DuplicateIcon,\n} from \"../shared/icons\"\nimport { sleep, print, promisify, makeid, arrayMove } from \"../shared/utils\"\nimport { Field, HeaderViewer, CheckBoxField } from \"../components/Field\"\nimport {\n  RefreshCollectionResult,\n  refreshCollection,\n  getClient,\n  ErrorGetClient,\n  applyRefreshCollection,\n  saveFormData,\n  getFormData,\n  saveCurrentPopupState,\n  resetCurrentPopupState,\n  getCachedCollectionPages,\n  upsertCachedCollectionPage,\n} from \"../shared/appUtils\"\nimport { DummyNotionClient } from \"../shared/notionlib/notion\"\nimport { Router, goTo } from \"../components/dummyRouter\"\nimport { EditForm as EditFormPage } from \"./EditForm\"\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableHandle,\n} from \"react-sortable-hoc\"\nimport { Layout, LayoutProps } from \"../components/Layout\"\nimport { Loading, Error } from \"../components/Reusables\"\nimport { FormSubmissionContext, DataContext } from \"../App\"\nimport { Checkbox } from \"@material-ui/core\"\nimport storage from \"../shared/lib/storage\"\nconst Skeleton = require(\"@material-ui/lab/Skeleton\").default\nconst uuid = require(\"uuid/v4\")\n\nasync function loadImage(\n  url\n): Promise<{ imgUrl: string; width: number; height: number } | null> {\n  var img = new Image()\n  return new Promise((resolve) => {\n    img.addEventListener(\"load\", function () {\n      resolve({\n        imgUrl: url,\n        width: this.naturalWidth,\n        height: this.naturalHeight,\n      })\n    })\n    img.src = url\n  })\n}\n\nconst SuccessView = ({ rowId }: { rowId: string }) => {\n  const [openInDesktop, setOpenInDesktop] = useState(false)\n  function openInNotion() {\n    chrome.tabs.create({\n      url: `${openInDesktop ? \"notion://\" : \"https://\"}notion.so/${rowId}`,\n    })\n    window.close()\n  }\n\n  function onKeyUp(e) {\n    if (e.code == \"Enter\") {\n      openInNotion()\n    }\n  }\n  useEffect(() => {\n    ;(async () => {\n      setOpenInDesktop(await storage.get(\"open-desktop\", false))\n    })()\n  }, [])\n\n  useEffect(() => {\n    document.addEventListener(\"keyup\", onKeyUp)\n\n    return () => {\n      document.removeEventListener(\"keyup\", onKeyUp)\n    }\n  }, [])\n\n  return (\n    <>\n      <Layout hideAppTitle={false}>\n        <Boxfc align=\"center\" justify=\"center\" px={2} py={0.5}>\n          <H3 mb={3} mt={7}>\n            Saved to Notion ✨\n          </H3>\n          <Boxfc justify=\"center\" px={1} pb={2}>\n            <CheckBoxField\n              checkboxClass=\"checkBoxField\"\n              name=\"open in desktop app\"\n              onChange={(v) => {\n                storage.set(\"open-desktop\", v)\n                setOpenInDesktop(v)\n              }}\n              value={openInDesktop}\n              size=\"small\"\n            />\n          </Boxfc>\n\n          <Boxfc width=\"100%\">\n            <Button onClick={() => openInNotion()}>open in Notion</Button>\n          </Boxfc>\n          <Boxfc mt={2} width=\"100%\">\n            <Button onClick={() => window.close()} variant=\"outlined\">\n              close popup\n            </Button>\n          </Boxfc>\n        </Boxfc>\n      </Layout>\n    </>\n  )\n}\n\ntype StateSubmitStatus =\n  | \"before_submit\"\n  | \"waiting_collection_finish_refreshing\"\n  | \"submitting\"\n  | \"error_when_submitting\"\n  | \"success_submit\"\n\nconst FormFields = ({\n  form,\n  onUpdateField,\n  metadatas,\n  refresh,\n  ...bprops\n}: {\n  form: FormData\n  metadatas: { [k: string]: any }\n  refresh: boolean\n  onUpdateField\n} & BoxProps) => {\n  //const [normalFields] = useState(form.daps.filter(v => v.property.type as any != \"image\" && (!v.fieldOptions || (v.fieldOptions && !v.fieldOptions.locked))))\n  print(\"render\", form)\n  return (\n    <Boxfc {...bprops}>\n      {form.daps.map((field) => (\n        <Box key={field.key}>\n          <Field\n            onChangeField={onUpdateField}\n            refresh={refresh}\n            dap={field}\n            metadatas={metadatas}\n            onChangeOptions={(options) => {\n              print(\"option is:\", options)\n              onUpdateField({ ...field, options })\n            }}\n          />\n        </Box>\n      ))}\n    </Boxfc>\n  )\n}\n\nfunction getFrontImage(fields: Dap[]) {\n  const images = fields.flatMap(\n    (v) =>\n      ((v.property.type as any) == \"image\" &&\n        (v.options?.defaultValue as any)?.imgUrl && [v]) ||\n      []\n  )\n  console.log(\"images\", images)\n  images.sort((a, b) => {\n    if (a.property?.id == \"pageFrontImage\") return -1\n    if (b.property?.id == \"pageFrontImage\") return 1\n    return 0\n  })\n  console.log(\"sorted images\", images)\n  return images[0]\n}\n\nfunction getQueryParamsFromUrl(url) {\n  var regex = /[?&]([^=#]+)=([^&#]*)/g,\n    params = {},\n    match\n  while ((match = regex.exec(url))) {\n    params[match[1]] = match[2]\n  }\n  return params\n}\n\nfunction getImage(url: string, image: string | null) {\n  if (url.startsWith(\"https://www.youtube.com\")) {\n    let params = getQueryParamsFromUrl(url)\n    if (image?.includes(params[\"v\"])) return image\n    if (\"v\" in params) {\n      return `https://i.ytimg.com/vi/${params[\"v\"]}/maxresdefault.jpg`\n    }\n  }\n  return image\n}\n\nexport function getmetadata(\n  selectedData: DapOptionsSelectedDataTypes,\n  metadatas\n) {\n  switch (selectedData) {\n    case \"webpageTitle\":\n      return metadatas[\"title\"]\n    case \"webpageUrl\":\n      return metadatas[\"url\"]\n    case \"domainName\":\n      return metadatas[\"domainName\"]\n    case \"webpageDescription\":\n      return metadatas[\"description\"]\n    case \"webpageImage\":\n      return {\n        imgUrl: getImage(metadatas.url, metadatas[\"image\"]),\n        width: null,\n        height: null,\n      }\n    case \"websiteIcon\":\n      return {\n        imgUrl: metadatas[\"icon\"],\n        width: null,\n        height: null,\n      }\n    default:\n      return \"\"\n  }\n}\n\nfunction handleSubmit(\n  form: FormData,\n  setStatus: (status: StateSubmitStatus) => void,\n  setMsgInfo,\n  setRowId: (id: string) => void,\n  currentUrl: string\n): void {\n  setStatus(\"submitting\")\n  var port = chrome.runtime.connect({ name: \"submit_form_to_notion\" })\n  port.postMessage({ type: \"initial_data\", params: { form, currentUrl } })\n  port.onMessage.addListener((x) => {\n    switch (x.type) {\n      case \"submitting\":\n        break\n      case \"error\":\n        setStatus(\"error_when_submitting\")\n        port.disconnect()\n        break\n      case \"success_submit\":\n        //setRowId(x.id.replaceA(\"-\", \"\"))\n        //print(\"got\", x.id.r);\n        //print(\"got\", x.id.replace(/-/g, ''))\n        setRowId(x.id.replace(/-/g, \"\"))\n        setStatus(\"success_submit\")\n        port.disconnect()\n        break\n    }\n  })\n}\n\nexport const TopLayout = ({\n  children,\n  layoutProps = {},\n  metadatas,\n  noMargin = false,\n  lockedFields,\n  image,\n}: {\n  children\n  layoutProps?: LayoutProps\n  metadatas\n  noMargin?: boolean\n  lockedFields?: any[]\n  image?: any\n}) => {\n  return (\n    <>\n      <Layout {...layoutProps}>\n        <Box pr={2.5}>\n          <Boxf mb={2} pl={3.5}>\n            {!metadatas ? (\n              <Boxfc>\n                <Boxfc align=\"center\">\n                  <Skeleton variant=\"rect\" height=\"90px\" width=\"115px\" />\n                </Boxfc>\n                <Boxfc mt={2}>\n                  <Skeleton variant=\"rect\" height=\"14px\" width=\"335px\" />\n                </Boxfc>\n              </Boxfc>\n            ) : (\n              <BoxCont>\n                <Boxf mb={2} flex={1}>\n                  <HeaderViewer\n                    lockedFields={\n                      lockedFields || [\n                        {\n                          key: \"1\",\n                          property: { id: \"xx\", name: \"Title\", type: \"any\" },\n                          options: {\n                            defaultValue: getmetadata(\n                              \"webpageTitle\",\n                              metadatas\n                            ),\n                          },\n                        } as any,\n                        /*{\n                    key: \"2\",\n                    property: { id: \"x2\", name: \"url\", type: \"url\" },\n                    options: { defaultValue: metadatas.url },\n                  } as any,*/\n                      ]\n                    }\n                    image={\n                      image ||\n                      (metadatas.image &&\n                        getmetadata(\"webpageImage\", metadatas).imgUrl) ||\n                      metadatas.icon\n                    }\n                  />\n                </Boxf>\n              </BoxCont>\n            )}\n          </Boxf>\n          <BoxCont ml={noMargin ? 0 : 3.5} mr={0.5}>\n            {children}\n          </BoxCont>\n        </Box>\n      </Layout>\n    </>\n  )\n}\n\nfunction formMergedWithModification(\n  final: FormData,\n  form: FormData,\n  metadatas: Record<string, any>\n): FormData {\n  let fields = []\n  return {\n    ...form,\n    daps: form.daps.map((field) => {\n      const finalField = final.daps.find(\n        (x) => x.property?.id == field.property?.id\n      )\n      //check if keep the same data\n      if (\n        finalField &&\n        field.property.type == finalField.property.type &&\n        field.options.selectedData == finalField.options.selectedData\n      ) {\n        return { ...field, options: finalField.options }\n      }\n      //otherwise return new field, but with metadatas!\n      return {\n        ...field,\n        options: field.options.selectedData\n          ? { defaultValue: getmetadata(field.options.selectedData, metadatas) }\n          : field.options,\n      }\n    }),\n    //runtime parameters\n    needToRefreshTemplate: final.needToRefreshTemplate,\n  }\n}\nexport function useInterval(callback, delay, onUnmount?) {\n  const savedCallback = useRef(null)\n\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current()\n    }\n\n    let id = setInterval(tick, delay)\n    return () => {\n      clearInterval(id)\n      onUnmount && onUnmount()\n    }\n  }, [delay])\n}\n\nexport const FillFormPage = ({\n  form,\n  metadatas,\n  onGoBack,\n  canGoBack,\n  onError,\n  onChangeForm,\n}: {\n  form: FormData\n  canGoBack: boolean\n  onGoBack: () => void\n  metadatas: { [k: string]: any }\n  onError: (errorCode: ErrorGetClient) => void\n  onChangeForm: (x: FormData | ((f: FormData) => FormData)) => void\n}) => {\n  const [status, setStatus] = useState<StateSubmitStatus>(\"before_submit\")\n  const timerSaveData = React.useRef(null)\n  const formdata = React.useRef(null)\n  const [defaultDaps, setDefaultDaps] = useState(form.daps)\n  formdata.current = form\n  const {\n    currentFormHasChanged,\n    setCurrentFormHasChanged,\n    fieldDatas,\n    cleanupFieldDatas,\n    client,\n  } = useContext(DataContext)\n  const finalForm = form\n  const setFinalForm = onChangeForm\n\n  useEffect(() => {\n    setTimeout(() => {\n      ;(async () => {\n        let imgPrms = []\n        const frontImageField = formdata.current.daps.find(\n          (field) =>\n            (field.options?.defaultValue as any)?.imgUrl &&\n            field.property.id == \"pageFrontImage\"\n        )\n        print(\"here\")\n        if (!frontImageField) return\n        setImportantRefreshing(true)\n        print(\"saving\")\n        const img = await loadImage(\n          (frontImageField.options.defaultValue as any).imgUrl\n        )\n        print(\"img\", img)\n        onChangeForm((form) => ({\n          ...form,\n          daps: form.daps.map((field) =>\n            field.property?.id == \"pageFrontImage\"\n              ? ({ ...field, options: { defaultValue: img } } as any)\n              : field\n          ),\n        }))\n        setImportantRefreshing(false)\n      })()\n    }, 200)\n  }, [])\n\n  useEffect(() => {\n    if (timerSaveData.current) clearTimeout(timerSaveData.current)\n    timerSaveData.current = setTimeout(() => {\n      saveCurrentPopupState({\n        pos: \"fillForm\",\n        url: metadatas.url,\n        fieldDatas: form.daps.map((field) => ({\n          key: field.key,\n          options: field.options,\n        })),\n        formId: form.id,\n      })\n      timerSaveData.current = null\n    }, 300)\n  }, [form])\n\n  useInterval(\n    () => {\n      if (status == \"before_submit\") {\n        saveCurrentPopupState({\n          pos: \"fillForm\",\n          url: metadatas.url,\n          fieldDatas: form.daps.map((field) => ({\n            key: field.key,\n            options: field.options,\n          })),\n          formId: form.id,\n        })\n      } else {\n        resetCurrentPopupState()\n      }\n    },\n    1500,\n    () => resetCurrentPopupState()\n  )\n\n  //console.log(\"form\", finalForm)\n  useEffect(() => {\n    if (currentFormHasChanged == false) {\n      print(\"LOAD\", fieldDatas)\n      //console.log(\"LOAD FINAL\", metadatas)\n      setFinalForm({\n        ...form,\n        daps: form.daps.map((field) => {\n          const fieldData = fieldDatas?.find((f) => f.key == field.key)\n          //return { ...field, options: stField?.options || field.options }\n          return {\n            ...field,\n            options:\n              fieldData?.options ||\n              (field.options.selectedData\n                ? {\n                    defaultValue: getmetadata(\n                      field.options.selectedData,\n                      metadatas\n                    ),\n                  }\n                : field.options),\n          }\n        }),\n      })\n      setRefresh(true)\n      setTimeout(() => {\n        setRefresh(false)\n      }, 100)\n\n      if (fieldDatas) cleanupFieldDatas()\n    }\n  }, [])\n  const [needRefreshCollection, setNeedRefreshCollection] = useState(true)\n  const [refresh, setRefresh] = useState(false)\n  const [importantRefreshing, setImportantRefreshing] = useState(false)\n  const [msgInfo, setMsgInfo] = useState(\"\")\n  const [datas, setDatas] = useState({})\n  const [rowId, setRowId] = useState(null)\n  const [imageDap, setImageDap] = useState(null)\n  const [lockedFields, setLockedFields] = useState([])\n\n  useEffect(() => {\n    setLockedFields(\n      form.daps.filter(\n        (v) =>\n          (v.property.type as any) != \"image\" &&\n          v.fieldOptions &&\n          v.fieldOptions.locked\n      )\n    )\n    setImageDap(getFrontImage(form.daps))\n  }, [form])\n\n  useEffect(() => {\n    setLockedFields(\n      form.daps.filter(\n        (v) =>\n          (v.property.type as any) != \"image\" &&\n          v.fieldOptions &&\n          v.fieldOptions.locked\n      )\n    )\n  }, [form])\n\n  useEffect(() => {\n    if (currentFormHasChanged) {\n      //console.log(\"refreshing\")\n      setNeedRefreshCollection(false)\n      ;(async () => {\n        setCurrentFormHasChanged(false)\n        const f = await getFormData(finalForm.id)\n        setFinalForm((final) => {\n          print(\"FINAL>>>\", final)\n          const x = formMergedWithModification(final, f, metadatas)\n          return x\n        })\n      })()\n    } else {\n      if (needRefreshCollection == true) {\n        console.log(\"refreshing collection\")\n        setNeedRefreshCollection(false)\n        handleRefreshCollection()\n      }\n    }\n  }, [needRefreshCollection, currentFormHasChanged])\n\n  const handleRefreshCollection = useCallback(async () => {\n    print(\"getting the client...\")\n    const respGetClient = await getClient()\n    print(\"respGetClient\", respGetClient)\n    if (respGetClient.status == \"error\") {\n      print(respGetClient.errorMsg)\n      onError(respGetClient.errorMsg)\n      return\n    }\n    print(\"refreshing the collection...\", defaultDaps)\n    const resp = await refreshCollection(\n      respGetClient.client,\n      form.collection,\n      defaultDaps,\n      {\n        checkTemplateUpToDate: form.template,\n      }\n    )\n\n    let res = applyRefreshCollection(resp, defaultDaps)\n    print(\"receiving res\", res.collection)\n    print(\"tomodify\", resp.fieldsToModify)\n    if (!res.collection) {\n      //remove the collection from the list\n      //TODO\n      return\n    }\n    //change metadata\n    let xdaps = res.daps.map((e) =>\n      e.options.customCss\n        ? { ...e, options: { customCss: e.options.customCss } }\n        : e\n    )\n\n    //print(\"pos 1\")\n    print(\"TEST2\", res.daps)\n    const d = {\n      ...form,\n      collection: res.collection,\n      daps: res.daps,\n      template: (res.collection as any).template,\n    }\n    print(\"TEST\", d)\n    await saveFormData(d, \"edit\", form.id)\n    //print(\"pos 2\")\n    //update final form data\n    let needRefreshComponents = finalForm.daps.some((finalField) => {\n      let modified = resp.fieldsToModify.find((e) => e.key == finalField.key)\n      return modified != null\n    })\n    print(\"needREFRESH\", needRefreshComponents)\n\n    //await image loading\n    //print(\"pos 3\")\n    setFinalForm((finalForm) => {\n      let finalDaps = res.daps.map((field) => {\n        //check current final form\n        let visibleField = finalForm.daps.find((e) => e.key == field.key)\n        /*if ([\"pageFrontImage\"].some((e) => e == visibleField.property.id)) {\n          return {\n            ...field,\n            options: {\n              defaultValue: imgs.find(\n                (img) =>\n                  img.imgUrl ==\n                  (visibleField.options.defaultValue as any).imgUrl\n              ),\n            },\n          }\n        }*/\n        //print(\"pos 4\")\n\n        let modified = resp.fieldsToModify.find((e) => e.key == field.key)\n        /*print(\n          \"field\",\n          field,\n          field.key,\n          \"is\",\n          modified ? \"modified\" : \"not modifed\"\n        )*/\n        print(\"pos 5\", field)\n        if (modified) {\n          return { ...field, property: field.property, options: {} }\n        }\n        return {\n          ...field,\n          property: field.property,\n          options: visibleField.options,\n        }\n      })\n      return {\n        ...finalForm,\n        collection: res.collection,\n        daps: finalDaps,\n        needToRefreshTemplate: resp.needToRefreshTemplate,\n      }\n    })\n    if (needRefreshComponents) {\n      print(\"performing a refresh...\")\n      setRefresh(true)\n      setTimeout(() => {\n        setRefresh(false)\n      }, 100)\n    }\n    print(\"refeshing collection is done!\")\n    setImportantRefreshing(false)\n  }, [form])\n\n  //print(finalForm, \"\\x1b[43m -- finalForm \\x1b[0m\")\n  useEffect(() => {\n    if (\n      status == \"waiting_collection_finish_refreshing\" &&\n      importantRefreshing == false\n    ) {\n      setStatus(\"submitting\")\n      try {\n        handleSubmit(finalForm, setStatus, setMsgInfo, setRowId, metadatas.url)\n      } catch (err) {\n        print(\"error!\", err)\n        setStatus(\"error_when_submitting\")\n      }\n    }\n  }, [status, importantRefreshing])\n  switch (status) {\n    case \"before_submit\":\n      return (\n        <FormSubmissionContext.Provider\n          value={{\n            spaceId: form.spaceId,\n            createNewPageInCollection: (name, collectionId) => {\n              //todo\n              let newPage = {\n                id: uuid(),\n                name,\n              }\n              setImportantRefreshing(true)\n              upsertCachedCollectionPage(newPage, collectionId)\n              client\n                .createRecord(\n                  \"block\",\n                  { id: collectionId, _table: \"collection\" },\n                  {\n                    id: newPage.id,\n                    type: \"page\",\n                    properties: { title: [[name]] },\n                  }\n                )\n                .then((e) => {\n                  print(\"page created!\", e)\n                  setImportantRefreshing(false)\n                })\n              return newPage\n            },\n            getCachedCollectionPages: getCachedCollectionPages,\n            upsertCachedCollectionPage: upsertCachedCollectionPage,\n            createNewValueForProperty: (propertyId, value, color) => {\n              print(\"fetch client\")\n              print(\"calling addValueProperty\", propertyId, value)\n              let newValue = {\n                id: uuid(),\n                value,\n                color,\n              }\n              setImportantRefreshing(true)\n              client\n                .addValueToPropertyCollection(\n                  finalForm.collection,\n                  propertyId,\n                  value,\n                  newValue.id,\n                  newValue.color\n                )\n                .then((e) => {\n                  setNeedRefreshCollection(true)\n                })\n              return newValue\n            },\n            refreshCollection: async () => {\n              print(\"calling refresh collection\")\n            },\n          }}\n        >\n          <TopLayout\n            metadatas={metadatas}\n            layoutProps={{\n              canGoBack: canGoBack,\n              prevPageName: `form '${form.name}'`,\n              onClickGoBack: onGoBack,\n              optionParams: {\n                action: \"edit\",\n                id: form.id,\n                databaseLocked: true,\n              },\n              rightIcon: \"settings\",\n            }}\n            lockedFields={lockedFields}\n            image={(imageDap?.options?.defaultValue as any)?.imgUrl}\n          >\n            <Boxfc>\n              {metadatas != null && (\n                <FormFields\n                  refresh={refresh}\n                  form={finalForm}\n                  metadatas={metadatas}\n                  onUpdateField={(field) => {\n                    setFinalForm({\n                      ...finalForm,\n                      daps: finalForm.daps.map((f) =>\n                        f.key == field.key ? field : f\n                      ),\n                    })\n                  }}\n                />\n              )}\n            </Boxfc>\n            <Boxfc justify=\"center\" mt={1.5}>\n              <Boxfc width=\"100%\">\n                <Button\n                  onClick={async () => {\n                    print(\"handling submit\", finalForm)\n                    setStatus(\"waiting_collection_finish_refreshing\")\n                  }}\n                  size=\"large\"\n                >\n                  Save To Notion\n                </Button>\n              </Boxfc>\n            </Boxfc>\n          </TopLayout>\n        </FormSubmissionContext.Provider>\n      )\n    case \"waiting_collection_finish_refreshing\":\n      return <Loading msg=\"prepare to save to Notion...\" height=\"240px\" />\n    case \"submitting\":\n      return <Loading msg=\"saving to Notion...\" height=\"240px\" />\n\n    case \"error_when_submitting\":\n      return <Error msg=\"unkown error when submitting\" />\n\n    case \"success_submit\":\n      return <SuccessView rowId={rowId} />\n  }\n}\n","import React, {\n  useState,\n  useMemo,\n  useEffect,\n  useContext,\n  useCallback,\n} from \"react\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Boxfc,\n  Boxf,\n  H4,\n  H3,\n  H2,\n  Button,\n  BoxCont,\n  BoxVert,\n  BoxHori,\n  TextField,\n  Box,\n  Txt,\n  callAfterMs,\n  Hidden,\n  BoxPaper,\n  Content,\n  BoxProps,\n  Touchable,\n  useLoadState,\n} from \"../shared/MaterialUI\"\nimport { goTo } from \"../components/dummyRouter\"\nimport { DataContext, FormSubmissionContext } from \"../App\"\nimport { Collection } from \"../shared/notionapi/interfaces\"\nimport { Collection as Col } from \"../shared/notionapi/interfaces/notion-models/collection\"\nimport {\n  FormData,\n  FORM_LIST_KEY,\n  FORM_KEY_PREFIX,\n  Dap,\n  CustomCSSData,\n  ModifiedDapProperty,\n  DapOptions,\n  DapOptionsSelectedDataTypes,\n  FieldOptions,\n  ImageOptions,\n  notionColors,\n  TemplateInfo,\n  OptionParams,\n  randomNotionColor,\n} from \"../shared/appConfig\"\nimport {\n  saveFormData,\n  getFormData,\n  refreshCollection,\n  applyRefreshCollectionOnData,\n  saveCurrentPopupState,\n  resetCurrentPopupState,\n  deleteFormData,\n  getCachedCollectionPages,\n  upsertCachedCollectionPage,\n} from \"../shared/appUtils\"\nimport { sleep, print, promisify, makeid, getChipColor } from \"../shared/utils\"\nimport \"../index.css\"\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableHandle,\n} from \"react-sortable-hoc\"\nimport arrayMove from \"../shared/lib/arrayMove\"\nimport storage from \"../shared/lib/storage\"\nimport CollectionSelect from \"../components/CollectionSelect\"\nimport FieldWrapper from \"../components/FieldWrapper\"\nimport {\n  SelectIcon,\n  CheckboxIcon,\n  MultiSelectIcon,\n  TextIcon,\n  TitleIcon,\n  LinkIcon,\n  DragHandleIcon,\n  DeleteIcon,\n  PlusIcon,\n  TemplateIcon,\n  MagnetIcon,\n  NotionPageIcon,\n  EmptyNotionPageIcon,\n} from \"../shared/icons\"\nimport { ReactSortable } from \"react-sortablejs-typescript\"\nimport AutosizeInput from \"react-input-autosize\"\nimport { PropretyName } from \"../components/PropretyName\"\nimport { goBack } from \"../components/dummyRouter\"\nimport {\n  SelectField,\n  TextFieldWithData,\n  MultiSelectField,\n  CheckBoxField,\n  SelectFieldNoAutoComplete,\n  DataSelectedOption,\n  DataOptionRow,\n  RelationField,\n  SelectedPageOption,\n} from \"../components/Field\"\nimport { useInterval } from \"./FillFormPage\"\nimport { CollectionPage, DummyNotionClient } from \"../shared/notionlib/notion\"\nimport { updateSetAccessor } from \"typescript\"\nconst ToggleButton = require(\"@material-ui/lab/ToggleButton\").default\nconst CloseIcon = require(\"@material-ui/icons/Close\").default\n\nconst Accordion = require(\"@material-ui/core/Accordion\").default\nconst AccordionSummary = require(\"@material-ui/core/AccordionSummary\").default\nconst AccordionDetails = require(\"@material-ui/core/AccordionDetails\").default\n\nconst Typography = require(\"@material-ui/core/Typography\").default\nconst ExpandMoreIcon = require(\"@material-ui/icons/ExpandMore\").default\nconst ToggleButtonGroup = require(\"@material-ui/lab/ToggleButtonGroup\").default\n//print(SvgSelectType);\n//const { useConfirm } = require(\"material-ui-confirm\")\nconst DialogActions = require(\"@material-ui/core/DialogActions\").default\nconst Skeleton = require(\"@material-ui/lab/Skeleton\").default\nconst LocalOfferIcon = require(\"@material-ui/icons/LocalOffer\").default\n\nconst Autocomplete = require(\"@material-ui/lab/Autocomplete\").default\nconst CircularProgress = require(\"@material-ui/core/CircularProgress\").default\nconst uuid = require(\"uuid/v4\")\nconst Backdrop = require(\"@material-ui/core/Backdrop\").default\n\nconst InputLabel = require(\"@material-ui/core/InputLabel\").default\nconst Select = require(\"@material-ui/core/Select\").default\nconst IconButton = require(\"@material-ui/core/IconButton\").default\nconst MoreVertIcon = require(\"@material-ui/icons/MoreVert\").default\n\nconst Menu = require(\"@material-ui/core/Menu\").default\nconst MenuItem = require(\"@material-ui/core/MenuItem\").default\nconst Chip = require(\"@material-ui/core/Chip\").default\nconst DialogTitle = require(\"@material-ui/core/DialogTitle\").default\nconst Dialog = require(\"@material-ui/core/Dialog\").default\nconst DialogContent = require(\"@material-ui/core/DialogContent\").default\nconst DialogContentText = require(\"@material-ui/core/DialogContentText\").default\nconst FormControlLabel = require(\"@material-ui/core/FormControlLabel\").default\nconst FormHelperText = require(\"@material-ui/core/FormHelperText\").default\nconst Checkbox = require(\"@material-ui/core/Checkbox\").default\nconst ArrowBackIcon = require(\"@material-ui/icons/ArrowBack\").default\nconst ImageIcon = require(\"@material-ui/icons/Image\").default\nconst AppBar = require(\"@material-ui/core/AppBar\").default\nconst LockIcon = require(\"@material-ui/icons/Lock\").default\nconst LockOutlinedIcon = require(\"@material-ui/icons/LockOutlined\").default\nconst LockOpenOutlinedIcon = require(\"@material-ui/icons/LockOpenOutlined\")\n  .default\ntype FormEditData = {\n  collection: Collection\n}\n\nconst emptyFormEditData: FormEditData = { collection: null }\n\nexport const FormEditContext = React.createContext<FormEditData>(\n  emptyFormEditData\n)\n\ntype DapKind = \"data\" | \"prefilled\" | \"field-to-complete\"\n\n//print(dataTypeIcon)\n\nconst SelectPropertyField = ({\n  collection,\n  onChangeProperty,\n  property,\n  daps,\n}: {\n  collection: Collection\n  property?: ModifiedDapProperty\n  onChangeProperty: (property: ModifiedDapProperty) => void\n  daps: Dap[]\n}) => {\n  const [value, setValue] = useState(property ? [property] : [])\n  const { refreshCollection } = useContext(EditFormContext)\n\n  const colproperties: (ModifiedDapProperty & {\n    valid: boolean\n  })[] = useMemo(() => {\n    let p = []\n    for (let k in collection.schema) {\n      let prop: Partial<ModifiedDapProperty & { valid: boolean }> =\n        collection.schema[k]\n      prop.valid = false\n      if (\n        [\n          \"text\",\n          \"select\",\n          \"multi_select\",\n          \"url\",\n          \"title\",\n          \"checkbox\",\n          \"relation\",\n          \"number\",\n        ].includes(prop.type)\n      ) {\n        prop.valid = true\n      }\n\n      prop.id = k\n      p.push(prop)\n    }\n    p.push({ name: \"cover\", id: \"pageCover\", type: \"image\", valid: true })\n    p.push({\n      name: \"cover image\",\n      id: \"pageFrontImage\",\n      type: \"image\",\n      valid: true,\n    })\n    p.push({ name: \"icon\", id: \"pageIcon\", type: \"image\", valid: true })\n    return p\n  }, [collection])\n\n  const alreadyAddedPropertiesId = useMemo(() => {\n    let x = {}\n    for (let d of daps) {\n      if (d.property) {\n        x[d.property.id] = true\n      }\n    }\n    return x\n  }, [daps, colproperties])\n\n  const properties = useMemo(() => {\n    let ps = colproperties.map((e) => ({ ...e }))\n    for (let x of ps) {\n      if (\n        x.id in alreadyAddedPropertiesId &&\n        (value.length == 0 || value[0].id != x.id)\n      ) {\n        x.valid = false\n      }\n    }\n    return ps\n  }, [value, alreadyAddedPropertiesId])\n\n  useEffect(() => {\n    if (property) {\n      //setInputValue(property.name)\n      setValue([property])\n    }\n  }, [property])\n\n  return (\n    <>\n      <Autocomplete\n        multiple\n        onOpen={() => {\n          print(\"refreshing collection...\")\n          refreshCollection()\n        }}\n        size={\"small\"}\n        value={value}\n        blurOnSelect\n        options={properties}\n        renderTags={(tagValue, getTagProps) =>\n          tagValue.map((option, index) => {\n            const { key, ...tagProps } = getTagProps({ index })\n            return (\n              <PropretyName\n                option={option}\n                key={key}\n                data-tag-index={tagProps[\"data-tag-index\"]}\n              />\n            )\n          })\n        }\n        getOptionLabel={(option) => option.name}\n        getOptionSelected={(option, v) => option.name == v.name}\n        renderOption={(option) => <PropretyName option={option} />}\n        style={{ width: 200 }}\n        getOptionDisabled={(option) => option.valid == false}\n        onChange={(\n          ev,\n          value,\n          reason:\n            | \"create-option\"\n            | \"select-option\"\n            | \"remove-option\"\n            | \"blur\"\n            | \"clear\"\n        ) => {\n          if (value.length == 0) {\n            setValue([])\n            onChangeProperty(null)\n          } else {\n            let last = value[value.length - 1]\n            setValue([last])\n            onChangeProperty(last)\n          }\n        }}\n        renderInput={(params) => {\n          return (\n            <TextField\n              className=\"propertyField\"\n              onClick={params.inputProps.onMouseDown}\n              {...params}\n              inputProps={{\n                ...params.inputProps,\n                onMouseDown: null,\n              }}\n              placeholder={value.length == 0 ? \"select a property...\" : \"\"}\n              variant=\"outlined\"\n            />\n          )\n        }}\n      />\n    </>\n  )\n}\n\nconst DefaultDapValueSelectAsText = ({\n  dap,\n  onSetOptions,\n}: {\n  dap: Dap\n  onSetOptions: (options: DapOptions) => void\n}) => {\n  const [value, setValue] = useState(\"\")\n\n  useEffect(() => {\n    print(\"called\", value)\n    if (dap.options.defaultValue) {\n      setValue(dap.options.defaultValue)\n    } else {\n      setValue(\"\")\n      onSetOptions({ defaultValue: \"\" })\n    }\n  }, [])\n\n  return (\n    <TextField\n      value={value}\n      placeholder=\"enter something...\"\n      onChange={(ev) => {\n        setValue(ev.target.value)\n      }}\n      onBlur={() => {\n        print(\"got blurred\", value)\n        onSetOptions({ defaultValue: value })\n      }}\n    />\n  )\n}\n\nconst DefaultDapValueSelectAsCheckBox = ({\n  dap,\n  onSetOptions,\n}: {\n  dap: Dap\n  onSetOptions: (options: DapOptions) => void\n}) => {\n  const [value, setValue] = useState(false)\n\n  useEffect(() => {\n    print(\"called\", value)\n    if (\n      (dap.options.defaultValue as any) &&\n      typeof dap.options.defaultValue == \"boolean\"\n    ) {\n      setValue(dap.options.defaultValue as any)\n    } else {\n      setValue(false)\n      onSetOptions({ defaultValue: false } as any)\n    }\n  }, [])\n\n  return (\n    <>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={value}\n            onChange={(ev) => {\n              setValue(ev.target.checked)\n              onSetOptions({ defaultValue: ev.target.checked } as any)\n            }}\n            name={dap.property.name}\n            color=\"primary\"\n          />\n        }\n        label={dap.property.name}\n      />\n    </>\n  )\n}\n\nfunction getDefaultOptionOfSelect(dap: Dap) {\n  if (!dap.options.defaultSelectId || !dap.property.options) return undefined\n  let x = dap.property.options.find(\n    (opt) => opt.id == dap.options.defaultSelectId\n  )\n  return x\n}\n\nconst DefaultDapValueSelectAsSelect = ({\n  dap,\n  onSetOptions,\n}: {\n  dap: Dap\n  onSetOptions: (options: DapOptions) => void\n}) => {\n  const [defaultOption] = useState(getDefaultOptionOfSelect(dap))\n  const [value, setValue] = useState(defaultOption ? [defaultOption] : [])\n  print(\"got value\", value)\n  return (\n    <>\n      <Autocomplete\n        multiple\n        value={value}\n        options={dap.property.options || []}\n        getOptionLabel={(option) => option.value}\n        renderOption={(option) => (\n          <Chip\n            label={option.value}\n            style={{ backgroundColor: getChipColor(option) }}\n          />\n        )}\n        renderTags={(tagValue, getTagProps) =>\n          tagValue.map((option, index) => {\n            const { key, ...tagProps } = getTagProps({ index })\n            return (\n              <Chip\n                key={key}\n                data-tag-index={tagProps[\"data-tag-index\"]}\n                label={option.value}\n                style={{\n                  backgroundColor: getChipColor(option),\n                }}\n              />\n            )\n          })\n        }\n        style={{ width: 300 }}\n        onChange={(\n          ev,\n          options,\n          reason:\n            | \"create-option\"\n            | \"select-option\"\n            | \"remove-option\"\n            | \"blur\"\n            | \"clear\"\n        ) => {\n          console.log(\"render property\", options)\n          if (options.length == 0) {\n            onSetOptions({ defaultSelectId: \"\" })\n            setValue([])\n          } else {\n            onSetOptions({ defaultSelectId: options[options.length - 1].id })\n            setValue([options[options.length - 1]])\n          }\n        }}\n        renderInput={(params) => (\n          <TextField\n            placeholder={value.length == 0 ? \"choose...\" : \"\"}\n            {...params}\n            variant=\"outlined\"\n          />\n        )}\n      />\n    </>\n  )\n}\n\nfunction getDefaultOptionsOfMultiSelect(dap: Dap) {\n  if (!dap.options.defaultSelectIds || !dap.property.options) return []\n  let ids = {}\n  dap.options.defaultSelectIds.forEach((id) => (ids[id] = true))\n  let xs = dap.property.options.filter((opt) => ids[opt.id])\n  return xs\n}\nconst DefaultDapValueSelectAsMultiSelect = ({\n  dap,\n  onSetOptions,\n}: {\n  dap: Dap\n  onSetOptions: (options: DapOptions) => void\n}) => {\n  const [defaultOptions] = useState(getDefaultOptionsOfMultiSelect(dap))\n  const [value, setValue] = useState(defaultOptions)\n  return (\n    <>\n      <Autocomplete\n        multiple\n        value={value}\n        disableCloseOnSelect={true}\n        options={dap.property.options || []}\n        getOptionLabel={(option) => option.value}\n        style={{ width: 300 }}\n        renderOption={(option) => (\n          <Chip\n            label={option.value}\n            style={{ backgroundColor: getChipColor(option) }}\n          />\n        )}\n        onChange={(\n          ev,\n          options,\n          reason:\n            | \"create-option\"\n            | \"select-option\"\n            | \"remove-option\"\n            | \"blur\"\n            | \"clear\"\n        ) => {\n          setValue(options)\n          onSetOptions({ defaultSelectIds: options.map((opt) => opt.id) })\n        }}\n        limitTags={3}\n        renderTags={(tagValue, getTagProps) =>\n          tagValue.map((option, index) => {\n            const { key, ...tagProps } = getTagProps({ index })\n            return (\n              <Chip\n                key={key}\n                data-tag-index={tagProps[\"data-tag-index\"]}\n                label={option.value}\n                style={{\n                  backgroundColor: getChipColor(option),\n                  marginLeft: \"2px\",\n                  marginTop: \"2px\",\n                }}\n              />\n            )\n          })\n        }\n        renderInput={(params) => (\n          <TextField\n            placeholder={value.length == 0 ? \"choose...\" : \"\"}\n            {...params}\n            variant=\"outlined\"\n          />\n        )}\n      />\n    </>\n  )\n}\n\nconst DefaultDapValueSelect = ({\n  dap,\n  onSetOptions,\n}: {\n  dap: Dap\n  onSetOptions: (options: DapOptions) => void\n}) => {\n  switch (dap.property.type) {\n    case \"url\":\n    case \"title\":\n    case \"text\":\n      return (\n        <DefaultDapValueSelectAsText dap={dap} onSetOptions={onSetOptions} />\n      )\n    case \"checkbox\":\n      return (\n        <DefaultDapValueSelectAsCheckBox\n          dap={dap}\n          onSetOptions={onSetOptions}\n        />\n      )\n    case \"select\":\n      return (\n        <DefaultDapValueSelectAsSelect dap={dap} onSetOptions={onSetOptions} />\n      )\n    case \"multi_select\":\n      return (\n        <DefaultDapValueSelectAsMultiSelect\n          dap={dap}\n          onSetOptions={onSetOptions}\n        />\n      )\n    default:\n      return (\n        <Txt fontStyle=\"italic\">\n          {\" \"}\n          You can't add a default value for an {dap.property.type}\n        </Txt>\n      )\n  }\n}\n\nconst CustomDisplayDataValue = ({ dap }: { dap: Dap }) => {\n  const option = useMemo(() => getDefaultOptionOfSelect(dap), [dap])\n  const options = useMemo(() => getDefaultOptionsOfMultiSelect(dap), [dap])\n\n  if (!dap.property || Object.keys(dap.options).length == 0) {\n    return <Txt color=\"#9e9e9e\">Set a value or leave it blank</Txt>\n  }\n  if (dap.options.selectedData) {\n    return (\n      <Boxf align=\"center\">\n        <MagnetIcon style={{}} />{\" \"}\n        <Txt fontSize=\"14px\" ml={0.5}>\n          {datas.find((d) => d.key == dap.options.selectedData).name}\n        </Txt>\n      </Boxf>\n    )\n  }\n  if (dap.options.customCss) {\n    return (\n      <Boxf align=\"center\">\n        <LocalOfferIcon style={{ color: \"grey\", fontSize: \"15px\" }} />{\" \"}\n        <Txt fontSize=\"14px\" ml={0.5}>\n          custom CSS Selector\n        </Txt>\n      </Boxf>\n    )\n  }\n  if (typeof dap.options?.defaultValue == \"boolean\") {\n    return <>{dap.options.defaultValue ? \"true\" : \"false\"}</>\n  }\n  if (dap.options.defaultValue) {\n    return <>\"{dap.options.defaultValue}\"</>\n  }\n  if (dap.options.defaultSelectId) {\n    return (\n      <>\n        <Chip\n          label={option.value}\n          style={{ cursor: \"pointer\", backgroundColor: getChipColor(option) }}\n        />\n      </>\n    )\n  }\n  if (dap.options.defaultSelectIds) {\n    return (\n      <div style={{ overflow: \"hidden\" }}>\n        {options.map((option) => (\n          <Chip\n            key={option.id}\n            label={option.value}\n            style={{\n              cursor: \"pointer\",\n              marginRight: \"4px\",\n              marginTop: \"2px\",\n              backgroundColor: getChipColor(option),\n            }}\n          />\n        ))}\n      </div>\n    )\n  }\n  return <Txt color=\"#9e9e9e\">Set a value or leave it blank</Txt>\n}\n\nconst ButtonSel = ({\n  disabled,\n  selected,\n  children,\n  onClick,\n  ...bprops\n}: { disabled; selected; onClick; children } & BoxProps) => {\n  //print(\"got\", selected, disabled)\n  return (\n    <Box\n      style={disabled ? { color: \"grey\" } : { cursor: \"pointer\" }}\n      {...bprops}\n      borderColor={\n        selected ? \"primary.main\" : disabled ? \"#f5f5f5\" : \"text.secondary\"\n      }\n      minHeight=\"30px\"\n      color={selected ? \"primary.main\" : disabled ? \"#f5f5f5\" : \"text.primary\"}\n      border=\"1px solid\"\n      borderRadius={\"5px\"}\n      py={1.5}\n      px={1.5}\n      onClick={onClick}\n      {...bprops}\n    >\n      {children}\n    </Box>\n  )\n}\nconst DataItem = ({\n  data,\n  selected,\n  disabled,\n  onSelect,\n  ...bprops\n}: {\n  selected: boolean\n  onSelect: () => void\n  disabled: boolean\n  data: DataPage\n} & BoxProps) => {\n  return (\n    <ButtonSel\n      disabled={disabled}\n      selected={selected}\n      onClick={() => {\n        !disabled && onSelect && onSelect()\n      }}\n      {...bprops}\n    >\n      <Boxf align=\"center\">\n        <Boxfc flex={0.5}>\n          <Txt fontWeight=\"bold\">{data.name}</Txt>\n          <Txt>{data.description}</Txt>\n        </Boxfc>\n        <Boxfc flex={0.5}>\n          {data.key == \"webpageImage\" ? (\n            <Boxf align=\"center\">\n              <Txt mr={2}>Example: </Txt>{\" \"}\n              <img\n                src={\"https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\"}\n                style={{\n                  width: \"70px\",\n                  height: \"40px\",\n                  objectFit: \"cover\",\n                  backgroundColor: \"grey\",\n                }}\n              />\n            </Boxf>\n          ) : data.key == \"websiteIcon\" ? (\n            <Boxf align=\"center\">\n              <Txt mr={2}>Example: </Txt>{\" \"}\n              <img\n                src={\n                  \"https://www.youtube.com/s/desktop/ee2e5595/img/favicon_96.png\"\n                }\n                style={{\n                  width: \"50px\",\n                  height: \"50px\",\n                  objectFit: \"cover\",\n                  backgroundColor: \"transparent\",\n                }}\n              />\n            </Boxf>\n          ) : (\n            <>\n              <Txt>\n                Example: \"\n                <Txt style={{ fontStyle: \"italic\" }}>{data.example}</Txt>\"\n              </Txt>\n            </>\n          )}\n        </Boxfc>\n      </Boxf>\n    </ButtonSel>\n  )\n}\n\nexport type DataPage = {\n  type: \"data\"\n  name: string\n  key: DapOptionsSelectedDataTypes\n  description: string\n  example: string\n  acceptedPropertyTypes: string[]\n}\n\nconst datas: DataPage[] = [\n  {\n    type: \"data\",\n    name: \"Page Url\",\n    key: \"webpageUrl\",\n    acceptedPropertyTypes: [\"url\", \"text\"],\n\n    description: \"Url of the page you are visiting when completing the form\",\n    example: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n  },\n  {\n    type: \"data\",\n    name: \"Page Title\",\n    key: \"webpageTitle\",\n    acceptedPropertyTypes: [\"title\", \"text\"],\n    description: \"\", //\"Title of the page you are visiting when completing the form\",\n    example: \"Rick Astley - Never Gonna Give You Up (Video) - YouTube\",\n  },\n  {\n    type: \"data\",\n    name: \"Page Description\",\n    key: \"webpageDescription\",\n    acceptedPropertyTypes: [\"text\"],\n    description: \"\", //'Description of the page you are visiting when completing the form',\n    example:\n      \"Rick Astley's official music video for “Never Gonna Give You Up”...\",\n  },\n  {\n    type: \"data\",\n    name: \"Page Image\",\n    key: \"webpageImage\",\n    acceptedPropertyTypes: [\"image\"],\n\n    description: \"cover image of the page\",\n    example: \"\",\n  },\n  {\n    type: \"data\",\n    name: \"Website Icon\",\n    key: \"websiteIcon\",\n    acceptedPropertyTypes: [\"image\"],\n    description: \"\",\n    example: \"\",\n  },\n]\n\nconst AdvancedOptionDialog = ({\n  onClose,\n  dap,\n  open,\n}: {\n  open: boolean\n  onClose: (options: CustomCSSData | null) => void\n  dap: Dap\n}) => {\n  //const [imageOptions, setImageOptions] = useState<ImageOptions>(dap.fieldOptions.image)\n\n  const [customCss, setCustomCss] = useState<CustomCSSData>({\n    type: \"simple\",\n    css: \"\",\n    on: \"text\",\n  })\n\n  useEffect(() => {\n    if (open) {\n      //setImageOptions(dap.fieldOptions.image);\n      if (dap.options.customCss) {\n        setCustomCss(dap.options.customCss)\n      }\n    }\n  }, [open])\n\n  const handleClose = () => {\n    //onClose(imageOptions)\n    onClose(customCss)\n  }\n\n  const handleCancel = () => {\n    onClose(null)\n  }\n\n  return (\n    <Dialog\n      onClose={handleCancel}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n      fullWidth={true}\n      maxWidth={\"sm\"}\n    >\n      <DialogTitle>\n        <Button\n          onClick={() => {\n            handleCancel()\n          }}\n          variant=\"text\"\n        >\n          cancel\n        </Button>\n      </DialogTitle>\n      <DialogContent>\n        <Boxf>\n          <Boxfc flex={0.5} justify=\"center\" mr={1}>\n            <TextField\n              style={{}}\n              value={customCss.css}\n              multiline\n              rowsMax={3}\n              onChange={(ev) => {\n                setCustomCss({ ...customCss, css: ev.target.value })\n              }}\n              placeholder=\"css selector...\"\n            />\n          </Boxfc>\n\n          <Boxfc flex={0.5} justify=\"center\">\n            <Autocomplete\n              freeSolo\n              onChange={(\n                ev,\n                value,\n                reason:\n                  | \"create-option\"\n                  | \"select-option\"\n                  | \"remove-option\"\n                  | \"blur\"\n                  | \"clear\"\n              ) => {\n                setCustomCss({ ...customCss, on: value })\n              }}\n              value={customCss.on}\n              options={[\"text\", \"href\"]}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  placeholder=\"on\"\n                />\n              )}\n            />\n          </Boxfc>\n        </Boxf>\n      </DialogContent>\n\n      <DialogActions>\n        <Boxfc>\n          <Button\n            onClick={() => {\n              handleClose()\n            }}\n            variant=\"outlined\"\n            disabled={false}\n          >\n            confirm\n          </Button>\n        </Boxfc>\n      </DialogActions>\n    </Dialog>\n  )\n}\nconst paramsfields: { name: keyof FieldOptions }[] = [{ name: \"locked\" }]\n\nconst ImageParametersDialog = ({\n  onClose,\n  dap,\n  open,\n}: {\n  open: boolean\n  onClose: (imageOptions: ImageOptions | null) => void\n  dap: Dap\n}) => {\n  const [imageOptions, setImageOptions] = useState<ImageOptions>(\n    dap.fieldOptions.image\n  )\n\n  useEffect(() => {\n    if (open) {\n      setImageOptions(dap.fieldOptions.image)\n    }\n  }, [open])\n\n  const handleClose = () => {\n    onClose(imageOptions)\n  }\n\n  const handleCancel = () => {\n    onClose(null)\n  }\n  const typeData: { name: string; value: ImageOptions[\"type\"] }[] = [\n    { name: \"default\", value: \"coverLike\" },\n    { name: \"full width\", value: \"fullWidthCover\" },\n  ]\n\n  const sizeData: { name: string; value: ImageOptions[\"size\"] }[] = [\n    { name: \"large\", value: \"large\" },\n    { name: \"normal\", value: \"normal\" },\n    { name: \"small\", value: \"small\" },\n  ]\n\n  return (\n    <Dialog\n      onClose={handleCancel}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n      fullWidth={true}\n      maxWidth={\"sm\"}\n    >\n      <DialogTitle>\n        <Button\n          onClick={() => {\n            handleCancel()\n          }}\n          variant=\"text\"\n        >\n          cancel\n        </Button>\n      </DialogTitle>\n      <DialogContent>\n        {!dap.fieldOptions.image ? (\n          <>no options available</>\n        ) : (\n          <Boxfc mt={2} style={{ maxWidth: \"500px\", width: \"100%\" }}>\n            {/*<H4 mb={1}>Representation of the image</H4>\n            <ToggleButtonGroup\n              size=\"small\"\n              value={imageOptions.type}\n              exclusive\n              onChange={(_, type) => {\n                type != null && setImageOptions({ ...imageOptions, type })\n              }}\n            >\n              {typeData.map((e) => (\n                <ToggleButton key={e.value} value={e.value}>\n                  {e.name}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n              */}\n            <H4 mt={2} mb={1}>\n              Size of the image\n            </H4>\n            <ToggleButtonGroup\n              size=\"small\"\n              value={imageOptions.size}\n              exclusive\n              onChange={(_, size) =>\n                size != null && setImageOptions({ ...imageOptions, size })\n              }\n            >\n              {sizeData.map((e) => (\n                <ToggleButton key={e.value} value={e.value}>\n                  {e.name}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </Boxfc>\n        )}\n      </DialogContent>\n\n      <DialogActions>\n        <Boxfc>\n          <Button\n            onClick={() => {\n              handleClose()\n            }}\n            variant=\"outlined\"\n            disabled={false}\n          >\n            confirm\n          </Button>\n        </Boxfc>\n      </DialogActions>\n    </Dialog>\n  )\n}\nconst Parameters = ({\n  dap,\n  onChangeFieldOptions,\n  ...bprops\n}: { dap: Dap; onChangeFieldOptions } & BoxProps) => {\n  const [open, setOpen] = useState(false)\n\n  const handleMClose = (imageOptions: ImageOptions | null) => {\n    setOpen(false)\n    if (imageOptions) {\n      onChangeFieldOptions({ ...dap.fieldOptions, image: imageOptions })\n    }\n  }\n\n  return (\n    <Box {...bprops}>\n      <FieldWrapper label=\"parameters\">\n        {dap.property && (dap.property.type as any) == \"image\" ? (\n          <>\n            <Button\n              variant=\"text\"\n              onClick={() => setOpen(true)}\n              disabled={dap.property.id != \"pageFrontImage\"}\n            >\n              manage image parameters\n            </Button>\n\n            <ImageParametersDialog\n              dap={dap}\n              open={open}\n              onClose={handleMClose}\n            />\n          </>\n        ) : (\n          paramsfields.map((field) => (\n            <FormControlLabel\n              key={field.name}\n              control={\n                <Checkbox\n                  checked={dap.fieldOptions[field.name]}\n                  onChange={() =>\n                    onChangeFieldOptions({\n                      [field.name]: !dap.fieldOptions[field.name],\n                    })\n                  }\n                  name={field.name}\n                  color=\"primary\"\n                />\n              }\n              label={field.name}\n            />\n          ))\n        )}\n      </FieldWrapper>\n    </Box>\n  )\n}\n\nfunction dapPropertyOptions(dap, property: ModifiedDapProperty) {\n  let options: Dap[\"options\"] = {}\n  let fieldOptions: Dap[\"fieldOptions\"] = { locked: false }\n  if (property) {\n    switch (property.type) {\n      case \"image\" as any:\n        options = {\n          selectedData:\n            (property.id == \"pageIcon\" && \"websiteIcon\") || \"webpageImage\",\n        }\n        fieldOptions = {\n          locked: false,\n          image: { type: \"coverLike\", size: \"normal\" },\n        }\n        break\n      case \"title\":\n        options = {\n          selectedData: \"webpageTitle\",\n        }\n        break\n      case \"url\":\n        options = {\n          selectedData: \"webpageUrl\",\n        }\n        break\n      case \"checkbox\":\n        options = { defaultValue: false } as any\n        break\n    }\n  }\n  return { ...dap, property, options, fieldOptions }\n}\n\nconst MenuBoxItem = ({ title, iconComp }: { title: string; iconComp: any }) => {\n  return (\n    <>\n      <Boxf align=\"center\">\n        <Box mr={1}>{iconComp}</Box>\n        <div style={{ fontSize: \"14px\" }}>{title}</div>\n      </Boxf>\n    </>\n  )\n}\n\nconst MenuForm = ({ anchorEl, open, onClose, onClickRemove }) => {\n  return (\n    <>\n      <Menu anchorEl={anchorEl} keepMounted open={open} onClose={onClose}>\n        <MenuItem\n          onClick={(ev) => {\n            onClose()\n            onClickRemove()\n          }}\n        >\n          <MenuBoxItem title=\"Delete Field\" iconComp={<DeleteIcon />} />\n        </MenuItem>\n      </Menu>\n    </>\n  )\n}\n\nconst Opener = ({\n  onClose,\n  onOpen,\n  children,\n}: {\n  onClose?\n  onOpen?\n  children: ({\n    handleOpen,\n    handleClose,\n    isOpen,\n  }: {\n    handleOpen: any\n    handleClose: any\n    isOpen: boolean\n  }) => any\n}) => {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      {children({\n        handleOpen: async () => {\n          setIsOpen(true)\n          onOpen && (await onOpen())\n        },\n        handleClose: async (data) => {\n          setIsOpen(false)\n          onClose && (await onClose(data))\n        },\n        isOpen,\n      })}\n    </>\n  )\n}\n\nconst SortableDragHandleButton = SortableHandle(\n  ({ onClickRemove }: { onClickRemove }) => {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n    return (\n      <>\n        <Opener>\n          {(menu) => (\n            <>\n              <Box\n                mr={0.5}\n                className=\"boxButtonShowOnlyOnHover\"\n                onClick={(event) => {\n                  setAnchorEl(event.currentTarget)\n                  menu.handleOpen()\n                }}\n              >\n                <DragHandleIcon />\n              </Box>\n              <MenuForm\n                anchorEl={anchorEl}\n                onClose={() => {\n                  menu.handleClose()\n                  setAnchorEl(null)\n                }}\n                onClickRemove={onClickRemove}\n                open={menu.isOpen}\n              />\n            </>\n          )}\n        </Opener>\n      </>\n    )\n  }\n)\n\nconst SelectDataField = ({\n  field,\n  onChangeField,\n  onChangeOptions,\n}: {\n  field: Dap\n  onChangeField: (field: Dap) => void\n  onChangeOptions: (opt: DapOptions) => void\n}) => {\n  //console.log(\"got\", field.property)\n  if (!field.property) {\n    return (\n      <Boxf\n        pl=\"8px\"\n        pr=\"5px\"\n        className=\"selectDataBox\"\n        color=\"#9e9e9e\"\n        align=\"center\"\n      >\n        choose property\n      </Boxf>\n    )\n  }\n\n  return (\n    <>\n      {(() => {\n        print(\"here\")\n        switch (field.property.type) {\n          case \"image\" as any:\n            return (\n              <>\n                <SelectFieldNoAutoComplete\n                  value={field.options.selectedData}\n                  options={datas.filter((d) =>\n                    d.acceptedPropertyTypes.some(\n                      (e) => e == field.property.type\n                    )\n                  )}\n                  onSelectOption={(opt) => {\n                    print(\"choose\", opt)\n                    onChangeOptions({ selectedData: opt })\n                  }}\n                  uniqueKey=\"key\"\n                  renderValue={(key) => {\n                    const d = datas.find((e) => e.key == key)\n                    return <DataSelectedOption data={d} />\n                  }}\n                  renderOption={(data) => <DataOptionRow data={data} />}\n                  style={{ width: \"200px\", fontSize: \"13px\", height: \"40px\" }}\n                  className=\"propertyField\"\n                />\n              </>\n            )\n          case \"url\":\n          case \"title\":\n          case \"text\":\n          case \"number\":\n            return (\n              <>\n                <TextFieldWithData\n                  name={field.property.name}\n                  datas={datas.filter((d) =>\n                    d.acceptedPropertyTypes.some(\n                      (e) => e == field.property.type\n                    )\n                  )}\n                  options={field.options}\n                  onSetOptions={onChangeOptions}\n                  textStyle={{ width: \"200px\" }}\n                  textClass=\"propertyField\"\n                />\n              </>\n            )\n          /*return (\n                <TypeTextField\n                  refresh={refresh}\n                  defaultValue={dap.options.defaultValue}\n                  onChangeValue={(defaultValue) =>\n                    onChangeOptions({ defaultValue })\n                  }\n                  name={dap.property?.name || \"Untitled\"}\n                />\n              )*/\n          case \"select\":\n            return (\n              <SelectField\n                dap={field}\n                size=\"small\"\n                onChangeField={onChangeField}\n                textStyle={{ width: \"200px\" }}\n                textClass=\"propertyField\"\n              />\n            )\n          case \"relation\":\n            return (\n              <RelationField\n                dap={field}\n                size=\"small\"\n                onChangeOptions={onChangeOptions}\n                textStyle={{ width: \"200px\" }}\n                textClass=\"propertyField\"\n              />\n            )\n          case \"multi_select\":\n            return (\n              <MultiSelectField\n                onChangeField={onChangeField}\n                size=\"small\"\n                dap={field}\n                textStyle={{ width: \"200px\" }}\n                textClass=\"propertyField\"\n              />\n            )\n          case \"checkbox\":\n            return (\n              <CheckBoxField\n                name={field.property.name}\n                value={field.options.defaultValue as any}\n                size=\"small\"\n                onChange={(v) => onChangeOptions({ defaultValue: v } as any)}\n                checkboxStyle={{\n                  width: \"200px\",\n                  userSelect: \"none\",\n                  marginLeft: 0,\n                  marginRight: 0,\n                }}\n                checkboxClass=\"propertyField\"\n              />\n            )\n          default:\n            return (\n              <Boxf py=\"5px\" pl=\"8px\" pr=\"5px\" className=\"selectDataBox\">\n                property's type not implemented\n              </Boxf>\n            )\n        }\n      })()}\n    </>\n  )\n}\n\nconst SortableDapItem = SortableElement(\n  ({\n    dap,\n    onChangeDap,\n    onClickRemoveDap,\n    daps,\n  }: {\n    dap: Dap\n    onChangeDap: (dap: Dap) => void\n    onClickRemoveDap: () => void\n    daps: Dap[]\n  }) => {\n    const { collection } = useContext(FormEditContext)\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n    const [openModal, setOpenModal] = useState(false)\n    const [open, setOpen] = React.useState(false)\n\n    const handleMClickOpen = () => {\n      setOpen(true)\n    }\n\n    const handleMClose = (options: DapOptions | null) => {\n      setOpen(false)\n      if (options) {\n        print(\"here\", options)\n        onChangeDap({ ...dap, options })\n      }\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      setAnchorEl(event.currentTarget)\n    }\n\n    //const confirm = useConfirm()\n\n    const handleClose = () => {\n      setAnchorEl(null)\n    }\n    print(\"dap\", dap.property?.name, dap.options)\n    return (\n      <>\n        <Boxf\n          justify=\"space-between\"\n          align=\"center\"\n          mt={1}\n          className=\"boxItemParent\"\n        >\n          <Boxf align=\"center\" flex={1}>\n            <SortableDragHandleButton onClickRemove={onClickRemoveDap} />\n            <SelectPropertyField\n              collection={collection}\n              property={dap.property}\n              onChangeProperty={(property) => {\n                onChangeDap(dapPropertyOptions(dap, property))\n              }}\n              daps={daps}\n            />\n            <Boxf\n              align=\"center\"\n              flex={1}\n              ml={1}\n              style={\n                !dap.property ? { pointerEvents: \"none\", opacity: 0.5 } : {}\n              }\n            >\n              <Boxf flex={1}>\n                <SelectDataField\n                  field={dap}\n                  onChangeOptions={(options) => {\n                    print(\"save option\", dap.property.name, options)\n                    onChangeDap({ ...dap, options })\n                  }}\n                  onChangeField={onChangeDap}\n                />\n                {/*<CustomDisplayDataValue dap={dap} />*/}\n                {(dap.property?.type as string) != \"image\" && (\n                  <Boxf className=\"lockButton\" ml={2}>\n                    <IconButton\n                      onClick={() => {\n                        onChangeDap({\n                          ...dap,\n                          fieldOptions: {\n                            ...(dap.fieldOptions || {}),\n                            locked:\n                              dap.fieldOptions?.locked == false ? true : false,\n                          },\n                        })\n                      }}\n                    >\n                      {dap.fieldOptions?.locked ? (\n                        <LockIcon size=\"small\" />\n                      ) : (\n                        <LockOpenOutlinedIcon size=\"small\" />\n                      )}\n                    </IconButton>\n                  </Boxf>\n                )}\n              </Boxf>\n\n              {/*\n              <Boxf flex={1} ml={2}>\n                <Parameters\n                  dap={dap}\n                  onChangeFieldOptions={(fieldOptions) =>\n                    onChangeDap({ ...dap, fieldOptions })\n                  }\n                />\n              </Boxf>\n                */}\n            </Boxf>\n          </Boxf>\n        </Boxf>\n      </>\n    )\n  }\n)\n\nconst SortableDapList = SortableContainer(({ daps, onChangeDaps }) => {\n  return (\n    <Boxfc>\n      {daps.map((dap, index) => (\n        <SortableDapItem\n          key={dap.key}\n          index={index}\n          dap={dap}\n          onChangeDap={(modifiedDap) => {\n            onChangeDaps(daps.map((x, i) => (i == index ? modifiedDap : x)))\n          }}\n          onClickRemoveDap={() =>\n            onChangeDaps(daps.filter((d) => dap.key != d.key))\n          }\n          daps={daps}\n        />\n      ))}\n    </Boxfc>\n  )\n})\n\nconst FieldsManager = ({\n  daps,\n  onSetDaps,\n}: {\n  daps: Dap[]\n  onSetDaps: (daps: Dap[]) => void\n}) => {\n  return (\n    <>\n      <Boxfc mb={2} mt={2}>\n        <Boxf align=\"center\">\n          <H4 ml={3} mb={0.5}>\n            Fields\n          </H4>\n        </Boxf>\n        <Box>\n          <Boxfc>\n            {daps.length ? (\n              <SortableDapList\n                daps={daps}\n                onChangeDaps={(daps) => onSetDaps(daps)}\n                onSortEnd={({ oldIndex, newIndex }) =>\n                  onSetDaps(arrayMove(daps, oldIndex, newIndex))\n                }\n                useDragHandle={true}\n                lockToContainerEdges={true}\n                distance={5}\n                lockAxis=\"y\"\n              />\n            ) : (\n              <Txt fontStyle=\"italic\" mt={1}>\n                no fields, please add one\n              </Txt>\n            )}\n            <Boxf\n              mt={1}\n              ml={3}\n              className=\"addFormButton\"\n              align=\"center\"\n              component=\"button\"\n              onClick={() => {\n                onSetDaps([\n                  ...daps,\n                  {\n                    kind: \"data\",\n                    key: makeid(4),\n                    options: {},\n                    fieldOptions: { locked: false },\n                  },\n                ])\n              }}\n            >\n              <PlusIcon />\n              <div>New Field</div>\n            </Boxf>\n          </Boxfc>\n        </Box>\n      </Boxfc>\n    </>\n  )\n}\n\nfunction isValidated(errors: any) {\n  return Object.keys(errors).length == 0\n}\nfunction validate(data: Partial<FormData>) {\n  const errors: any = {}\n  if (data.name.length == 0) errors.name = \"can't be empty\"\n\n  if (data.spaceId.length == 0) errors.spaceId = \"can't be empty\"\n  if (!data.collection) errors.collection = \"can't be empty\"\n\n  if (data.daps.length == 0) errors.daps = \"at least one\"\n  let i = 1\n  for (let dap of data.daps) {\n    if (!dap.property) {\n      errors.dap = `field ${1} miss a property`\n      break\n    }\n    i++\n  }\n  return errors\n}\n\nconst NameInput = ({\n  defaultName,\n  onChangeName,\n}: {\n  defaultName: string\n  onChangeName: (name: string) => void\n}) => {\n  const [name, setName] = useState(\"\")\n  useEffect(() => {\n    defaultName != name && setName(defaultName)\n  }, [defaultName])\n  return (\n    <>\n      {/*  <textarea value={name} onChange={(ev)=>setName(ev.target.value)}\n      onBlur={()=>onChangeName(name)}\n  \n/>*/}\n      <AutosizeInput\n        name=\"form-field-name\"\n        className=\"nameInput\"\n        value={name}\n        inputStyle={{\n          border: \"0\",\n          fontSize: \"20px\",\n          fontWeight: \"bold\",\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            e.target.blur()\n            e.preventDefault()\n          }\n        }}\n        onFocus={(ev) => ev.target.select()}\n        autoComplete=\"off\"\n        onChange={function (ev) {\n          // event.target.value contains the new value\n          setName(ev.target.value)\n        }}\n        onBlur={() => {\n          print(\"blured\")\n          onChangeName((name.length && name) || \"Untitled\")\n        }}\n      />\n    </>\n  )\n}\n\nconst emptyFormData: Partial<FormData> = {\n  name: \"New Form\",\n  daps: [],\n  id: \"\",\n  spaceId: \"\",\n}\n\nconst SpaceSelect = ({\n  spaceId,\n  onSelectSpaceId,\n  disabled,\n}: {\n  spaceId: string\n  disabled?: boolean\n  onSelectSpaceId: (spaceId: string) => void\n}) => {\n  const { client } = useContext(DataContext)\n\n  useEffect(() => {\n    if (spaceId == \"\") {\n      print(\"got spaces\", client.user.spaces[0])\n      onSelectSpaceId(client.user.spaces[0].id)\n    }\n  }, [spaceId])\n  return (\n    <Boxf align=\"center\" flex={1}>\n      <Box\n        style={{\n          minWidth: \"200px\",\n          fontSize: \"1rem\",\n          marginRight: \"28px\",\n          fontWeight: 400,\n        }}\n      >\n        <PropretyName option={{ name: \"Workspace\", type: \"workspace\" }} />\n      </Box>\n      <Boxf flex={1}>\n        <SelectFieldNoAutoComplete\n          disabled={disabled}\n          value={spaceId}\n          options={client.user.spaces}\n          onSelectOption={(id) => {\n            onSelectSpaceId(id)\n          }}\n          uniqueKey=\"id\"\n          renderValue={(id) => {\n            const d = client.user.spaces.find((e) => e.id == id)\n            return (\n              <SelectedPageOption\n                iconComp={<div style={{ marginRight: \"8px\" }}></div>}\n                name={d?.name || \"\"}\n                className=\"selectedDataOptionRow\"\n              />\n            )\n          }}\n          renderOption={(space) => (\n            <SelectedPageOption\n              name={space?.name || \"\"}\n              className=\"selectedDataOptionRow\"\n            />\n          )}\n          style={{ width: \"200px\", fontSize: \"13px\", height: \"40px\" }}\n          className=\"propertyField\"\n        />\n      </Boxf>\n    </Boxf>\n  )\n}\n\nconst SavePageContentSelect = ({\n  savePageContent,\n  onSavePageContentToggle,\n}: {\n  savePageContent: boolean\n  onSavePageContentToggle: (x: boolean) => void\n}) => {\n  return (\n    <>\n      <Boxf align=\"center\" flex={1} ml={1}>\n        <Box\n          style={{\n            minWidth: \"200px\",\n            marginLeft: \"20px\",\n            fontSize: \"1rem\",\n            fontWeight: 400,\n          }}\n        >\n          <PropretyName\n            option={{ name: \"Save Page Content\", type: \"saveContent\" }}\n          />\n        </Box>\n        <CheckBoxField\n          name={\"Save Page Content\"}\n          value={savePageContent}\n          onChange={onSavePageContentToggle}\n          size=\"small\"\n          checkboxStyle={{\n            width: \"200px\",\n            userSelect: \"none\",\n            marginLeft: 0,\n            marginRight: 0,\n          }}\n          checkboxClass=\"propertyField\"\n        />\n      </Boxf>\n    </>\n  )\n}\n\nconst TemplatesSelect = ({\n  templateId,\n  onSelectTemplateId,\n  templates,\n  template,\n}: {\n  templateId: string | \"\"\n  template?: TemplateInfo\n  onSelectTemplateId: (templateId: string) => void\n  templates: TemplateInfo[]\n}) => {\n  const { client } = useContext(DataContext)\n  const { refreshCollection } = useContext(EditFormContext)\n  return (\n    <>\n      <Boxf align=\"center\" flex={1} ml={1}>\n        <Box\n          style={{\n            minWidth: \"200px\",\n            marginLeft: \"20px\",\n            fontSize: \"1rem\",\n            fontWeight: 400,\n          }}\n        >\n          <PropretyName option={{ name: \"Template\", type: \"template\" }} />\n        </Box>\n        <Boxf flex={1}>\n          <SelectFieldNoAutoComplete\n            displayEmpty\n            value={templateId}\n            options={templates.length ? templates : template ? [template] : []}\n            onOpen={() => {\n              print(\"openened template, refreshing collection...\")\n              refreshCollection()\n            }}\n            onSelectOption={(id) => {\n              onSelectTemplateId(id)\n            }}\n            uniqueKey=\"id\"\n            renderValue={(id) => {\n              const template = templates.find((e) => e.id == id)\n              if (!template) return <></>\n              return (\n                <SelectedPageOption\n                  name={template?.name || \"\"}\n                  pageId={template.id}\n                  icon={template.icon}\n                  userId={client.user.id}\n                />\n              )\n            }}\n            renderValueEmpty={() => {\n              return (\n                <SelectedPageOption\n                  iconComp={\n                    <div style={{ marginRight: \"8px\" }}>\n                      <EmptyNotionPageIcon />\n                    </div>\n                  }\n                  name={\"None\"}\n                />\n              )\n            }}\n            renderOptionEmpty={() => {\n              return (\n                <SelectedPageOption\n                  iconComp={\n                    <div style={{ marginRight: \"8px\" }}>\n                      <EmptyNotionPageIcon />\n                    </div>\n                  }\n                  name={\"None\"}\n                />\n              )\n            }}\n            renderOption={(template) => (\n              <SelectedPageOption\n                pageId={template.id}\n                icon={template.icon}\n                userId={client.user.id}\n                name={template?.name || \"\"}\n              />\n            )}\n            style={{ width: \"200px\", fontSize: \"13px\", height: \"40px\" }}\n            className=\"propertyField\"\n          />\n        </Boxf>\n      </Boxf>\n    </>\n  )\n}\n\nfunction genRandomHash(schema) {\n  let x = makeid(4)\n  while (x in schema) {\n    x = makeid(4)\n  }\n  return x\n}\n\nasync function createNewUrlProperty(\n  collection: Collection,\n  client: DummyNotionClient\n) {\n  const schema = collection.schema\n  print(\"got\", collection)\n  const urlPropId = genRandomHash(schema)\n  schema[urlPropId] = { name: \"URL\", type: \"url\" }\n  await client._submitTransaction([\n    {\n      id: collection.id,\n      table: \"collection\",\n      path: [],\n      command: \"update\",\n      args: { schema: schema },\n    },\n  ])\n  return { ...schema[urlPropId], id: urlPropId }\n}\n\nasync function createDefaultDaps(\n  collection: Collection,\n  client: DummyNotionClient,\n  setLoading: (v: boolean) => void\n): Promise<Dap[]> {\n  let dapTitle: Dap | null = null\n  let dapLink: Dap | null = null\n  for (let id in collection.schema) {\n    let p = collection.schema[id]\n    if (p.type == \"title\") {\n      dapTitle = {\n        kind: \"data\",\n        key: makeid(4),\n        options: {\n          selectedData: \"webpageTitle\",\n        },\n        property: { ...p, id },\n        fieldOptions: { locked: true },\n      }\n      if (dapLink) break\n    }\n    if (p.type == \"url\") {\n      dapLink = {\n        kind: \"data\",\n        key: makeid(4),\n        options: {\n          selectedData: \"webpageUrl\",\n        },\n        property: { ...p, id },\n        fieldOptions: { locked: true },\n      }\n      if (dapTitle) break\n    }\n  }\n  if (dapLink == null) {\n    setLoading(true)\n    try {\n      dapLink = {\n        kind: \"data\",\n        key: makeid(4),\n        options: {\n          selectedData: \"webpageUrl\",\n        },\n        property: await createNewUrlProperty(collection, client),\n        fieldOptions: { locked: true },\n      }\n    } catch (e) {\n      console.log(\"error when creating new url property\", e)\n    }\n    setLoading(false)\n  }\n  print(dapLink)\n  let daps = []\n  let dapFrontImage: Dap = {\n    kind: \"data\",\n    key: makeid(4),\n    options: {\n      selectedData: \"webpageImage\",\n    },\n    property: {\n      name: \"front image\",\n      id: \"pageFrontImage\",\n      type: \"image\" as any,\n    },\n    fieldOptions: {\n      locked: true,\n      image: { size: \"normal\", type: \"coverLike\" },\n    },\n  }\n  let dapFrontIcon: Dap = {\n    kind: \"data\",\n    key: makeid(4),\n    options: {\n      selectedData: \"websiteIcon\",\n    },\n    property: { name: \"icon\", id: \"pageIcon\", type: \"image\" as any },\n    fieldOptions: {\n      locked: true,\n      image: { size: \"normal\", type: \"coverLike\" },\n    },\n  }\n  daps.push(dapFrontIcon)\n  daps.push(dapFrontImage)\n  if (dapLink) daps.push(dapLink)\n  if (dapTitle) daps.push(dapTitle)\n  return daps\n}\nconst EditFormContext = React.createContext<{\n  refreshCollection: () => Promise<void>\n} | null>(null)\n\nconst LoadingSkeletonBox = ({ ...bprops }: {} & BoxProps) => {\n  return (\n    <Box {...bprops}>\n      <Boxfc>\n        <Skeleton variant=\"text\" height=\"40px\" width=\"50px\" />\n        <Skeleton variant=\"text\" height=\"40px\" width=\"470px\" />\n        <Skeleton variant=\"text\" height=\"40px\" width=\"470px\" />\n        <Skeleton variant=\"text\" height=\"40px\" width=\"470px\" />\n      </Boxfc>\n    </Box>\n  )\n}\n\nexport const EditForm = ({\n  currentUrl,\n  ...p\n}: OptionParams & { goBack: () => void; currentUrl?: string }) => {\n  const [data, _setData] = useState<Partial<FormData>>(emptyFormData)\n  const [loading, setLoading] = useState(false)\n  const [formId, setFormId] = useState(p.id || null)\n  const timerSaveData = React.useRef(null)\n  const setData = (f: (d: Partial<FormData>) => Partial<FormData>) => {\n    //setTimout\n    if (!timerSaveData.current) {\n      print(\"record timeout\")\n      timerSaveData.current = setTimeout(() => {\n        //saveSync()\n        print(\"Save!!!\")\n        timerSaveData.current = null\n      }, 200)\n    } else {\n      print(\"ignore timeout\")\n    }\n    return _setData(f)\n  }\n\n  const saveSync = async () => {\n    print(\"saveSync\")\n    await saveFormData(data, p.action, p.id)\n    setFormListHasChanged(true)\n\n    if (p.databaseLocked) {\n      setCurrentFormHasChanged(true)\n    }\n    /*if (!data.collection) {\n      if (formId) {\n        deleteFormData(formId)\n        setFormId(null)\n      }\n    } else {\n      const d = await saveFormData(data, formId ? \"edit\" : \"new\", formId)\n      setFormId(d.id)\n    }\n    setFormListHasChanged(true)\n    if (p.databaseLocked) {\n      setCurrentFormHasChanged(true)\n    }*/\n  }\n\n  useInterval(\n    () => {\n      print(\"save pos\")\n      saveCurrentPopupState({\n        pos: \"settings\",\n        url: currentUrl,\n        formId: formId,\n      })\n    },\n    1500,\n    () => resetCurrentPopupState()\n  )\n\n  //const [loaded, setLoaded] = useState(false)\n  const { allDone, setLoaded, loadStates } = useLoadState({\n    collection_refresh: true,\n    formdata: true,\n  })\n  const [localStatus, setLocalStatus] = useState<\n    \"loading\" | \"ok\" | \"loading_refresh_collection\"\n  >(\"loading\")\n\n  useEffect(() => {\n    if (p.action == \"new\") {\n      setTimeout(() => {\n        setLocalStatus(\"ok\")\n      }, 200)\n    } else {\n      ;(async () => {\n        if (p.action == \"edit\") {\n          console.log(\"fetching data...\")\n          let x = await getFormData(p.id)\n          print(\"got\", \"data:\", data, p, x, p)\n          _setData(x)\n          setLoaded(\"formdata\")\n          setLocalStatus(\"ok\")\n        }\n      })()\n    }\n  }, [])\n\n  const updateData = useCallback(\n    (nd) => setData((data) => ({ ...data, ...nd })),\n    [data]\n  )\n  const {\n    client,\n    setFormListHasChanged,\n    setCurrentFormHasChanged,\n  } = useContext(DataContext)\n  const [advancedSettingOpen, setAdvancedSettingOpen] = useState(true)\n\n  const handleRefreshCollection = () => {\n    refreshCollection(client, data.collection, data.daps, {\n      getTemplatesInfo: true,\n      checkTemplateUpToDate: data.template,\n    }).then((result) => {\n      setData((data) => ({\n        ...applyRefreshCollectionOnData(result, data as any),\n      }))\n    })\n  }\n\n  useEffect(() => {\n    if (loadStates.formdata == true) {\n      if (data.collection) {\n        print(\"perform update...\")\n        //perform a data update\n        handleRefreshCollection()\n      }\n    }\n  }, [loadStates])\n\n  useEffect(() => {}, [data])\n  return (\n    <>\n      <div className=\"editForm\">\n        <EditFormContext.Provider\n          value={{\n            refreshCollection: async () => {\n              handleRefreshCollection()\n            },\n          }}\n        >\n          <Backdrop\n            style={{ color: \"white\", zIndex: 2 }}\n            open={localStatus == \"loading_refresh_collection\"}\n          >\n            <CircularProgress color=\"inherit\" />\n          </Backdrop>\n          <BoxCont py={2} px={4} width=\"500px\">\n            <Box minHeight=\"60px\"></Box>\n\n            <AppBar\n              style={{\n                padding: \"8px\",\n                minWidth: \"500px\",\n                backgroundColor: \"white\",\n                height: \"55px\",\n              }}\n            >\n              <Boxf align=\"center\" justify=\"center\">\n                <>\n                  {localStatus == \"loading\" ? (\n                    <>\n                      <Skeleton variant=\"rect\" height=\"40px\" width=\"200px\" />\n                    </>\n                  ) : (\n                    <NameInput\n                      defaultName={data.name}\n                      onChangeName={(name) => updateData({ name })}\n                    />\n                  )}\n                </>\n              </Boxf>\n              <Box style={{ position: \"fixed\", right: 10 }}>\n                <>\n                  {(!data?.collection && (\n                    <Button onClick={() => goBack()} variant=\"text\">\n                      cancel\n                    </Button>\n                  )) || (\n                    <Button\n                      variant=\"text\"\n                      onClick={async () => {\n                        console.log(\">>>>>>>>>>>>>>>>>>\", data, p)\n                        await saveSync()\n                        goBack()\n                      }}\n                    >\n                      save\n                    </Button>\n                  )}\n                </>\n              </Box>\n            </AppBar>\n\n            {localStatus == \"loading\" ? (\n              <>\n                <Boxfc mb={2}>\n                  <LoadingSkeletonBox mb={2} />\n                  {p.action == \"edit\" && <LoadingSkeletonBox />}\n                </Boxfc>\n              </>\n            ) : (\n              <>\n                <Boxfc>\n                  <Boxfc>\n                    {!(/*p.databaseLocked || */ false) && (\n                      <>\n                        <H4 mb={0.5} ml={3}>\n                          Database\n                        </H4>\n                        <Box mb={0.5}>\n                          <SpaceSelect\n                            spaceId={data.spaceId}\n                            disabled={/*p.databaseLocked || */ false}\n                            onSelectSpaceId={(spaceId) => {\n                              if (data.spaceId != spaceId) {\n                                updateData({ spaceId, collection: undefined })\n                                if (formId) {\n                                  print(\"delete formId\")\n                                  deleteFormData(formId)\n                                }\n                              }\n                            }}\n                          />\n                        </Box>\n\n                        <Box mb={0.5}>\n                          <CollectionSelect\n                            disabled={/*p.databaseLocked || */ false}\n                            collection={data.collection}\n                            spaceId={data.spaceId}\n                            onSelectCollection={async (collection) => {\n                              let name = data.name\n                              let daps = data.daps\n                              if (!collection) {\n                                name = \"New Form\"\n                                daps = []\n                                updateData({ collection, name, daps })\n                                //setLoaded(true)\n                                return\n                              } else if (\n                                data.name == \"New Form\" //||\n                                //data.name.startsWith(\"Add to \")\n                              ) {\n                                name = `${\n                                  collection.icon &&\n                                  !collection.icon.startsWith(\"http\")\n                                    ? `${collection.icon} `\n                                    : \"\"\n                                }${collection.name[0][0]}`\n                              }\n\n                              if (\n                                (data.collection &&\n                                  data.collection.id != collection.id) ||\n                                data.daps.length == 0\n                              ) {\n                                print(\"update daps...\")\n                                //empty daps now!\n                                daps = await createDefaultDaps(\n                                  collection,\n                                  client,\n                                  setLoading\n                                )\n                              }\n                              updateData({\n                                collection,\n                                name,\n                                daps,\n                                template: undefined,\n                              })\n                              //setLoaded(true)\n                            }}\n                            /*onRefreshCollectionStart={() => {\n                      setLocalStatus(\"loading_refresh_collection\")\n                    }}\n                    onRefreshCollectionEnd={(result) => {\n                      updateData({\n                        ...applyRefreshCollection(result, data.daps),\n                      })\n                      setLocalStatus(\"ok\")\n                    }}*/\n                            daps={data.daps}\n                          />\n                        </Box>\n                      </>\n                    )}\n                    {loading && <LoadingSkeletonBox mt={2} />}\n                    {data.collection && (\n                      <Box mt={2}>\n                        <Boxfc>\n                          <H4 mb={0.5} ml={3}>\n                            Options\n                          </H4>\n                          <Box>\n                            <TemplatesSelect\n                              templateId={data.template?.id || \"\"}\n                              template={data.template}\n                              templates={\n                                (data.collection as any).templatesInfo || []\n                              }\n                              onSelectTemplateId={(templateId) => {\n                                updateData({\n                                  template: (data.collection as any).templatesInfo?.find(\n                                    (template) => template.id == templateId\n                                  ),\n                                })\n                              }}\n                            />\n                          </Box>\n                          <Box mt={0.5}>\n                            <SavePageContentSelect\n                              onSavePageContentToggle={(savePageContent) => {\n                                updateData({\n                                  savePageContent,\n                                })\n                              }}\n                              savePageContent={data.savePageContent || false}\n                            />\n                          </Box>\n                        </Boxfc>\n                        {/*\n                      <Accordion\n                        expanded={advancedSettingOpen}\n                        onChange={() =>\n                          setAdvancedSettingOpen(!advancedSettingOpen)\n                        }\n                        style={{ boxShadow: \"none\" }}\n                      >\n                        <AccordionSummary\n                          expandIcon={<ExpandMoreIcon />}\n                          style={{\n                            display: \"inline-flex\",\n                          }}\n                        >\n                          <div style={{ fontWeight: 600 }}>More Settings</div>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                          \n                        </AccordionDetails>\n                      </Accordion>\n                        */}\n                      </Box>\n                    )}\n                  </Boxfc>\n                </Boxfc>\n              </>\n            )}\n\n            {data.collection && (\n              <FormSubmissionContext.Provider\n                value={{\n                  spaceId: data.spaceId,\n                  createNewPageInCollection: (name, collectionId) => {\n                    //todo\n                    let newPage = {\n                      id: uuid(),\n                      name,\n                    }\n                    upsertCachedCollectionPage(newPage, collectionId)\n                    client\n                      .createRecord(\n                        \"block\",\n                        { id: collectionId, _table: \"collection\" },\n                        {\n                          id: newPage.id,\n                          type: \"page\",\n                          properties: { title: [[name]] },\n                        }\n                      )\n                      .then((e) => {\n                        print(\"page created!\", e)\n                      })\n                    return newPage\n                  },\n                  getCachedCollectionPages: getCachedCollectionPages,\n                  upsertCachedCollectionPage: upsertCachedCollectionPage,\n\n                  /*getCollectionPages: async (collectionId: string) => {\n                    //use cache to retrieve last relations cached\n                    return []\n                  },*/\n\n                  createNewValueForProperty: (propertyId, value, color) => {\n                    print(\"fetch client\")\n                    print(\"calling addValueProperty\", propertyId, value)\n                    let newValue = {\n                      id: uuid(),\n                      value,\n                      color,\n                    }\n                    //setImportantRefreshing(true)\n                    client\n                      .addValueToPropertyCollection(\n                        data.collection,\n                        propertyId,\n                        value,\n                        newValue.id,\n                        newValue.color\n                      )\n                      .then((e) => {\n                        handleRefreshCollection()\n                      })\n                    return newValue\n                  },\n                  refreshCollection: async () => {\n                    print(\"calling refresh collection\")\n                  },\n                }}\n              >\n                <FormEditContext.Provider\n                  value={{ collection: data.collection }}\n                >\n                  <FieldsManager\n                    daps={data.daps}\n                    onSetDaps={(daps) => updateData({ daps })}\n                  />\n                </FormEditContext.Provider>\n              </FormSubmissionContext.Provider>\n            )}\n          </BoxCont>\n        </EditFormContext.Provider>\n      </div>\n    </>\n  )\n}\nexport default EditForm\n","import React, { useState, useEffect, useCallback, useRef } from \"react\"\nimport \"./App.css\"\n// prettier-ignore\nimport {\n  Box, Boxfc, Boxf, BoxPaper, Hidden,  Content,BoxProps,Chip,\n  BoxCont, BoxVert, BoxHori, TextField,\n  H4, H1, H3, H2,Txt,\n  Button,Touchable, Switch, Divider,Avatar,\n  Table, TableBody, TableCell, TableContainer, TableHead,TableRow, \n  Opener,useLoadState\n} from \"./shared/MaterialUI\";\nimport storage from \"./shared/lib/storage\"\nimport {\n  FORM_LIST_KEY,\n  FORM_KEY_PREFIX,\n  FormData,\n  Dap,\n  ModifiedDapProperty,\n  DapOptionsSelectedDataTypes,\n  APP_NAME,\n  FormListItem,\n  APP_VERSION,\n  APP_VERSION_FULL,\n  WHATS_NEW_LINK,\n  OptionParams,\n} from \"./shared/appConfig\"\nimport {\n  DragHandleIcon,\n  DeleteIcon,\n  PlusIcon,\n  DuplicateIcon,\n} from \"./shared/icons\"\nimport { sleep, print, promisify, makeid, arrayMove } from \"./shared/utils\"\nimport { Field, HeaderViewer } from \"./components/Field\"\nimport {\n  RefreshCollectionResult,\n  refreshCollection,\n  getClient,\n  ErrorGetClient,\n  applyRefreshCollection,\n  saveFormData,\n  getFormData,\n  getCurrentPopupState,\n  saveCurrentPopupState,\n  resetCurrentPopupState,\n} from \"./shared/appUtils\"\nimport { CollectionPage, DummyNotionClient } from \"./shared/notionlib/notion\"\nimport { Router, goTo, goBack } from \"./components/dummyRouter\"\nimport { EditForm as EditFormPage } from \"./pages/EditForm\"\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableHandle,\n} from \"react-sortable-hoc\"\nimport { Layout } from \"./components/Layout\"\nimport { Loading, Error } from \"./components/Reusables\"\nimport { FillFormPage, TopLayout } from \"./pages/FillFormPage\"\nimport { stat } from \"fs\"\nconst uuid = require(\"uuid/v4\")\n\nconst ArrowBackIcon = require(\"@material-ui/icons/ArrowBack\").default\nconst CloseIcon = require(\"@material-ui/icons/Close\").default\nconst KeyboardArrowRightIcon = require(\"@material-ui/icons/KeyboardArrowRight\")\n  .default\nconst IconButton = require(\"@material-ui/core/IconButton\").default\nconst InputLabel = require(\"@material-ui/core/InputLabel\").default\nconst Select = require(\"@material-ui/core/Select\").default\nconst CircularProgress = require(\"@material-ui/core/CircularProgress\").default\nconst SettingsIcon = require(\"@material-ui/icons/Settings\").default\nconst StarOutlineIcon = require(\"@material-ui/icons/StarBorderOutlined\").default\nconst SettingsOutlinedIcon = require(\"@material-ui/icons/SettingsOutlined\")\n  .default\nconst EditIcon = require(\"@material-ui/icons/EditOutlined\").default\nconst InfoIcon = require(\"@material-ui/icons/InfoOutlined\").default\nconst List = require(\"@material-ui/core/List\").default\nconst ListItem = require(\"@material-ui/core/ListItem\").default\nconst ListItemText = require(\"@material-ui/core/ListItemText\").default\nconst Skeleton = require(\"@material-ui/lab/Skeleton\").default\n\nconst DialogTitle = require(\"@material-ui/core/DialogTitle\").default\nconst Dialog = require(\"@material-ui/core/Dialog\").default\n\nconst Menu = require(\"@material-ui/core/Menu\").default\nconst MenuItem = require(\"@material-ui/core/MenuItem\").default\nfunction getInfoFromCurrentPage(): Promise<{\n  url: string\n  title: string\n} | null> {\n  return new Promise((resolve) => {\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n      if (tabs.length == 0) {\n        resolve(undefined)\n        return\n      }\n      resolve({ title: tabs[0].title, url: tabs[0].url })\n    })\n  })\n}\n\nexport const FormSubmissionContext = React.createContext<{\n  createNewPageInCollection: (\n    name: string,\n    collectionId: string\n  ) => CollectionPage\n  getCachedCollectionPages: (\n    collectionId: string\n  ) => Promise<Record<string, CollectionPage>>\n  upsertCachedCollectionPage: (\n    page: CollectionPage,\n    collectionId: string\n  ) => Promise<void>\n  createNewValueForProperty: (\n    propertyId: string,\n    value: string,\n    color: any\n  ) => { id: string; value: string; color: string }\n  refreshCollection: () => Promise<void>\n  spaceId: string\n}>({} as any)\n\nconst DragHandle = SortableHandle(({}) => (\n  <div style={{ cursor: \"grab\" }}>\n    <DragHandleIcon />\n  </div>\n))\n\nconst MenuBoxItem = ({ title, iconComp }: { title: string; iconComp: any }) => {\n  return (\n    <>\n      <Boxf align=\"center\">\n        <Box mr={1}>{iconComp}</Box>\n        <div style={{ fontSize: \"13px\" }}>{title}</div>\n      </Boxf>\n    </>\n  )\n}\n\nconst MenuForm = ({\n  anchorEl,\n  open,\n  onClose,\n  onClickRemove,\n  onEdit,\n  onFav,\n  onClickDuplicate,\n  isFavorite,\n  canFavorite,\n  disabledClick,\n}) => {\n  return (\n    <>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClose}\n      >\n        {disabledClick == true && (\n          <MenuItem onClick={onEdit}>\n            <MenuBoxItem\n              title=\"Edit Form\"\n              iconComp={\n                <SettingsOutlinedIcon\n                  style={{\n                    fontSize: \"20px\",\n                    paddingTop: \"5px\",\n                    color: \"rgba(0, 0, 0, 0.83)\",\n                  }}\n                />\n              }\n            />\n          </MenuItem>\n        )}\n\n        {canFavorite && (\n          <MenuItem\n            onClick={() => {\n              onClose()\n              onFav()\n            }}\n          >\n            <MenuBoxItem\n              title={isFavorite ? `Unset Focus Form` : `Set as Focus Form`}\n              iconComp={\n                <StarOutlineIcon\n                  style={{\n                    fontSize: \"20px\",\n                    paddingTop: \"5px\",\n                    color: \"rgba(0, 0, 0, 0.83)\",\n                  }}\n                />\n              }\n            />\n          </MenuItem>\n        )}\n\n        <MenuItem\n          onClick={() => {\n            onClose()\n            onClickDuplicate()\n          }}\n        >\n          <MenuBoxItem title=\"Duplicate Form\" iconComp={<DuplicateIcon />} />\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            onClose()\n            onClickRemove()\n          }}\n        >\n          <MenuBoxItem title=\"Delete Form\" iconComp={<DeleteIcon />} />\n        </MenuItem>\n      </Menu>\n    </>\n  )\n}\n\nconst SortableDragHandleButton = SortableHandle(\n  ({\n    onEdit,\n    onClickDuplicate,\n    onClickRemove,\n    isFavorite,\n    canFavorite,\n    onFav,\n    disabledClick,\n  }: {\n    onEdit\n    onFav\n    onClickDuplicate\n    onClickRemove\n    isFavorite: boolean\n    canFavorite: boolean\n    disabledClick: boolean\n  }) => {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n    return (\n      <>\n        <Opener>\n          {(menu) => (\n            <>\n              <Box\n                mr={0.5}\n                className=\"boxButtonShowOnlyOnHover\"\n                onClick={(event) => {\n                  setAnchorEl(event.currentTarget)\n                  menu.handleOpen()\n                }}\n              >\n                <DragHandleIcon />\n              </Box>\n              <MenuForm\n                anchorEl={anchorEl}\n                onEdit={onEdit}\n                disabledClick={disabledClick}\n                onFav={onFav}\n                onClose={() => {\n                  menu.handleClose()\n                  setAnchorEl(null)\n                }}\n                canFavorite={canFavorite}\n                isFavorite={isFavorite}\n                onClickRemove={onClickRemove}\n                onClickDuplicate={onClickDuplicate}\n                open={menu.isOpen}\n              />\n            </>\n          )}\n        </Opener>\n      </>\n    )\n  }\n)\n\nconst SortableFormItem = SortableElement(\n  ({\n    form,\n    onClickRemove,\n    onDuplicate,\n    disabledClick,\n    formsCount,\n    onSelectForm,\n    onToggleFavoriteForm,\n    isFavorite,\n    canFavorite,\n  }: {\n    form: FormListItem\n    onClickRemove: () => void\n    onDuplicate: () => void\n    formsCount: number\n    isFavorite: boolean\n    canFavorite: boolean\n    onSelectForm: (form: FormListItem) => void\n    disabledClick?: boolean\n    onToggleFavoriteForm: (formId: string) => void\n  }) => {\n    const { openOptionsPage } = React.useContext(DataContext)\n    return (\n      <Boxf align=\"center\" mb={1} width=\"100%\" className=\"boxItemParent\">\n        <SortableDragHandleButton\n          onEdit={() => {\n            openOptionsPage({ action: \"edit\", id: form.id })\n          }}\n          onFav={() => onToggleFavoriteForm(form.id)}\n          isFavorite={isFavorite}\n          disabledClick={disabledClick}\n          canFavorite={canFavorite}\n          onClickRemove={onClickRemove}\n          onClickDuplicate={onDuplicate}\n        />\n        <Boxf\n          flex={1}\n          className={`${(disabledClick && \"disabledBox\") || \"\"} chooseBox`}\n          align=\"center\"\n          justify=\"space-between\"\n          key={form.id}\n          onClick={() => !disabledClick && onSelectForm(form)}\n          component=\"button\"\n          disabled={disabledClick}\n          style={\n            (disabledClick && { color: \"grey\" }) ||\n            (isFavorite && { background: \"#e8e7cf\" }) ||\n            {}\n          }\n        >\n          <div>\n            <Txt>{form.name}</Txt>\n          </div>\n          <KeyboardArrowRightIcon style={{ color: \"grey\" }} />\n        </Boxf>\n      </Boxf>\n    )\n  }\n)\n\nconst FormList = SortableContainer(\n  ({\n    forms,\n    canSavePage,\n    onClickRemoveFormItem,\n    onDuplicateItem,\n    onSelectForm,\n    onToggleFavoriteForm,\n  }: {\n    forms: FormListItem[]\n    onClickRemoveFormItem: (id: string) => void\n    onDuplicateItem: (form: FormListItem) => void\n    onSelectForm: (form: FormListItem) => void\n    canSavePage: boolean\n    onToggleFavoriteForm: (formId: string) => void\n  }) => {\n    print(\"can save page\", canSavePage)\n    return (\n      <Boxfc>\n        {forms.map((form, index) => (\n          <SortableFormItem\n            key={form.id}\n            index={index}\n            form={form}\n            disabledClick={!canSavePage}\n            formsCount={forms.length}\n            canFavorite={forms.length > 1}\n            isFavorite={forms.length == 1 ? false : form.favorite === true}\n            onClickRemove={() => onClickRemoveFormItem(form.id)}\n            onDuplicate={() => onDuplicateItem(form)}\n            onSelectForm={onSelectForm}\n            onToggleFavoriteForm={onToggleFavoriteForm}\n          />\n        ))}\n      </Boxfc>\n    )\n  }\n)\n\nconst LoadingSelectForm = ({ metadatas }: { metadatas }) => {\n  return (\n    <>\n      <TopLayout metadatas={metadatas}>\n        <Box my={2}>\n          <CircularProgress color=\"primary\" size={20} />\n        </Box>\n        {/*<Box mb={1}>\n          <Skeleton variant=\"rect\" height=\"30px\" width=\"335px\" />\n        </Box>\n\n        <Box mb={1}>\n          <Skeleton variant=\"rect\" height=\"30px\" width=\"335px\" />\n        </Box>\n\n  <Skeleton variant=\"rect\" height=\"30px\" width=\"335px\" />*/}\n      </TopLayout>\n      )\n    </>\n  )\n}\nconst ChooseFormPage = ({\n  forms,\n  onSelectForm,\n  metadatas,\n  canSavePage,\n  onChangeForms,\n  connectedToNotion,\n}: {\n  forms: FormListItem[]\n  metadatas\n  onSelectForm\n  canSavePage: boolean\n  onChangeForms: (forms: FormListItem[]) => void\n  connectedToNotion: boolean\n}) => {\n  const { openOptionsPage } = React.useContext(DataContext)\n  if (!connectedToNotion) {\n    return (\n      <TopLayout\n        metadatas={metadatas}\n        layoutProps={{ rightIcon: \"info\" }}\n        noMargin\n      >\n        <Boxfc align=\"center\" mb={1}>\n          <H4>Hello 👋 </H4>\n          <H4 mb={3}> To save this page, please log in to Notion</H4>\n          <Button\n            onClick={() => {\n              chrome.tabs.create({ url: `https://www.notion.so/login` })\n              window.close()\n            }}\n          >\n            Log in to Notion\n          </Button>\n        </Boxfc>\n      </TopLayout>\n    )\n  }\n\n  return (\n    <TopLayout\n      metadatas={metadatas}\n      layoutProps={{ rightIcon: \"info\" }}\n      noMargin\n    >\n      <Boxfc pl={\"6px\"}>\n        <FormList\n          forms={forms}\n          useDragHandle={true}\n          canSavePage={canSavePage}\n          onSortEnd={({ oldIndex, newIndex }) => {\n            document.body.style.cursor = \"default\"\n            oldIndex != newIndex &&\n              onChangeForms(arrayMove(forms, oldIndex, newIndex))\n          }}\n          onSelectForm={onSelectForm}\n          onClickRemoveFormItem={(formId) => {\n            onChangeForms(forms.filter((f) => f.id != formId))\n          }}\n          onDuplicateItem={async (formInfo) => {\n            const fullForm = await getFormData(formInfo.id)\n            const newFormInfo = await saveFormData(\n              { ...fullForm, name: `${formInfo.name} (Copy)` },\n              \"new\",\n              null\n            )\n            onChangeForms([...forms, newFormInfo])\n          }}\n          onToggleFavoriteForm={(formId) => {\n            onChangeForms(\n              forms.map((f) => ({\n                ...f,\n                favorite: f.id == formId ? (f.favorite ? false : true) : false,\n              }))\n            )\n          }}\n          onSortStart={() => (document.body.style.cursor = \"grabbing\")}\n          lockAxis=\"y\"\n          lockToContainerEdges={true}\n          distance={5}\n        />\n      </Boxfc>\n      {forms.length == 0 ? (\n        <>\n          <Boxfc ml={3.5}>\n            <Button\n              //variant=\"text\"\n              onClick={() => openOptionsPage({ action: \"new\" })}\n            >\n              Create a form\n            </Button>\n          </Boxfc>\n        </>\n      ) : (\n        <Box ml={3.5}>\n          <Boxf\n            className=\"addFormButton\"\n            align=\"center\"\n            component=\"button\"\n            onClick={() => openOptionsPage({ action: \"new\" })}\n            style={{}}\n          >\n            <PlusIcon />\n            New Form\n          </Boxf>\n        </Box>\n      )}\n    </TopLayout>\n  )\n}\n\nasync function loadCustomCss(form: FormData): Promise<FormData> {\n  let customs = []\n  form.daps.forEach(\n    (e) =>\n      e.options.customCss &&\n      customs.push({ key: e.key, ...e.options.customCss })\n  )\n  if (!customs.length) return form\n  var port = chrome.runtime.connect({ name: \"get_custom_css\" })\n\n  return new Promise((resolve) => {\n    port.postMessage({ type: \"initial_data\", params: { customs } })\n    port.onMessage.addListener((x) => {\n      switch (x.type) {\n        case \"error\":\n          print(\"CUSTOM CSS ERROR!\")\n          port.disconnect()\n          resolve(form)\n          break\n        case \"done\":\n          let md = {}\n          let i = 0\n          for (let c of customs) {\n            md[c.key] = x.data[i]\n            i++\n          }\n          let daps = form.daps.map((e) => {\n            if (!(e.key in md)) return e\n            return { ...e, options: { defaultValue: md[e.key] } }\n          })\n          print(\"dasp\", daps, md)\n          resolve({ ...form, daps })\n      }\n    })\n  })\n}\n\nasync function getCurrentPageMetadatas() {\n  const p = await getInfoFromCurrentPage()\n  if (!p || !p.url?.startsWith(\"http\") || p.url?.includes(\"chrome.google.com\"))\n    return null\n  return new Promise((done) => {\n    var port = chrome.runtime.connect({ name: \"get_metadatas\" })\n    port.onDisconnect.addListener(() => {\n      done(null)\n      console.log(\"disconnected\")\n    })\n    port.onMessage.addListener((x) => {\n      console.log(\"received\", x)\n      switch (x.type) {\n        case \"done\":\n          done(x.data)\n          port.disconnect()\n          break\n        case \"error\":\n          done(null)\n      }\n    })\n  })\n}\n\ntype AppStatus =\n  | \"loading\"\n  | \"choose_form\"\n  | \"loading_select_form\"\n  | \"error_cant_get_metadatas\"\n  | \"error_custom\"\n  | \"submit_form\"\n  | \"loading_metadatas\"\n  | \"options_form\"\n\ntype ErrorType = ErrorGetClient\nconst errorMsg: Partial<Record<ErrorGetClient, string>> = {\n  need_to_login_to_notion:\n    \"You are not connected to Notion, please go on notion.so, log in, then reload this page\",\n  cookie_expired: \"your session with Notion expired, you need to log in again\",\n}\n\nexport type DataContext = StateData & {}\nexport const DataContext = React.createContext<DataContext>(null as any)\n\ntype UserInfo = {\n  version: string\n  showBanner: boolean\n}\n\ntype StateData = {\n  client?: DummyNotionClient\n  userInfo?: UserInfo\n  fieldDatas: any[]\n  cleanupFieldDatas: any\n  updateUserInfo?: (p: Partial<UserInfo>) => Promise<void>\n  currentFormHasChanged: boolean\n  formListHasChanged: boolean\n  setCurrentFormHasChanged: (b: boolean) => void\n  setFormListHasChanged: (b: boolean) => void\n  openOptionsPage: (p: OptionParams) => void\n}\n\nfunction getParameterByName(name, url?: string): null | string {\n  if (!url) url = window.location.href\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\")\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n    results = regex.exec(url)\n  if (!results) return null\n  if (!results[2]) return \"\"\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"))\n}\n\nfunction camelize(str) {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n    if (+match === 0) return \"\" // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase()\n  })\n}\n\nconst App: React.FC = () => {\n  const [status, setStatus] = useState<AppStatus>(\"loading\")\n  const [forms, setForms] = useState<FormListItem[]>([])\n  const [client, setClient] = useState<DummyNotionClient | null>(null)\n  const [form, _setForm] = useState<FormData>(null)\n  const [metadatas, setMetadatas] = useState(null)\n  const [errorCode, setErrorCode] = useState<ErrorType | null>(null)\n  const [canGoBack, setCanGoBack] = useState(true)\n  const [fieldDatas, setFieldDatas] = useState(null)\n  const [canSavePage, setCanSavePage] = useState(true)\n  const [currentFormHasChanged, setCurrentFormHasChanged] = useState(false)\n  const [formListHasChanged, setFormListHasChanged] = useState(false)\n  const [optionParams, setOptionParams] = useState(null)\n  //const [canUpdateForm, setCanUpdateForm] = useState(false)\n  const { allDone, loadStates, setLoaded } = useLoadState({\n    notionClient: true,\n    forms: true,\n  })\n  const setForm = (x, v?) => {\n    print(\"HERE setForm\", v, x)\n    _setForm(x)\n  }\n  const openOptionsPage = (p: OptionParams) => {\n    //setOptionParams(p)\n    //setStatus(\"options_form\")\n    goTo(EditFormPage, {\n      ...p,\n      goBack: () => {\n        goBack()\n      },\n      currentUrl: metadatas?.url || \"none\",\n    })\n  }\n\n  //fetch data\n  useEffect(() => {\n    ;(async () => {\n      let forms: FormListItem[] = await storage.get(FORM_LIST_KEY, [])\n      print(\"forms\", forms)\n      setLoaded(\"forms\")\n      setForms(forms)\n      const metadatas = await getCurrentPageMetadatas()\n      if (metadatas == null) {\n        setMetadatas({\n          title: \"None\",\n          url: \"save-to-notion\",\n          icon: null,\n          image: null,\n        })\n        try {\n          const isStandalone = getParameterByName(\"standalone\")\n          if (!isStandalone) {\n            setCanSavePage(false)\n          }\n          const formName = getParameterByName(\"formName\")\n          if (formName) {\n            const f = forms.find((e) => camelize(e.name) == camelize(formName))\n            if (f) handleLoadFullForm({ id: f.id })\n          }\n        } catch {\n          print(\"fail\")\n          setCanSavePage(false)\n        }\n        setStatus(\"choose_form\")\n        return\n      }\n      const state = await getCurrentPopupState((metadatas as any).url || \"\")\n      if (state) {\n        //redirect to given state\n        print(\"previous state!\", state)\n        switch (state.pos) {\n          case \"fillForm\":\n            print(\"load full form\")\n            setFieldDatas(state.fieldDatas)\n            handleLoadFullForm({ id: state.formId })\n            break\n          case \"settings\":\n            if (state.formId)\n              openOptionsPage({ action: \"edit\", id: state.formId })\n            else openOptionsPage({ action: \"new\" })\n            break\n        }\n      } else {\n        const favForm = forms.find((form) => form.favorite === true)\n        if (favForm) {\n          handleLoadFullForm(favForm)\n        } else if (forms.length == 1) {\n          //setCanGoBack(false)\n          handleLoadFullForm(forms[0])\n        }\n      }\n      setMetadatas(metadatas)\n      setStatus(\"choose_form\")\n    })()\n  }, [])\n\n  useEffect(() => {\n    ;(async () => {\n      //      let forms: FormListItem[] = await storage.get(FORM_LIST_KEY, [])\n      //print(\"forms\", forms)\n      //setLoaded(\"forms\")\n      //setForms(forms)\n      /*\n      if (forms.length == 0) {\n        setStatus(\"error_need_to_create_form\")\n        } else if (forms.length == 1) {\n        setCanGoBack(false)\n        handleLoadFullForm(forms[0])\n        return\n      } else {\n        setForms(forms)\n        /*let favorite = false\n        let i = 0\n        for (let f of forms) {\n          if (f.favorite === true) {\n            favorite = true\n            setCanGoBack(true)\n            handleLoadFullForm(forms[i])\n            break\n          }\n          i++\n        }\n        if (!favorite) {\n          setStatus(\"choose_form\")\n        }\n      }\n      */\n    })()\n  }, [])\n\n  useEffect(() => {\n    ;(async () => {\n      if (formListHasChanged) {\n        //console.log(\"here!!!!\", formListHasChanged)\n        setFormListHasChanged(false)\n        setForms(await storage.get(FORM_LIST_KEY, []))\n      }\n    })()\n  }, [formListHasChanged])\n\n  const handleLoadFullForm = async (form: { id: string }) => {\n    setStatus(\"loading_select_form\")\n    //fetch also the custom CSS if needed\n    const completeForm = await getFormData(form.id)\n    //const completeForm = await loadCustomCss(lform)\n    print(\"end\")\n    setForm(completeForm)\n    let done = false\n    let waitMs = 0\n    while (!done) {\n      setMetadatas((m) => {\n        setCanSavePage((canSavePage) => {\n          setStatus((status) => {\n            if (status.startsWith(\"error\")) {\n              done = true\n              return status\n            }\n            if (m && canSavePage) {\n              done = true\n              return \"submit_form\"\n            }\n            if (canSavePage == false) {\n              return \"choose_form\"\n            }\n            return \"loading_metadatas\"\n          })\n          return canSavePage\n        })\n        return m\n      })\n      if (!done) {\n        await sleep(100)\n        waitMs += 100\n      }\n    }\n    print(\"waited\", waitMs)\n  }\n\n  const updateForms = useCallback(\n    (fms) => {\n      ;(async () => {\n        setForms(fms)\n        await storage.set(FORM_LIST_KEY, fms)\n      })()\n    },\n    [forms]\n  )\n\n  useEffect(() => {\n    ;(async () => {\n      const resp = await getClient()\n      print(\"resp\", resp)\n      if (resp.status == \"error\") {\n        setErrorCode(resp.errorMsg)\n        //setStatus(\"error_custom\")\n        setLoaded(\"notionClient\", false)\n      } else {\n        /*let userInfo: UserInfo = await storage.get(\"user_info\", {\n          version: APP_VERSION,\n          showBanner: false,\n        })\n\n        if (userInfo.version != APP_VERSION) {\n          userInfo.showBanner = true\n          userInfo.version = APP_VERSION\n          setUserInfo(userInfo)\n        }*/\n        setClient(resp.client)\n        setLoaded(\"notionClient\", true)\n      }\n    })()\n  }, [])\n\n  const escFunction = useCallback((event) => {\n    if (event.keyCode === 27) {\n      //Do whatever when esc is pressed\n      if (\n        [\"INPUT\", \"TEXTAREA\"].some(\n          (e) => e == document.activeElement.tagName.toUpperCase()\n        )\n      ) {\n        ;(document.activeElement as any)?.blur()\n        event.preventDefault()\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", escFunction, false)\n\n    return () => {\n      document.removeEventListener(\"keydown\", escFunction, false)\n    }\n  }, [])\n  return (\n    <DataContext.Provider\n      value={{\n        openOptionsPage,\n        fieldDatas: fieldDatas,\n        cleanupFieldDatas: () => setFieldDatas(null),\n        currentFormHasChanged,\n        formListHasChanged,\n        client: client,\n        setCurrentFormHasChanged,\n        setFormListHasChanged,\n        /*userInfo: userInfo,\n        updateUserInfo: async (p: Partial<UserInfo>) => {\n          let newUserInfo: UserInfo = { ...userInfo }\n          Object.assign(newUserInfo, p)\n          await storage.set(\"user_info\", newUserInfo)\n          print(\"update\", newUserInfo)\n          setUserInfo(newUserInfo)\n        },*/\n      }}\n    >\n      <Router>\n        {\n          ({\n            loading_select_form: <LoadingSelectForm metadatas={metadatas} />,\n            loading_metadatas: <Loading msg=\"loading metadatas\" />,\n            loading: <Loading />,\n            //error_need_to_create_form: <Welcome />,\n            error_custom: <Error msg={errorMsg[errorCode]} />,\n            choose_form: (\n              <ChooseFormPage\n                connectedToNotion={\n                  !(\"notionClient\" in loadStates)\n                    ? true\n                    : loadStates.notionClient\n                }\n                canSavePage={canSavePage}\n                forms={forms}\n                metadatas={metadatas}\n                onSelectForm={handleLoadFullForm}\n                onChangeForms={(forms) => {\n                  updateForms(forms)\n                  console.log(\"change order\")\n                }}\n              />\n            ),\n            submit_form: (\n              <FillFormPage\n                form={form}\n                metadatas={metadatas}\n                onGoBack={() => setStatus(\"choose_form\")}\n                canGoBack={canGoBack}\n                onError={(errorCode) => {\n                  setErrorCode(errorCode)\n                  setStatus(\"error_custom\")\n                }}\n                onChangeForm={setForm}\n              />\n            ),\n            /*options_form: (\n                <EditFormPage {...optionParams} goBack={() => {}} />\n              ),*/\n          } as Record<AppStatus, any>)[status]\n        }\n      </Router>\n    </DataContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nconst { createMuiTheme, ThemeProvider } = require(\"@material-ui/core/styles\")\n//import { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\"\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#4F9BC7\",\n    },\n    secondary: {\n      main: \"hsl(240, 78%, 98%)\",\n    },\n  },\n  overrides: {\n    MuiButton: {\n      text: {\n        //textDecoration: \"underline\",\n        //textUnderlinePosition: \"under\",\n        textTransform: \"capitalize\",\n        \"&:hover\": {\n          backgroundColor: \"rgba(202, 204, 206, 0.4)\",\n        },\n      },\n      root: {\n        textTransform: \"capitalize\",\n      },\n    },\n    MuiChip: {\n      root: {\n        height: \"auto\",\n        padding: 0,\n        borderRadius: \"4px\",\n      },\n      label: {\n        paddingLeft: \"6px\",\n        paddingRight: \"6px\",\n        paddingTop: \"4px\",\n        paddingBottom: \"4px\",\n        fontSize: \"inherit\",\n      },\n    },\n  },\n  props: {\n    MuiTextField: {\n      variant: \"outlined\",\n      color: \"primary\",\n      InputLabelProps: {\n        style: {\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          overflow: \"hidden\",\n          width: \"100%\",\n        },\n      },\n    },\n    MuiButton: {\n      variant: \"contained\",\n      color: \"primary\",\n    },\n    MuiSelect: {\n      variant: \"outlined\",\n    },\n\n    MuiMenu: {\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\",\n      },\n      transformOrigin: {\n        vertical: \"top\",\n        horizontal: \"center\",\n      },\n      getContentAnchorEl: null,\n    },\n  },\n})\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}